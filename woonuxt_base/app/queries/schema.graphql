# This file was generated. Do not edit manually.

schema {
    query: RootQuery
    mutation: RootMutation
}

"Attribute object"
interface Attribute {
    "The globally unique ID for the object"
    id: ID!
    "Name of attribute"
    name: String
    "Selected value of attribute"
    value: String
}

"An error that occurred when updating the cart"
interface CartError {
    "Reason for error"
    reasons: [String]
    "Type of error"
    type: CartErrorType!
}

"Cart item interface."
interface CartItem {
    "Object meta data"
    extraData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String]
    ): [MetaData]
    "The globally unique ID for the object"
    id: ID!
    "CartItem ID"
    key: ID!
    "Connection between the CartItem type and the Product type"
    product(
        "Arguments for filtering the connection"
        where: CartItemToProductConnectionWhereArgs
    ): CartItemToProductConnectionEdge
    "Quantity of the product"
    quantity: Int
    "Item&#039;s subtotal"
    subtotal(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Item&#039;s subtotal tax"
    subtotalTax(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Item&#039;s tax"
    tax(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Item&#039;s total"
    total(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Connection between the CartItem type and the ProductVariation type"
    variation: CartItemToProductVariationConnectionEdge
}

"Connection to CartItem Nodes"
interface CartItemConnection {
    "A list of edges (relational context) between Cart and connected CartItem Nodes"
    edges: [CartItemConnectionEdge!]!
    "A list of connected CartItem Nodes"
    nodes: [CartItem!]!
    "Information about pagination in a connection."
    pageInfo: CartItemConnectionPageInfo!
}

"Edge between a Node and a connected CartItem"
interface CartItemConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected CartItem Node"
    node: CartItem!
}

"Page Info on the connected CartItemConnectionEdge"
interface CartItemConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to category Nodes"
interface CategoryConnection {
    "A list of edges (relational context) between RootQuery and connected category Nodes"
    edges: [CategoryConnectionEdge!]!
    "A list of connected category Nodes"
    nodes: [Category!]!
    "Information about pagination in a connection."
    pageInfo: CategoryConnectionPageInfo!
}

"Edge between a Node and a connected category"
interface CategoryConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected category Node"
    node: Category!
}

"Page Info on the connected CategoryConnectionEdge"
interface CategoryConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to Comment Nodes"
interface CommentConnection {
    "A list of edges (relational context) between RootQuery and connected Comment Nodes"
    edges: [CommentConnectionEdge!]!
    "A list of connected Comment Nodes"
    nodes: [Comment!]!
    "Information about pagination in a connection."
    pageInfo: CommentConnectionPageInfo!
}

"Edge between a Node and a connected Comment"
interface CommentConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected Comment Node"
    node: Comment!
}

"Page Info on the connected CommentConnectionEdge"
interface CommentConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"The author of a comment"
interface Commenter {
    "Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument."
    avatar: Avatar
    "Identifies the primary key from the database."
    databaseId: Int!
    "The email address of the author of a comment."
    email: String
    "The globally unique identifier for the comment author."
    id: ID!
    "Whether the author information is considered restricted. (not fully public)"
    isRestricted: Boolean
    "The name of the author of a comment."
    name: String
    "The url of the author of a comment."
    url: String
}

"Edge between a Node and a connected Commenter"
interface CommenterConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected Commenter Node"
    node: Commenter!
}

"A plural connection from one Node Type in the Graph to another Node Type, with support for relational data via &quot;edges&quot;."
interface Connection {
    "A list of edges (relational context) between connected nodes"
    edges: [Edge!]!
    "A list of connected nodes"
    nodes: [Node!]!
    "Information about pagination in a connection."
    pageInfo: PageInfo!
}

"Nodes used to manage content"
interface ContentNode {
    "Connection between the ContentNode type and the ContentType type"
    contentType: ContentNodeToContentTypeConnectionEdge
    "The name of the Content Type the node belongs to"
    contentTypeName: String!
    "The ID of the node in the database."
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "The desired slug of the post"
    desiredSlug: String
    "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editingLockedBy: ContentNodeToEditLockConnectionEdge
    "The RSS enclosure for the object"
    enclosure: String
    "Connection between the ContentNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedScriptConnection
    "Connection between the ContentNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedStylesheetConnection
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The user that most recently edited the node"
    lastEditedBy: ContentNodeToEditLastConnectionEdge
    "The permalink of the post"
    link: String
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "The current status of the object"
    status: String
    "The template assigned to a node of content"
    template: ContentTemplate
    "The unique resource identifier path"
    uri: String
}

"Connection to ContentNode Nodes"
interface ContentNodeConnection {
    "A list of edges (relational context) between ContentType and connected ContentNode Nodes"
    edges: [ContentNodeConnectionEdge!]!
    "A list of connected ContentNode Nodes"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: ContentNodeConnectionPageInfo!
}

"Edge between a Node and a connected ContentNode"
interface ContentNodeConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected ContentNode Node"
    node: ContentNode!
}

"Page Info on the connected ContentNodeConnectionEdge"
interface ContentNodeConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"The template assigned to a node of content"
interface ContentTemplate {
    "The name of the template"
    templateName: String
}

"Connection to ContentType Nodes"
interface ContentTypeConnection {
    "A list of edges (relational context) between RootQuery and connected ContentType Nodes"
    edges: [ContentTypeConnectionEdge!]!
    "A list of connected ContentType Nodes"
    nodes: [ContentType!]!
    "Information about pagination in a connection."
    pageInfo: ContentTypeConnectionPageInfo!
}

"Edge between a Node and a connected ContentType"
interface ContentTypeConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected ContentType Node"
    node: ContentType!
}

"Page Info on the connected ContentTypeConnectionEdge"
interface ContentTypeConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to Coupon Nodes"
interface CouponConnection {
    "A list of edges (relational context) between RootQuery and connected Coupon Nodes"
    edges: [CouponConnectionEdge!]!
    "A list of connected Coupon Nodes"
    nodes: [Coupon!]!
    "Information about pagination in a connection."
    pageInfo: CouponConnectionPageInfo!
}

"Edge between a Node and a connected Coupon"
interface CouponConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected Coupon Node"
    node: Coupon!
}

"Page Info on the connected CouponConnectionEdge"
interface CouponConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to CouponLine Nodes"
interface CouponLineConnection {
    "A list of edges (relational context) between Order and connected CouponLine Nodes"
    edges: [CouponLineConnectionEdge!]!
    "A list of connected CouponLine Nodes"
    nodes: [CouponLine!]!
    "Information about pagination in a connection."
    pageInfo: CouponLineConnectionPageInfo!
}

"Edge between a Node and a connected CouponLine"
interface CouponLineConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected CouponLine Node"
    node: CouponLine!
}

"Page Info on the connected CouponLineConnectionEdge"
interface CouponLineConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to Customer Nodes"
interface CustomerConnection {
    "A list of edges (relational context) between RootQuery and connected Customer Nodes"
    edges: [CustomerConnectionEdge!]!
    "A list of connected Customer Nodes"
    nodes: [Customer!]!
    "Information about pagination in a connection."
    pageInfo: CustomerConnectionPageInfo!
}

"Edge between a Node and a connected Customer"
interface CustomerConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected Customer Node"
    node: Customer!
}

"Page Info on the connected CustomerConnectionEdge"
interface CustomerConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Object that can be identified with a Database ID"
interface DatabaseIdentifier {
    "The unique identifier stored in the database"
    databaseId: Int!
}

"Connection to DownloadableItem Nodes"
interface DownloadableItemConnection {
    "A list of edges (relational context) between Order and connected DownloadableItem Nodes"
    edges: [DownloadableItemConnectionEdge!]!
    "A list of connected DownloadableItem Nodes"
    nodes: [DownloadableItem!]!
    "Information about pagination in a connection."
    pageInfo: DownloadableItemConnectionPageInfo!
}

"Edge between a Node and a connected DownloadableItem"
interface DownloadableItemConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected DownloadableItem Node"
    node: DownloadableItem!
}

"Page Info on the connected DownloadableItemConnectionEdge"
interface DownloadableItemConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"A downloadable product."
interface DownloadableProduct {
    "Product or variation ID"
    databaseId: Int!
    "Download expiry"
    downloadExpiry: Int
    "Download limit"
    downloadLimit: Int
    "Is downloadable?"
    downloadable: Boolean
    "Product downloads"
    downloads: [ProductDownload]
    "Product or variation global ID"
    id: ID!
    "Is product virtual?"
    virtual: Boolean
}

"Relational context between connected nodes"
interface Edge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected node"
    node: Node!
}

"Asset enqueued by the CMS"
interface EnqueuedAsset {
    "The inline code to be run after the asset is loaded."
    after: [String]
    "Deprecated"
    args: Boolean @deprecated(reason: "Use `EnqueuedAsset.media` instead.")
    "The inline code to be run before the asset is loaded."
    before: [String]
    "The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc"
    conditional: String
    "Dependencies needed to use this asset"
    dependencies: [EnqueuedAsset]
    "Extra information needed for the script"
    extra: String @deprecated(reason: "Use `EnqueuedScript.extraData` instead.")
    "The handle of the enqueued asset"
    handle: String
    "The ID of the enqueued asset"
    id: ID!
    "The source of the asset"
    src: String
    "The version of the enqueued asset"
    version: String
}

"Connection to EnqueuedScript Nodes"
interface EnqueuedScriptConnection {
    "A list of edges (relational context) between ContentNode and connected EnqueuedScript Nodes"
    edges: [EnqueuedScriptConnectionEdge!]!
    "A list of connected EnqueuedScript Nodes"
    nodes: [EnqueuedScript!]!
    "Information about pagination in a connection."
    pageInfo: EnqueuedScriptConnectionPageInfo!
}

"Edge between a Node and a connected EnqueuedScript"
interface EnqueuedScriptConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected EnqueuedScript Node"
    node: EnqueuedScript!
}

"Page Info on the connected EnqueuedScriptConnectionEdge"
interface EnqueuedScriptConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to EnqueuedStylesheet Nodes"
interface EnqueuedStylesheetConnection {
    "A list of edges (relational context) between ContentNode and connected EnqueuedStylesheet Nodes"
    edges: [EnqueuedStylesheetConnectionEdge!]!
    "A list of connected EnqueuedStylesheet Nodes"
    nodes: [EnqueuedStylesheet!]!
    "Information about pagination in a connection."
    pageInfo: EnqueuedStylesheetConnectionPageInfo!
}

"Edge between a Node and a connected EnqueuedStylesheet"
interface EnqueuedStylesheetConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected EnqueuedStylesheet Node"
    node: EnqueuedStylesheet!
}

"Page Info on the connected EnqueuedStylesheetConnectionEdge"
interface EnqueuedStylesheetConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to FeeLine Nodes"
interface FeeLineConnection {
    "A list of edges (relational context) between Order and connected FeeLine Nodes"
    edges: [FeeLineConnectionEdge!]!
    "A list of connected FeeLine Nodes"
    nodes: [FeeLine!]!
    "Information about pagination in a connection."
    pageInfo: FeeLineConnectionPageInfo!
}

"Edge between a Node and a connected FeeLine"
interface FeeLineConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected FeeLine Node"
    node: FeeLine!
}

"Page Info on the connected FeeLineConnectionEdge"
interface FeeLineConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to GlobalProductAttribute Nodes"
interface GlobalProductAttributeConnection {
    "A list of edges (relational context) between Product and connected GlobalProductAttribute Nodes"
    edges: [GlobalProductAttributeConnectionEdge!]!
    "A list of connected GlobalProductAttribute Nodes"
    nodes: [GlobalProductAttribute!]!
    "Information about pagination in a connection."
    pageInfo: GlobalProductAttributeConnectionPageInfo!
}

"Edge between a Node and a connected GlobalProductAttribute"
interface GlobalProductAttributeConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected GlobalProductAttribute Node"
    node: GlobalProductAttribute!
}

"Page Info on the connected GlobalProductAttributeConnectionEdge"
interface GlobalProductAttributeConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Content node with hierarchical (parent/child) relationships"
interface HierarchicalContentNode {
    "Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
    ancestors(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
    ): HierarchicalContentNodeToContentNodeAncestorsConnection
    "Connection between the HierarchicalContentNode type and the ContentNode type"
    children(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
    ): HierarchicalContentNodeToContentNodeChildrenConnection
    "Connection between the ContentNode type and the ContentType type"
    contentType: ContentNodeToContentTypeConnectionEdge
    "The name of the Content Type the node belongs to"
    contentTypeName: String!
    "The unique identifier stored in the database"
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "The desired slug of the post"
    desiredSlug: String
    "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editingLockedBy: ContentNodeToEditLockConnectionEdge
    "The RSS enclosure for the object"
    enclosure: String
    "Connection between the ContentNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedScriptConnection
    "Connection between the ContentNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedStylesheetConnection
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The user that most recently edited the node"
    lastEditedBy: ContentNodeToEditLastConnectionEdge
    "The permalink of the post"
    link: String
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "The parent of the node. The parent object can be of various types"
    parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
    "Database id of the parent node"
    parentDatabaseId: Int
    "The globally unique identifier of the parent node."
    parentId: ID
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "The current status of the object"
    status: String
    "The template assigned to a node of content"
    template: ContentTemplate
    "The unique resource identifier path"
    uri: String
}

"Node with hierarchical (parent/child) relationships"
interface HierarchicalNode {
    "The unique identifier stored in the database"
    databaseId: Int!
    "The globally unique ID for the object"
    id: ID!
    "Database id of the parent node"
    parentDatabaseId: Int
    "The globally unique identifier of the parent node."
    parentId: ID
}

"Term node with hierarchical (parent/child) relationships"
interface HierarchicalTermNode {
    "The number of objects connected to the object"
    count: Int
    "The unique identifier stored in the database"
    databaseId: Int!
    "The description of the object"
    description: String
    "Connection between the TermNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedScriptConnection
    "Connection between the TermNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedStylesheetConnection
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "Database id of the parent node"
    parentDatabaseId: Int
    "The globally unique identifier of the parent node."
    parentId: ID
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "The name of the taxonomy that the object is associated with"
    taxonomyName: String
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String
}

"A product with stock information."
interface InventoriedProduct {
    "Product backorders status"
    backorders: BackordersEnum
    "Can product be backordered?"
    backordersAllowed: Boolean
    "Product or variation ID"
    databaseId: Int!
    "Product or variation global ID"
    id: ID!
    "Low stock amount"
    lowStockAmount: Int
    "If product manage stock"
    manageStock: ManageStockEnum
    "If should be sold individually"
    soldIndividually: Boolean
    "Number of items available for sale"
    stockQuantity: Int
    "Product stock status"
    stockStatus: StockStatusEnum
}

"Connection to LineItem Nodes"
interface LineItemConnection {
    "A list of edges (relational context) between Order and connected LineItem Nodes"
    edges: [LineItemConnectionEdge!]!
    "A list of connected LineItem Nodes"
    nodes: [LineItem!]!
    "Information about pagination in a connection."
    pageInfo: LineItemConnectionPageInfo!
}

"Edge between a Node and a connected LineItem"
interface LineItemConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected LineItem Node"
    node: LineItem!
}

"Page Info on the connected LineItemConnectionEdge"
interface LineItemConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to LocalProductAttribute Nodes"
interface LocalProductAttributeConnection {
    "A list of edges (relational context) between Product and connected LocalProductAttribute Nodes"
    edges: [LocalProductAttributeConnectionEdge!]!
    "A list of connected LocalProductAttribute Nodes"
    nodes: [LocalProductAttribute!]!
    "Information about pagination in a connection."
    pageInfo: LocalProductAttributeConnectionPageInfo!
}

"Edge between a Node and a connected LocalProductAttribute"
interface LocalProductAttributeConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected LocalProductAttribute Node"
    node: LocalProductAttribute!
}

"Page Info on the connected LocalProductAttributeConnectionEdge"
interface LocalProductAttributeConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to mediaItem Nodes"
interface MediaItemConnection {
    "A list of edges (relational context) between RootQuery and connected mediaItem Nodes"
    edges: [MediaItemConnectionEdge!]!
    "A list of connected mediaItem Nodes"
    nodes: [MediaItem!]!
    "Information about pagination in a connection."
    pageInfo: MediaItemConnectionPageInfo!
}

"Edge between a Node and a connected mediaItem"
interface MediaItemConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected mediaItem Node"
    node: MediaItem!
}

"Page Info on the connected MediaItemConnectionEdge"
interface MediaItemConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to Menu Nodes"
interface MenuConnection {
    "A list of edges (relational context) between RootQuery and connected Menu Nodes"
    edges: [MenuConnectionEdge!]!
    "A list of connected Menu Nodes"
    nodes: [Menu!]!
    "Information about pagination in a connection."
    pageInfo: MenuConnectionPageInfo!
}

"Edge between a Node and a connected Menu"
interface MenuConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected Menu Node"
    node: Menu!
}

"Page Info on the connected MenuConnectionEdge"
interface MenuConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to MenuItem Nodes"
interface MenuItemConnection {
    "A list of edges (relational context) between RootQuery and connected MenuItem Nodes"
    edges: [MenuItemConnectionEdge!]!
    "A list of connected MenuItem Nodes"
    nodes: [MenuItem!]!
    "Information about pagination in a connection."
    pageInfo: MenuItemConnectionPageInfo!
}

"Edge between a Node and a connected MenuItem"
interface MenuItemConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected MenuItem Node"
    node: MenuItem!
}

"Page Info on the connected MenuItemConnectionEdge"
interface MenuItemConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Nodes that can be linked to as Menu Items"
interface MenuItemLinkable {
    "The unique identifier stored in the database"
    databaseId: Int!
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The unique resource identifier path"
    uri: String
}

"Edge between a Node and a connected MenuItemLinkable"
interface MenuItemLinkableConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected MenuItemLinkable Node"
    node: MenuItemLinkable!
}

"An object with an ID"
interface Node {
    "The globally unique ID for the object"
    id: ID!
}

"A node that can have an author assigned to it"
interface NodeWithAuthor {
    "Connection between the NodeWithAuthor type and the User type"
    author: NodeWithAuthorToUserConnectionEdge
    "The database identifier of the author of the node"
    authorDatabaseId: Int
    "The globally unique identifier of the author of the node"
    authorId: ID
    "The globally unique ID for the object"
    id: ID!
}

"A node that can have comments associated with it"
interface NodeWithComments {
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "The globally unique ID for the object"
    id: ID!
}

"A node that supports the content editor"
interface NodeWithContentEditor {
    "The content of the post."
    content(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The globally unique ID for the object"
    id: ID!
}

"A node that can have an excerpt"
interface NodeWithExcerpt {
    "The excerpt of the post."
    excerpt(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The globally unique ID for the object"
    id: ID!
}

"A node that can have a featured image set"
interface NodeWithFeaturedImage {
    "Connection between the NodeWithFeaturedImage type and the MediaItem type"
    featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
    "The database identifier for the featured image node assigned to the content node"
    featuredImageDatabaseId: Int
    "Globally unique ID of the featured image assigned to the node"
    featuredImageId: ID
    "The globally unique ID for the object"
    id: ID!
}

"A node that can have page attributes"
interface NodeWithPageAttributes {
    "The globally unique ID for the object"
    id: ID!
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
}

"A node that can have revisions"
interface NodeWithRevisions {
    "The globally unique ID for the object"
    id: ID!
    "True if the node is a revision of another node"
    isRevision: Boolean
    "If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node."
    revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
}

"A node that can have a template associated with it"
interface NodeWithTemplate {
    "The globally unique ID for the object"
    id: ID!
    "The template assigned to the node"
    template: ContentTemplate
}

"A node that NodeWith a title"
interface NodeWithTitle {
    "The globally unique ID for the object"
    id: ID!
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
}

"A node that can have trackbacks and pingbacks"
interface NodeWithTrackbacks {
    "The globally unique ID for the object"
    id: ID!
    "Whether the pings are open or closed for this particular post."
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "URLs queued to be pinged."
    toPing: [String]
}

"A singular connection from one Node to another, with support for relational data on the &quot;edge&quot; of the connection."
interface OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected node"
    node: Node!
}

"Connection to Order Nodes"
interface OrderConnection {
    "A list of edges (relational context) between RootQuery and connected Order Nodes"
    edges: [OrderConnectionEdge!]!
    "A list of connected Order Nodes"
    nodes: [Order!]!
    "Information about pagination in a connection."
    pageInfo: OrderConnectionPageInfo!
}

"Edge between a Node and a connected Order"
interface OrderConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected Order Node"
    node: Order!
}

"Page Info on the connected OrderConnectionEdge"
interface OrderConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to paTest Nodes"
interface PaTestConnection {
    "A list of edges (relational context) between RootQuery and connected paTest Nodes"
    edges: [PaTestConnectionEdge!]!
    "A list of connected paTest Nodes"
    nodes: [PaTest!]!
    "Information about pagination in a connection."
    pageInfo: PaTestConnectionPageInfo!
}

"Edge between a Node and a connected paTest"
interface PaTestConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected paTest Node"
    node: PaTest!
}

"Page Info on the connected PaTestConnectionEdge"
interface PaTestConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to page Nodes"
interface PageConnection {
    "A list of edges (relational context) between RootQuery and connected page Nodes"
    edges: [PageConnectionEdge!]!
    "A list of connected page Nodes"
    nodes: [Page!]!
    "Information about pagination in a connection."
    pageInfo: PageConnectionPageInfo!
}

"Edge between a Node and a connected page"
interface PageConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected page Node"
    node: Page!
}

"Page Info on the connected PageConnectionEdge"
interface PageConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Information about pagination in a connection."
interface PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to PaymentGateway Nodes"
interface PaymentGatewayConnection {
    "A list of edges (relational context) between RootQuery and connected PaymentGateway Nodes"
    edges: [PaymentGatewayConnectionEdge!]!
    "A list of connected PaymentGateway Nodes"
    nodes: [PaymentGateway!]!
    "Information about pagination in a connection."
    pageInfo: PaymentGatewayConnectionPageInfo!
}

"Edge between a Node and a connected PaymentGateway"
interface PaymentGatewayConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected PaymentGateway Node"
    node: PaymentGateway!
}

"Page Info on the connected PaymentGatewayConnectionEdge"
interface PaymentGatewayConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Payment token object"
interface PaymentToken {
    "Token payment gateway"
    gateway: PaymentGateway
    "Token ID unique identifier"
    id: ID!
    "Is token connected to user&#039;s preferred payment method"
    isDefault: Boolean
    "Token database ID."
    tokenId: Int!
    "Token type"
    type: String!
}

"Connection to Plugin Nodes"
interface PluginConnection {
    "A list of edges (relational context) between RootQuery and connected Plugin Nodes"
    edges: [PluginConnectionEdge!]!
    "A list of connected Plugin Nodes"
    nodes: [Plugin!]!
    "Information about pagination in a connection."
    pageInfo: PluginConnectionPageInfo!
}

"Edge between a Node and a connected Plugin"
interface PluginConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected Plugin Node"
    node: Plugin!
}

"Page Info on the connected PluginConnectionEdge"
interface PluginConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to post Nodes"
interface PostConnection {
    "A list of edges (relational context) between RootQuery and connected post Nodes"
    edges: [PostConnectionEdge!]!
    "A list of connected post Nodes"
    nodes: [Post!]!
    "Information about pagination in a connection."
    pageInfo: PostConnectionPageInfo!
}

"Edge between a Node and a connected post"
interface PostConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected post Node"
    node: Post!
}

"Page Info on the connected PostConnectionEdge"
interface PostConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to postFormat Nodes"
interface PostFormatConnection {
    "A list of edges (relational context) between RootQuery and connected postFormat Nodes"
    edges: [PostFormatConnectionEdge!]!
    "A list of connected postFormat Nodes"
    nodes: [PostFormat!]!
    "Information about pagination in a connection."
    pageInfo: PostFormatConnectionPageInfo!
}

"Edge between a Node and a connected postFormat"
interface PostFormatConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected postFormat Node"
    node: PostFormat!
}

"Page Info on the connected PostFormatConnectionEdge"
interface PostFormatConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Nodes that can be seen in a preview (unpublished) state."
interface Previewable {
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
}

"The Product type"
interface Product {
    "Connection between the Product type and the paTest type"
    allPaTest(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToPaTestConnectionWhereArgs
    ): ProductToPaTestConnection
    "The ancestors of the content node."
    ancestors(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductConnectionWhereArgs
    ): ProductToProductConnection @deprecated(reason: "This content type is not hierarchical and typically will not have ancestors")
    "Connection between the Product type and the ProductAttribute type"
    attributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductAttributeConnectionWhereArgs
    ): ProductToProductAttributeConnection
    "Product average count"
    averageRating: Float
    "Catalog visibility"
    catalogVisibility: CatalogVisibilityEnum
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "Connection between the Product type and the Comment type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToCommentsConnectionWhereArgs
    ): ProductToCommentsConnection
    "The content of the post."
    content(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Connection between the ContentNode type and the ContentType type"
    contentType: ContentNodeToContentTypeConnectionEdge
    "The name of the Content Type the node belongs to"
    contentTypeName: String!
    "The unique identifier stored in the database"
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "Date on sale from"
    dateOnSaleFrom: String
    "Date on sale to"
    dateOnSaleTo: String
    "Product description"
    description(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The desired slug of the post"
    desiredSlug: String
    "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editingLockedBy: ContentNodeToEditLockConnectionEdge
    "The RSS enclosure for the object"
    enclosure: String
    "Connection between the ContentNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedScriptConnection
    "Connection between the ContentNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedStylesheetConnection
    "The excerpt of the post."
    excerpt(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "If the product is featured"
    featured: Boolean
    "Connection between the NodeWithFeaturedImage type and the MediaItem type"
    featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
    "The database identifier for the featured image node assigned to the content node"
    featuredImageDatabaseId: Int
    "Globally unique ID of the featured image assigned to the node"
    featuredImageId: ID
    "Connection between the Product type and the MediaItem type"
    galleryImages(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToMediaItemConnectionWhereArgs
    ): ProductToMediaItemConnection
    "Connection between the Product type and the GlobalProductAttribute type"
    globalAttributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductToGlobalProductAttributeConnection
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "Whether the product object is password protected."
    hasPassword: Boolean
    "The globally unique identifier of the product object."
    id: ID!
    "Main image"
    image: MediaItem
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The user that most recently edited the node"
    lastEditedBy: ContentNodeToEditLastConnectionEdge
    "The permalink of the post"
    link: String
    "Connection between the Product type and the LocalProductAttribute type"
    localAttributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductToLocalProductAttributeConnection
    "Menu order"
    menuOrder: Int
    "Object meta data"
    metaData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String],
        "Retrieve meta with matching keys"
        multiple: Boolean
    ): [MetaData]
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "Product name"
    name: String
    "Is product on sale?"
    onSale: Boolean
    "The parent of the content node."
    parent(
        "Arguments for filtering the connection"
        where: ProductToParentConnectionWhereArgs
    ): ProductToParentConnectionEdge @deprecated(reason: "This content type is not hierarchical and typically will not have a parent")
    "The password for the product object."
    password: String
    "Connection between the Product type and the Product type"
    preview(
        "Arguments for filtering the connection"
        where: ProductToPreviewConnectionWhereArgs
    ): ProductToPreviewConnectionEdge
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
    "Connection between the Product type and the productCategory type"
    productCategories(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductCategoryConnectionWhereArgs
    ): ProductToProductCategoryConnection
    "The id field matches the WP_Post-&gt;ID field."
    productId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
    "Connection between the Product type and the productTag type"
    productTags(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductTagConnectionWhereArgs
    ): ProductToProductTagConnection
    "Connection between the Product type and the productType type"
    productTypes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductTypeConnectionWhereArgs
    ): ProductToProductTypeConnection
    "Can product be purchased?"
    purchasable: Boolean
    "Purchase note"
    purchaseNote: String
    "Connection between the Product type and the ProductUnion type"
    related(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductUnionConnectionWhereArgs
    ): ProductToProductUnionConnection
    "Product review count"
    reviewCount: Int
    "Connection between the Product type and the Comment type"
    reviews(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToCommentConnectionWhereArgs
    ): ProductToCommentConnection
    "If reviews are allowed"
    reviewsAllowed: Boolean
    "Connection between the Product type and the shippingClass type"
    shippingClasses(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToShippingClassConnectionWhereArgs
    ): ProductToShippingClassConnection
    "Product short description"
    shortDescription(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Product SKU"
    sku: String
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "The current status of the object"
    status: String
    "The template assigned to the node"
    template: ContentTemplate
    "Connection between the Product type and the TermNode type"
    terms(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToTermNodeConnectionWhereArgs
    ): ProductToTermNodeConnection
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Number total of sales"
    totalSales: Int
    "Product type"
    type: ProductTypesEnum
    "Connection between the Product type and the ProductUnion type"
    upsell(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToUpsellConnectionWhereArgs
    ): ProductToUpsellConnection
    "The unique resource identifier path"
    uri: String
    "Connection between the Product type and the visibleProduct type"
    visibleProducts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToVisibleProductConnectionWhereArgs
    ): ProductToVisibleProductConnection
}

"Product attribute object"
interface ProductAttribute {
    "Attribute ID"
    attributeId: Int!
    "Attribute Global ID"
    id: ID!
    "Attribute label"
    label: String
    "Attribute name"
    name: String
    "Attribute options"
    options: [String]
    "Attribute position"
    position: Int
    "Product attribute scope."
    scope: ProductAttributeTypesEnum!
    "Is attribute on product variation"
    variation: Boolean
    "Is attribute visible"
    visible: Boolean
}

"Connection to ProductAttribute Nodes"
interface ProductAttributeConnection {
    "A list of edges (relational context) between Product and connected ProductAttribute Nodes"
    edges: [ProductAttributeConnectionEdge!]!
    "A list of connected ProductAttribute Nodes"
    nodes: [ProductAttribute!]!
    "Information about pagination in a connection."
    pageInfo: ProductAttributeConnectionPageInfo!
}

"Edge between a Node and a connected ProductAttribute"
interface ProductAttributeConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected ProductAttribute Node"
    node: ProductAttribute!
}

"Page Info on the connected ProductAttributeConnectionEdge"
interface ProductAttributeConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to productCategory Nodes"
interface ProductCategoryConnection {
    "A list of edges (relational context) between RootQuery and connected productCategory Nodes"
    edges: [ProductCategoryConnectionEdge!]!
    "A list of connected productCategory Nodes"
    nodes: [ProductCategory!]!
    "Information about pagination in a connection."
    pageInfo: ProductCategoryConnectionPageInfo!
}

"Edge between a Node and a connected productCategory"
interface ProductCategoryConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected productCategory Node"
    node: ProductCategory!
}

"Page Info on the connected ProductCategoryConnectionEdge"
interface ProductCategoryConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to Product Nodes"
interface ProductConnection {
    "A list of edges (relational context) between Product and connected Product Nodes"
    edges: [ProductConnectionEdge!]!
    "A list of connected Product Nodes"
    nodes: [Product!]!
    "Information about pagination in a connection."
    pageInfo: ProductConnectionPageInfo!
}

"Edge between a Node and a connected Product"
interface ProductConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected Product Node"
    node: Product!
}

"Page Info on the connected ProductConnectionEdge"
interface ProductConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to productTag Nodes"
interface ProductTagConnection {
    "A list of edges (relational context) between RootQuery and connected productTag Nodes"
    edges: [ProductTagConnectionEdge!]!
    "A list of connected productTag Nodes"
    nodes: [ProductTag!]!
    "Information about pagination in a connection."
    pageInfo: ProductTagConnectionPageInfo!
}

"Edge between a Node and a connected productTag"
interface ProductTagConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected productTag Node"
    node: ProductTag!
}

"Page Info on the connected ProductTagConnectionEdge"
interface ProductTagConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to productType Nodes"
interface ProductTypeConnection {
    "A list of edges (relational context) between RootQuery and connected productType Nodes"
    edges: [ProductTypeConnectionEdge!]!
    "A list of connected productType Nodes"
    nodes: [ProductType!]!
    "Information about pagination in a connection."
    pageInfo: ProductTypeConnectionPageInfo!
}

"Edge between a Node and a connected productType"
interface ProductTypeConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected productType Node"
    node: ProductType!
}

"Page Info on the connected ProductTypeConnectionEdge"
interface ProductTypeConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Union between the product and product variation types"
interface ProductUnion {
    "Product average count"
    averageRating: Float
    "Catalog visibility"
    catalogVisibility: CatalogVisibilityEnum
    "Product or variation ID"
    databaseId: Int!
    "Date on sale from"
    dateOnSaleFrom: String
    "Date on sale to"
    dateOnSaleTo: String
    "Product description"
    description(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "If the product is featured"
    featured: Boolean
    "Product or variation global ID"
    id: ID!
    "Main image"
    image: MediaItem
    "Menu order"
    menuOrder: Int
    "Object meta data"
    metaData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String],
        "Retrieve meta with matching keys"
        multiple: Boolean
    ): [MetaData]
    "Product name"
    name: String
    "Is product on sale?"
    onSale: Boolean
    "Can product be purchased?"
    purchasable: Boolean
    "Purchase note"
    purchaseNote: String
    "Product review count"
    reviewCount: Int
    "If reviews are allowed"
    reviewsAllowed: Boolean
    "Product short description"
    shortDescription(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Product SKU"
    sku: String
    "Product slug"
    slug: String
    "Number total of sales"
    totalSales: Int
    "Product type"
    type: ProductTypesEnum
}

"Connection to ProductUnion Nodes"
interface ProductUnionConnection {
    "A list of edges (relational context) between RootQuery and connected ProductUnion Nodes"
    edges: [ProductUnionConnectionEdge!]!
    "A list of connected ProductUnion Nodes"
    nodes: [ProductUnion!]!
    "Information about pagination in a connection."
    pageInfo: ProductUnionConnectionPageInfo!
}

"Edge between a Node and a connected ProductUnion"
interface ProductUnionConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected ProductUnion Node"
    node: ProductUnion!
}

"Page Info on the connected ProductUnionConnectionEdge"
interface ProductUnionConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"A product variation."
interface ProductVariation {
    "Connection between the ProductVariation type and the VariationAttribute type"
    attributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductVariationToVariationAttributeConnection
    "Product average count"
    averageRating: Float
    "Product variation backorders"
    backorders: BackordersEnum
    "Can product be backordered?"
    backordersAllowed: Boolean
    "Product variation catalog visibility"
    catalogVisibility: CatalogVisibilityEnum
    "Connection between the ContentNode type and the ContentType type"
    contentType: ContentNodeToContentTypeConnectionEdge
    "The name of the Content Type the node belongs to"
    contentTypeName: String!
    "Product or variation ID"
    databaseId: Int!
    "Date variation created"
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "Date on sale from"
    dateOnSaleFrom: String
    "Date on sale to"
    dateOnSaleTo: String
    "Product description"
    description(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The desired slug of the post"
    desiredSlug: String
    "Download expiry"
    downloadExpiry: Int
    "Download limit"
    downloadLimit: Int
    "Is downloadable?"
    downloadable: Boolean
    "Product downloads"
    downloads: [ProductDownload]
    "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editingLockedBy: ContentNodeToEditLockConnectionEdge
    "The RSS enclosure for the object"
    enclosure: String
    "Connection between the ContentNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedScriptConnection
    "Connection between the ContentNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedStylesheetConnection
    "If the product is featured"
    featured: Boolean
    "Connection between the NodeWithFeaturedImage type and the MediaItem type"
    featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
    "The database identifier for the featured image node assigned to the content node"
    featuredImageDatabaseId: Int
    "Globally unique ID of the featured image assigned to the node"
    featuredImageId: ID
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "Does product variation have any visible attributes"
    hasAttributes: Boolean
    "Product variation height"
    height: String
    "Product or variation global ID"
    id: ID!
    "Product variation main image"
    image: MediaItem
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The user that most recently edited the node"
    lastEditedBy: ContentNodeToEditLastConnectionEdge
    "Product variation length"
    length: String
    "The permalink of the post"
    link: String
    "Low stock amount"
    lowStockAmount: Int
    "if/how product variation stock is managed"
    manageStock: ManageStockEnum
    "Menu order"
    menuOrder: Int
    "Object meta data"
    metaData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String],
        "Retrieve meta with matching keys"
        multiple: Boolean
    ): [MetaData]
    "Date variation last updated"
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "Product name"
    name: String
    "Is variation on sale?"
    onSale: Boolean
    "The parent of the node. The parent object can be of various types"
    parent: ProductVariationToVariableProductConnectionEdge
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
    "Product variation&#039;s active price"
    price(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "If product variation can be bought"
    purchasable: Boolean
    "Product variation purchase_note"
    purchaseNote: String
    "Product variation&#039;s regular price"
    regularPrice(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Product review count"
    reviewCount: Int
    "If reviews are allowed"
    reviewsAllowed: Boolean
    "Product variation&#039;s sale price"
    salePrice(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Product variation shipping class"
    shippingClass: String
    "shipping class ID"
    shippingClassId: Int
    "Does product need to be shipped?"
    shippingRequired: Boolean
    "Is product shipping taxable?"
    shippingTaxable: Boolean
    "Product short description"
    shortDescription(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Product variation SKU (Stock-keeping unit)"
    sku: String
    "Product slug"
    slug: String
    "If should be sold individually"
    soldIndividually: Boolean
    "Variation status"
    status: String
    "Product variation stock quantity"
    stockQuantity: Int
    "Product stock status"
    stockStatus: StockStatusEnum
    "Product variation tax class"
    taxClass: TaxClassEnum
    "Tax status"
    taxStatus: TaxStatusEnum
    "The template assigned to a node of content"
    template: ContentTemplate
    "Number total of sales"
    totalSales: Int
    "Product type"
    type: ProductTypesEnum
    "The unique resource identifier path"
    uri: String
    "Is product virtual?"
    virtual: Boolean
    "Product variation weight"
    weight: String
    "Product variation width"
    width: String
}

"Connection to ProductVariation Nodes"
interface ProductVariationConnection {
    "A list of edges (relational context) between PaTest and connected ProductVariation Nodes"
    edges: [ProductVariationConnectionEdge!]!
    "A list of connected ProductVariation Nodes"
    nodes: [ProductVariation!]!
    "Information about pagination in a connection."
    pageInfo: ProductVariationConnectionPageInfo!
}

"Edge between a Node and a connected ProductVariation"
interface ProductVariationConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected ProductVariation Node"
    node: ProductVariation!
}

"Page Info on the connected ProductVariationConnectionEdge"
interface ProductVariationConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Products with default attributes."
interface ProductWithAttributes {
    "Product or variation ID"
    databaseId: Int!
    "Connection between the ProductWithAttributes type and the VariationAttribute type"
    defaultAttributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductWithAttributesToVariationAttributeConnection
    "Product or variation global ID"
    id: ID!
}

"A physical product."
interface ProductWithDimensions {
    "Product or variation ID"
    databaseId: Int!
    "Product&#039;s height"
    height: String
    "Product or variation global ID"
    id: ID!
    "Product&#039;s length"
    length: String
    "shipping class ID"
    shippingClassId: Int
    "Does product need to be shipped?"
    shippingRequired: Boolean
    "Is product shipping taxable?"
    shippingTaxable: Boolean
    "Product&#039;s weight"
    weight: String
    "Product&#039;s width"
    width: String
}

"Products with pricing."
interface ProductWithPricing {
    "Product or variation ID"
    databaseId: Int!
    "Product or variation global ID"
    id: ID!
    "Product&#039;s active price"
    price(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Product&#039;s regular price"
    regularPrice(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Product&#039;s sale price"
    salePrice(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Tax class"
    taxClass: TaxClassEnum
    "Tax status"
    taxStatus: TaxStatusEnum
}

"A product with variations."
interface ProductWithVariations {
    "Product or variation ID"
    databaseId: Int!
    "Product or variation global ID"
    id: ID!
    "Connection between the ProductWithVariations type and the ProductVariation type"
    variations(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductWithVariationsToProductVariationConnectionWhereArgs
    ): ProductWithVariationsToProductVariationConnection
}

"Connection to Refund Nodes"
interface RefundConnection {
    "A list of edges (relational context) between RootQuery and connected Refund Nodes"
    edges: [RefundConnectionEdge!]!
    "A list of connected Refund Nodes"
    nodes: [Refund!]!
    "Information about pagination in a connection."
    pageInfo: RefundConnectionPageInfo!
}

"Edge between a Node and a connected Refund"
interface RefundConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected Refund Node"
    node: Refund!
}

"Page Info on the connected RefundConnectionEdge"
interface RefundConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to shippingClass Nodes"
interface ShippingClassConnection {
    "A list of edges (relational context) between RootQuery and connected shippingClass Nodes"
    edges: [ShippingClassConnectionEdge!]!
    "A list of connected shippingClass Nodes"
    nodes: [ShippingClass!]!
    "Information about pagination in a connection."
    pageInfo: ShippingClassConnectionPageInfo!
}

"Edge between a Node and a connected shippingClass"
interface ShippingClassConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected shippingClass Node"
    node: ShippingClass!
}

"Page Info on the connected ShippingClassConnectionEdge"
interface ShippingClassConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to ShippingLine Nodes"
interface ShippingLineConnection {
    "A list of edges (relational context) between Order and connected ShippingLine Nodes"
    edges: [ShippingLineConnectionEdge!]!
    "A list of connected ShippingLine Nodes"
    nodes: [ShippingLine!]!
    "Information about pagination in a connection."
    pageInfo: ShippingLineConnectionPageInfo!
}

"Edge between a Node and a connected ShippingLine"
interface ShippingLineConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected ShippingLine Node"
    node: ShippingLine!
}

"Page Info on the connected ShippingLineConnectionEdge"
interface ShippingLineConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to ShippingMethod Nodes"
interface ShippingMethodConnection {
    "A list of edges (relational context) between RootQuery and connected ShippingMethod Nodes"
    edges: [ShippingMethodConnectionEdge!]!
    "A list of connected ShippingMethod Nodes"
    nodes: [ShippingMethod!]!
    "Information about pagination in a connection."
    pageInfo: ShippingMethodConnectionPageInfo!
}

"Edge between a Node and a connected ShippingMethod"
interface ShippingMethodConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected ShippingMethod Node"
    node: ShippingMethod!
}

"Page Info on the connected ShippingMethodConnectionEdge"
interface ShippingMethodConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to ShippingZone Nodes"
interface ShippingZoneConnection {
    "A list of edges (relational context) between RootQuery and connected ShippingZone Nodes"
    edges: [ShippingZoneConnectionEdge!]!
    "A list of connected ShippingZone Nodes"
    nodes: [ShippingZone!]!
    "Information about pagination in a connection."
    pageInfo: ShippingZoneConnectionPageInfo!
}

"Edge between a Node and a connected ShippingZone"
interface ShippingZoneConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected ShippingZone Node"
    node: ShippingZone!
}

"Page Info on the connected ShippingZoneConnectionEdge"
interface ShippingZoneConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to tag Nodes"
interface TagConnection {
    "A list of edges (relational context) between RootQuery and connected tag Nodes"
    edges: [TagConnectionEdge!]!
    "A list of connected tag Nodes"
    nodes: [Tag!]!
    "Information about pagination in a connection."
    pageInfo: TagConnectionPageInfo!
}

"Edge between a Node and a connected tag"
interface TagConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected tag Node"
    node: Tag!
}

"Page Info on the connected TagConnectionEdge"
interface TagConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to TaxClass Nodes"
interface TaxClassConnection {
    "A list of edges (relational context) between RootQuery and connected TaxClass Nodes"
    edges: [TaxClassConnectionEdge!]!
    "A list of connected TaxClass Nodes"
    nodes: [TaxClass!]!
    "Information about pagination in a connection."
    pageInfo: TaxClassConnectionPageInfo!
}

"Edge between a Node and a connected TaxClass"
interface TaxClassConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected TaxClass Node"
    node: TaxClass!
}

"Page Info on the connected TaxClassConnectionEdge"
interface TaxClassConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to TaxLine Nodes"
interface TaxLineConnection {
    "A list of edges (relational context) between Order and connected TaxLine Nodes"
    edges: [TaxLineConnectionEdge!]!
    "A list of connected TaxLine Nodes"
    nodes: [TaxLine!]!
    "Information about pagination in a connection."
    pageInfo: TaxLineConnectionPageInfo!
}

"Edge between a Node and a connected TaxLine"
interface TaxLineConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected TaxLine Node"
    node: TaxLine!
}

"Page Info on the connected TaxLineConnectionEdge"
interface TaxLineConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to TaxRate Nodes"
interface TaxRateConnection {
    "A list of edges (relational context) between RootQuery and connected TaxRate Nodes"
    edges: [TaxRateConnectionEdge!]!
    "A list of connected TaxRate Nodes"
    nodes: [TaxRate!]!
    "Information about pagination in a connection."
    pageInfo: TaxRateConnectionPageInfo!
}

"Edge between a Node and a connected TaxRate"
interface TaxRateConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected TaxRate Node"
    node: TaxRate!
}

"Page Info on the connected TaxRateConnectionEdge"
interface TaxRateConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to Taxonomy Nodes"
interface TaxonomyConnection {
    "A list of edges (relational context) between RootQuery and connected Taxonomy Nodes"
    edges: [TaxonomyConnectionEdge!]!
    "A list of connected Taxonomy Nodes"
    nodes: [Taxonomy!]!
    "Information about pagination in a connection."
    pageInfo: TaxonomyConnectionPageInfo!
}

"Edge between a Node and a connected Taxonomy"
interface TaxonomyConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected Taxonomy Node"
    node: Taxonomy!
}

"Page Info on the connected TaxonomyConnectionEdge"
interface TaxonomyConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Terms are nodes within a Taxonomy, used to group and relate other nodes."
interface TermNode {
    "The number of objects connected to the object"
    count: Int
    "Identifies the primary key from the database."
    databaseId: Int!
    "The description of the object"
    description: String
    "Connection between the TermNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedScriptConnection
    "Connection between the TermNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedStylesheetConnection
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "The name of the taxonomy that the object is associated with"
    taxonomyName: String
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String
}

"Connection to TermNode Nodes"
interface TermNodeConnection {
    "A list of edges (relational context) between RootQuery and connected TermNode Nodes"
    edges: [TermNodeConnectionEdge!]!
    "A list of connected TermNode Nodes"
    nodes: [TermNode!]!
    "Information about pagination in a connection."
    pageInfo: TermNodeConnectionPageInfo!
}

"Edge between a Node and a connected TermNode"
interface TermNodeConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected TermNode Node"
    node: TermNode!
}

"Page Info on the connected TermNodeConnectionEdge"
interface TermNodeConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to Theme Nodes"
interface ThemeConnection {
    "A list of edges (relational context) between RootQuery and connected Theme Nodes"
    edges: [ThemeConnectionEdge!]!
    "A list of connected Theme Nodes"
    nodes: [Theme!]!
    "Information about pagination in a connection."
    pageInfo: ThemeConnectionPageInfo!
}

"Edge between a Node and a connected Theme"
interface ThemeConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected Theme Node"
    node: Theme!
}

"Page Info on the connected ThemeConnectionEdge"
interface ThemeConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Any node that has a URI"
interface UniformResourceIdentifiable {
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The unique resource identifier path"
    uri: String
}

"Connection to User Nodes"
interface UserConnection {
    "A list of edges (relational context) between RootQuery and connected User Nodes"
    edges: [UserConnectionEdge!]!
    "A list of connected User Nodes"
    nodes: [User!]!
    "Information about pagination in a connection."
    pageInfo: UserConnectionPageInfo!
}

"Edge between a Node and a connected User"
interface UserConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected User Node"
    node: User!
}

"Page Info on the connected UserConnectionEdge"
interface UserConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to UserRole Nodes"
interface UserRoleConnection {
    "A list of edges (relational context) between RootQuery and connected UserRole Nodes"
    edges: [UserRoleConnectionEdge!]!
    "A list of connected UserRole Nodes"
    nodes: [UserRole!]!
    "Information about pagination in a connection."
    pageInfo: UserRoleConnectionPageInfo!
}

"Edge between a Node and a connected UserRole"
interface UserRoleConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected UserRole Node"
    node: UserRole!
}

"Page Info on the connected UserRoleConnectionEdge"
interface UserRoleConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Edge between a Node and a connected VariableProduct"
interface VariableProductConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected VariableProduct Node"
    node: VariableProduct!
}

"Connection to VariationAttribute Nodes"
interface VariationAttributeConnection {
    "A list of edges (relational context) between ProductVariation and connected VariationAttribute Nodes"
    edges: [VariationAttributeConnectionEdge!]!
    "A list of connected VariationAttribute Nodes"
    nodes: [VariationAttribute!]!
    "Information about pagination in a connection."
    pageInfo: VariationAttributeConnectionPageInfo!
}

"Edge between a Node and a connected VariationAttribute"
interface VariationAttributeConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected VariationAttribute Node"
    node: VariationAttribute!
}

"Page Info on the connected VariationAttributeConnectionEdge"
interface VariationAttributeConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection to visibleProduct Nodes"
interface VisibleProductConnection {
    "A list of edges (relational context) between RootQuery and connected visibleProduct Nodes"
    edges: [VisibleProductConnectionEdge!]!
    "A list of connected visibleProduct Nodes"
    nodes: [VisibleProduct!]!
    "Information about pagination in a connection."
    pageInfo: VisibleProductConnectionPageInfo!
}

"Edge between a Node and a connected visibleProduct"
interface VisibleProductConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The connected visibleProduct Node"
    node: VisibleProduct!
}

"Page Info on the connected VisibleProductConnectionEdge"
interface VisibleProductConnectionPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Information about pagination in a connection."
interface WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Deprecated in favor of MenuItemLinkeable Interface"
union MenuItemObjectUnion = Category | Page | Post | ProductCategory | ProductTag | Tag

"The payload for the addCartItems mutation."
type AddCartItemsPayload {
    added: [CartItem]
    cart: Cart
    cartErrors: [CartItemError]
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
}

"The payload for the addFee mutation."
type AddFeePayload {
    cart: Cart
    cartFee: CartFee
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
}

"The payload for the addMethodToShippingZone mutation."
type AddMethodToShippingZonePayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    method: ShippingZoneToShippingMethodConnectionEdge
    shippingZone: ShippingZone
}

"The payload for the addToCart mutation."
type AddToCartPayload {
    cart: Cart
    cartItem: CartItem
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
}

"Coupon applied to the shopping cart."
type AppliedCoupon {
    "Coupon code"
    code: String!
    "Description of applied coupon"
    description: String
    "Discount applied with this coupon"
    discountAmount(
        "Exclude Taxes (Default \"true\")"
        excludeTax: Boolean,
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String!
    "Taxes on discount applied with this coupon"
    discountTax(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String!
}

"The payload for the applyCoupon mutation."
type ApplyCouponPayload {
    applied: AppliedCoupon
    cart: Cart
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
}

"Product attribute terms count"
type AttributeCount {
    "Attribute taxonomy"
    label: String!
    "Attribute name"
    name: String!
    "Attribute name"
    slug: ProductAttributeEnum!
    "Attribute terms"
    terms: [SingleAttributeCount]
}

"Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from."
type Avatar {
    "URL for the default image or a default type. Accepts &#039;404&#039; (return a 404 instead of a default image), &#039;retro&#039; (8bit), &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face), &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;, &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039; (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo)."
    default: String
    "HTML attributes to insert in the IMG element. Is not sanitized."
    extraAttr: String
    "Whether to always show the default image, never the Gravatar."
    forceDefault: Boolean
    "Whether the avatar was successfully found."
    foundAvatar: Boolean
    "Height of the avatar image."
    height: Int
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;, &#039;R&#039;, &#039;X&#039;, and are judged in that order."
    rating: String
    "Type of url scheme to use. Typically HTTP vs. HTTPS."
    scheme: String
    "The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image."
    size: Int
    "URL for the gravatar image source."
    url: String
    "Width of the avatar image."
    width: Int
}

"The cart object"
type Cart {
    "Coupons applied to the cart"
    appliedCoupons: [AppliedCoupon]
    "Available shipping methods for this order."
    availableShippingMethods: [ShippingPackage]
    "Shipping method chosen for this order."
    chosenShippingMethods: [String]
    "Connection between the Cart type and the CartItem type"
    contents(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: CartToCartItemConnectionWhereArgs
    ): CartToCartItemConnection
    "Cart contents tax"
    contentsTax(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Cart contents total"
    contentsTotal(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Cart discount tax"
    discountTax(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Cart discount total"
    discountTotal(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Do display prices include taxes"
    displayPricesIncludeTax: Boolean
    "Cart fee tax"
    feeTax(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Cart fee total"
    feeTotal(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Additional fees on the cart."
    fees: [CartFee]
    "Is cart empty"
    isEmpty: Boolean
    "Is customer shipping address needed"
    needsShippingAddress: Boolean
    "Cart shipping tax"
    shippingTax(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Cart shipping total"
    shippingTotal(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Cart subtotal"
    subtotal(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Cart subtotal tax"
    subtotalTax(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Cart total after calculation"
    total(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Cart total tax amount"
    totalTax(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Cart total taxes itemized"
    totalTaxes: [CartTax]
}

"An additional fee"
type CartFee {
    "Fee amount"
    amount: Float
    "Fee ID"
    id: ID!
    "Fee name"
    name: String!
    "Fee tax class"
    taxClass: TaxClassEnum
    "Is fee taxable?"
    taxable: Boolean
    "Fee total"
    total: Float
}

"Error that occurred when adding an item to the cart."
type CartItemError implements CartError {
    "JSON string representation of extra cart item data"
    extraData: String
    "Cart item product database ID or global ID"
    productId: Int!
    "Cart item quantity"
    quantity: Int
    "Reason for error"
    reasons: [String]
    "Type of error"
    type: CartErrorType!
    "Cart item product variation attributes"
    variation: [ProductAttributeOutput]
    "Cart item product variation database ID or global ID"
    variationId: Int
}

"Connection between the CartItem type and the Product type"
type CartItemToProductConnectionEdge implements Edge & OneToOneConnection & ProductConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Product!
    "Simple variation attribute data"
    simpleVariations: [SimpleAttribute]
}

"Connection between the CartItem type and the ProductVariation type"
type CartItemToProductVariationConnectionEdge implements Edge & OneToOneConnection & ProductVariationConnectionEdge {
    "Attributes of the variation."
    attributes: [VariationAttribute]
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: ProductVariation!
}

"An itemized cart tax item"
type CartTax {
    "Tax amount"
    amount(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Tax Rate ID"
    id: ID!
    "Is tax compound?"
    isCompound: Boolean
    "Tax label"
    label: String!
}

"Connection between the Cart type and the CartItem type"
type CartToCartItemConnection implements CartItemConnection & Connection {
    "Edges for the CartToCartItemConnection connection"
    edges: [CartToCartItemConnectionEdge!]!
    "Total number of items in the cart."
    itemCount: Int
    "The nodes of the connection, without the edges"
    nodes: [CartItem!]!
    "Information about pagination in a connection."
    pageInfo: CartToCartItemConnectionPageInfo!
    "Total number of different products in the cart"
    productCount: Int
}

"An edge in a connection"
type CartToCartItemConnectionEdge implements CartItemConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: CartItem!
}

"Page Info on the &quot;CartToCartItemConnection&quot;"
type CartToCartItemConnectionPageInfo implements CartItemConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"The category type"
type Category implements DatabaseIdentifier & HierarchicalNode & HierarchicalTermNode & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable {
    "The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
    ancestors(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): CategoryToAncestorsCategoryConnection
    "The id field matches the WP_Post-&gt;ID field."
    categoryId: Int @deprecated(reason: "Deprecated in favor of databaseId")
    "Connection between the category type and its children categories."
    children(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: CategoryToCategoryConnectionWhereArgs
    ): CategoryToCategoryConnection
    "Connection between the Category type and the ContentNode type"
    contentNodes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: CategoryToContentNodeConnectionWhereArgs
    ): CategoryToContentNodeConnection
    "The number of objects connected to the object"
    count: Int
    "The unique identifier stored in the database"
    databaseId: Int!
    "The description of the object"
    description: String
    "Connection between the TermNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedScriptConnection
    "Connection between the TermNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedStylesheetConnection
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "Connection between the category type and its parent category."
    parent: CategoryToParentCategoryConnectionEdge
    "Database id of the parent node"
    parentDatabaseId: Int
    "The globally unique identifier of the parent node."
    parentId: ID
    "Connection between the Category type and the post type"
    posts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: CategoryToPostConnectionWhereArgs
    ): CategoryToPostConnection
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "Connection between the Category type and the Taxonomy type"
    taxonomy: CategoryToTaxonomyConnectionEdge
    "The name of the taxonomy that the object is associated with"
    taxonomyName: String
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String
}

"Connection between the Category type and the category type"
type CategoryToAncestorsCategoryConnection implements CategoryConnection & Connection {
    "Edges for the CategoryToAncestorsCategoryConnection connection"
    edges: [CategoryToAncestorsCategoryConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Category!]!
    "Information about pagination in a connection."
    pageInfo: CategoryToAncestorsCategoryConnectionPageInfo!
}

"An edge in a connection"
type CategoryToAncestorsCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Category!
}

"Page Info on the &quot;CategoryToAncestorsCategoryConnection&quot;"
type CategoryToAncestorsCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Category type and the category type"
type CategoryToCategoryConnection implements CategoryConnection & Connection {
    "Edges for the CategoryToCategoryConnection connection"
    edges: [CategoryToCategoryConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Category!]!
    "Information about pagination in a connection."
    pageInfo: CategoryToCategoryConnectionPageInfo!
}

"An edge in a connection"
type CategoryToCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Category!
}

"Page Info on the &quot;CategoryToCategoryConnection&quot;"
type CategoryToCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Category type and the ContentNode type"
type CategoryToContentNodeConnection implements Connection & ContentNodeConnection {
    "Edges for the CategoryToContentNodeConnection connection"
    edges: [CategoryToContentNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: CategoryToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type CategoryToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;CategoryToContentNodeConnection&quot;"
type CategoryToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Category type and the category type"
type CategoryToParentCategoryConnectionEdge implements CategoryConnectionEdge & Edge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Category!
}

"Connection between the Category type and the post type"
type CategoryToPostConnection implements Connection & PostConnection {
    "Edges for the CategoryToPostConnection connection"
    edges: [CategoryToPostConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Post!]!
    "Information about pagination in a connection."
    pageInfo: CategoryToPostConnectionPageInfo!
}

"An edge in a connection"
type CategoryToPostConnectionEdge implements Edge & PostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Post!
}

"Page Info on the &quot;CategoryToPostConnection&quot;"
type CategoryToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Category type and the Taxonomy type"
type CategoryToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Taxonomy!
}

"The payload for the checkout mutation."
type CheckoutPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    customer: Customer
    order: Order
    redirect: String
    result: String
}

"The payload for the clearShippingZoneLocations mutation."
type ClearShippingZoneLocationsPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    removedLocations: [ShippingLocation]
    shippingZone: ShippingZone
}

"Data about a collection of products"
type CollectionStats {
    "Returns number of products within attribute terms"
    attributeCounts(
        "Page of results to return"
        page: Int,
        "Number of results to return per page"
        perPage: Int
    ): [AttributeCount]
    "Min and max prices found in collection of products, provided using the smallest unit of the currency"
    priceRange: PriceRange
    "Returns number of products with each average rating"
    ratingCounts(
        "Page of results to return"
        page: Int,
        "Number of results to return per page"
        perPage: Int
    ): [RatingCount]
    "Returns number of products with each stock status"
    stockStatusCounts(
        "Page of results to return"
        page: Int,
        "Number of results to return per page"
        perPage: Int
    ): [StockStatusCount]
}

"A Comment object"
type Comment implements DatabaseIdentifier & Node & UniformResourceIdentifiable {
    "User agent used to post the comment. This field is equivalent to WP_Comment-&gt;comment_agent and the value matching the &quot;comment_agent&quot; column in SQL."
    agent: String
    "The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL."
    approved: Boolean @deprecated(reason: "Deprecated in favor of the `status` field")
    "The author of the comment"
    author: CommentToCommenterConnectionEdge
    "IP address for the author. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL."
    authorIp: String
    "ID for the comment, unique among comments."
    commentId: Int @deprecated(reason: "Deprecated in favor of databaseId")
    "Connection between the Comment type and the ContentNode type"
    commentedOn: CommentToContentNodeConnectionEdge
    "Content of the comment. This field is equivalent to WP_Comment-&gt;comment_content and the value matching the &quot;comment_content&quot; column in SQL."
    content(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The unique identifier stored in the database"
    databaseId: Int!
    "Date the comment was posted in local time. This field is equivalent to WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL."
    date: String
    "Date the comment was posted in GMT. This field is equivalent to WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL."
    dateGmt: String
    "The globally unique identifier for the comment object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "Karma value for the comment. This field is equivalent to WP_Comment-&gt;comment_karma and the value matching the &quot;comment_karma&quot; column in SQL."
    karma: Int
    "The permalink of the comment"
    link: String
    "Connection between the Comment type and the Comment type"
    parent(
        "Arguments for filtering the connection"
        where: CommentToParentCommentConnectionWhereArgs
    ): CommentToParentCommentConnectionEdge
    "The database id of the parent comment node or null if it is the root comment"
    parentDatabaseId: Int
    "The globally unique identifier of the parent comment node."
    parentId: ID
    "Connection between the Comment type and the Comment type"
    replies(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: CommentToCommentConnectionWhereArgs
    ): CommentToCommentConnection
    "The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL."
    status: CommentStatusEnum
    "Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and the value matching the &quot;comment_type&quot; column in SQL."
    type: String
    "The unique resource identifier path"
    uri: String
}

"A Comment Author object"
type CommentAuthor implements Commenter & DatabaseIdentifier & Node {
    "Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument."
    avatar(
        "Whether to always show the default image, never the Gravatar. Default false"
        forceDefault: Boolean,
        "The rating level of the avatar."
        rating: AvatarRatingEnum,
        "The size attribute of the avatar field can be used to fetch avatars of different sizes. The value corresponds to the dimension in pixels to fetch. The default is 96 pixels."
        size: Int = 96
    ): Avatar
    "The unique identifier stored in the database"
    databaseId: Int!
    "The email for the comment author"
    email: String
    "The globally unique identifier for the comment author object"
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The name for the comment author."
    name: String
    "The url the comment author."
    url: String
}

"Connection between the Comment type and the Comment type"
type CommentToCommentConnection implements CommentConnection & Connection {
    "Edges for the CommentToCommentConnection connection"
    edges: [CommentToCommentConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Comment!]!
    "Information about pagination in a connection."
    pageInfo: CommentToCommentConnectionPageInfo!
}

"An edge in a connection"
type CommentToCommentConnectionEdge implements CommentConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment!
}

"Page Info on the &quot;CommentToCommentConnection&quot;"
type CommentToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Comment type and the Commenter type"
type CommentToCommenterConnectionEdge implements CommenterConnectionEdge & Edge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Commenter!
}

"Connection between the Comment type and the ContentNode type"
type CommentToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: ContentNode!
}

"Connection between the Comment type and the Comment type"
type CommentToParentCommentConnectionEdge implements CommentConnectionEdge & Edge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Comment!
}

"Connection between the ContentNode type and the ContentType type"
type ContentNodeToContentTypeConnectionEdge implements ContentTypeConnectionEdge & Edge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: ContentType!
}

"Connection between the ContentNode type and the User type"
type ContentNodeToEditLastConnectionEdge implements Edge & OneToOneConnection & UserConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: User!
}

"Connection between the ContentNode type and the User type"
type ContentNodeToEditLockConnectionEdge implements Edge & OneToOneConnection & UserConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The timestamp for when the node was last edited"
    lockTimestamp: String
    "The node of the connection, without the edges"
    node: User!
}

"Connection between the ContentNode type and the EnqueuedScript type"
type ContentNodeToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
    "Edges for the ContentNodeToEnqueuedScriptConnection connection"
    edges: [ContentNodeToEnqueuedScriptConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [EnqueuedScript!]!
    "Information about pagination in a connection."
    pageInfo: ContentNodeToEnqueuedScriptConnectionPageInfo!
}

"An edge in a connection"
type ContentNodeToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: EnqueuedScript!
}

"Page Info on the &quot;ContentNodeToEnqueuedScriptConnection&quot;"
type ContentNodeToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the ContentNode type and the EnqueuedStylesheet type"
type ContentNodeToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
    "Edges for the ContentNodeToEnqueuedStylesheetConnection connection"
    edges: [ContentNodeToEnqueuedStylesheetConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [EnqueuedStylesheet!]!
    "Information about pagination in a connection."
    pageInfo: ContentNodeToEnqueuedStylesheetConnectionPageInfo!
}

"An edge in a connection"
type ContentNodeToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: EnqueuedStylesheet!
}

"Page Info on the &quot;ContentNodeToEnqueuedStylesheetConnection&quot;"
type ContentNodeToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"An Post Type object"
type ContentType implements Node & UniformResourceIdentifiable {
    "Whether this content type should can be exported."
    canExport: Boolean
    "Connection between the ContentType type and the Taxonomy type"
    connectedTaxonomies(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentTypeToTaxonomyConnection
    "Connection between the ContentType type and the ContentNode type"
    contentNodes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ContentTypeToContentNodeConnectionWhereArgs
    ): ContentTypeToContentNodeConnection
    "Whether content of this type should be deleted when the author of it is deleted from the system."
    deleteWithUser: Boolean
    "Description of the content type."
    description: String
    "Whether to exclude nodes of this content type from front end search results."
    excludeFromSearch: Boolean
    "The plural name of the content type within the GraphQL Schema."
    graphqlPluralName: String
    "The singular name of the content type within the GraphQL Schema."
    graphqlSingleName: String
    "Whether this content type should have archives. Content archives are generated by type and by date."
    hasArchive: Boolean
    "Whether the content type is hierarchical, for example pages."
    hierarchical: Boolean
    "The globally unique identifier of the post-type object."
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether this page is set to the static front page."
    isFrontPage: Boolean!
    "Whether this page is set to the blog posts page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "Display name of the content type."
    label: String
    "Details about the content type labels."
    labels: PostTypeLabelDetails
    "The name of the icon file to display as a menu icon."
    menuIcon: String
    "The position of this post type in the menu. Only applies if show_in_menu is true."
    menuPosition: Int
    "The internal name of the post type. This should not be used for display purposes."
    name: String
    "Whether a content type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention."
    public: Boolean
    "Whether queries can be performed on the front end for the content type as part of parse_request()."
    publiclyQueryable: Boolean
    "Name of content type to display in REST API &quot;wp/v2&quot; namespace."
    restBase: String
    "The REST Controller class assigned to handling this content type."
    restControllerClass: String
    "Makes this content type available via the admin bar."
    showInAdminBar: Boolean
    "Whether to add the content type to the GraphQL Schema."
    showInGraphql: Boolean
    "Where to show the content type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type will be placed as a sub-menu of that."
    showInMenu: Boolean
    "Makes this content type available for selection in navigation menus."
    showInNavMenus: Boolean
    "Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace."
    showInRest: Boolean
    "Whether to generate and allow a UI for managing this content type in the admin."
    showUi: Boolean
    "The unique resource identifier path"
    uri: String
}

"Connection between the ContentType type and the ContentNode type"
type ContentTypeToContentNodeConnection implements Connection & ContentNodeConnection {
    "Edges for the ContentTypeToContentNodeConnection connection"
    edges: [ContentTypeToContentNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: ContentTypeToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type ContentTypeToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;ContentTypeToContentNodeConnection&quot;"
type ContentTypeToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the ContentType type and the Taxonomy type"
type ContentTypeToTaxonomyConnection implements Connection & TaxonomyConnection {
    "Edges for the ContentTypeToTaxonomyConnection connection"
    edges: [ContentTypeToTaxonomyConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Taxonomy!]!
    "Information about pagination in a connection."
    pageInfo: ContentTypeToTaxonomyConnectionPageInfo!
}

"An edge in a connection"
type ContentTypeToTaxonomyConnectionEdge implements Edge & TaxonomyConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Taxonomy!
}

"Page Info on the &quot;ContentTypeToTaxonomyConnection&quot;"
type ContentTypeToTaxonomyConnectionPageInfo implements PageInfo & TaxonomyConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"shipping country state object"
type CountryState {
    "Country state code"
    code: String!
    "Country state name"
    name: String!
}

"A coupon object"
type Coupon implements Node {
    "Amount off provided by the coupon"
    amount: Float
    "Coupon code"
    code: String
    "The ID of the coupon in the database"
    databaseId: Int
    "Date coupon created"
    date: String
    "Date coupon expires"
    dateExpiry: String
    "Explanation of what the coupon does"
    description: String
    "Type of discount"
    discountType: DiscountTypeEnum
    "Only customers with a matching email address can use the coupon"
    emailRestrictions: [String]
    "Excluding sale items mean this coupon cannot be used on items that are on sale (or carts that contain on sale items)"
    excludeSaleItems: Boolean
    "Connection between the Coupon type and the productCategory type"
    excludedProductCategories(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: CouponToExcludedProductCategoriesConnectionWhereArgs
    ): CouponToExcludedProductCategoriesConnection
    "Connection between the Coupon type and the ProductUnion type"
    excludedProducts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: CouponToExcludedProductsConnectionWhereArgs
    ): CouponToExcludedProductsConnection
    "Does this coupon grant free shipping?"
    freeShipping: Boolean
    "The globally unique identifier for the coupon"
    id: ID!
    "Individual use means this coupon cannot be used in conjunction with other coupons"
    individualUse: Boolean
    "The number of products in your cart this coupon can apply to (for product discounts)"
    limitUsageToXItems: Int
    "Maximum spend amount that must be met before this coupon can be used "
    maximumAmount: Float
    "Object meta data"
    metaData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String],
        "Retrieve meta with matching keys"
        multiple: Boolean
    ): [MetaData]
    "Minimum spend amount that must be met before this coupon can be used"
    minimumAmount: Float
    "Date coupon modified"
    modified: String
    "Connection between the Coupon type and the productCategory type"
    productCategories(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: CouponToProductCategoryConnectionWhereArgs
    ): CouponToProductCategoryConnection
    "Connection between the Coupon type and the ProductUnion type"
    products(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: CouponToProductUnionConnectionWhereArgs
    ): CouponToProductUnionConnection
    "How many times the coupon has been used"
    usageCount: Int
    "Amount of times this coupon can be used globally"
    usageLimit: Int
    "Amount of times this coupon can be used by a customer"
    usageLimitPerUser: Int
    "Connection between the Coupon type and the Customer type"
    usedBy(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: CouponToCustomerConnectionWhereArgs
    ): CouponToCustomerConnection
}

"a coupon line object"
type CouponLine implements Node {
    "Line&#039;s Coupon code"
    code: String
    "Line&#039;s Coupon"
    coupon: Coupon
    "The ID of the order item in the database"
    databaseId: Int
    "Line&#039;s Discount total"
    discount: String
    "Line&#039;s Discount total tax"
    discountTax: String
    "The ID of the order item in the database"
    id: ID!
    "Object meta data"
    metaData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String],
        "Retrieve meta with matching keys"
        multiple: Boolean
    ): [MetaData]
    "The Id of the order the order item belongs to."
    orderId: Int
}

"Connection between the Coupon type and the Customer type"
type CouponToCustomerConnection implements Connection & CustomerConnection {
    "Edges for the CouponToCustomerConnection connection"
    edges: [CouponToCustomerConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Customer!]!
    "Information about pagination in a connection."
    pageInfo: CouponToCustomerConnectionPageInfo!
}

"An edge in a connection"
type CouponToCustomerConnectionEdge implements CustomerConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Customer!
}

"Page Info on the &quot;CouponToCustomerConnection&quot;"
type CouponToCustomerConnectionPageInfo implements CustomerConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Coupon type and the productCategory type"
type CouponToExcludedProductCategoriesConnection implements Connection & ProductCategoryConnection {
    "Edges for the CouponToExcludedProductCategoriesConnection connection"
    edges: [CouponToExcludedProductCategoriesConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ProductCategory!]!
    "Information about pagination in a connection."
    pageInfo: CouponToExcludedProductCategoriesConnectionPageInfo!
}

"An edge in a connection"
type CouponToExcludedProductCategoriesConnectionEdge implements Edge & ProductCategoryConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductCategory!
}

"Page Info on the &quot;CouponToExcludedProductCategoriesConnection&quot;"
type CouponToExcludedProductCategoriesConnectionPageInfo implements PageInfo & ProductCategoryConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Coupon type and the ProductUnion type"
type CouponToExcludedProductsConnection implements Connection & ProductUnionConnection {
    "Edges for the CouponToExcludedProductsConnection connection"
    edges: [CouponToExcludedProductsConnectionEdge!]!
    "Total products founds"
    found: Int
    "The nodes of the connection, without the edges"
    nodes: [ProductUnion!]!
    "Information about pagination in a connection."
    pageInfo: CouponToExcludedProductsConnectionPageInfo!
}

"An edge in a connection"
type CouponToExcludedProductsConnectionEdge implements Edge & ProductUnionConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductUnion!
}

"Page Info on the &quot;CouponToExcludedProductsConnection&quot;"
type CouponToExcludedProductsConnectionPageInfo implements PageInfo & ProductUnionConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Coupon type and the productCategory type"
type CouponToProductCategoryConnection implements Connection & ProductCategoryConnection {
    "Edges for the CouponToProductCategoryConnection connection"
    edges: [CouponToProductCategoryConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ProductCategory!]!
    "Information about pagination in a connection."
    pageInfo: CouponToProductCategoryConnectionPageInfo!
}

"An edge in a connection"
type CouponToProductCategoryConnectionEdge implements Edge & ProductCategoryConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductCategory!
}

"Page Info on the &quot;CouponToProductCategoryConnection&quot;"
type CouponToProductCategoryConnectionPageInfo implements PageInfo & ProductCategoryConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Coupon type and the ProductUnion type"
type CouponToProductUnionConnection implements Connection & ProductUnionConnection {
    "Edges for the CouponToProductUnionConnection connection"
    edges: [CouponToProductUnionConnectionEdge!]!
    "Total products founds"
    found: Int
    "The nodes of the connection, without the edges"
    nodes: [ProductUnion!]!
    "Information about pagination in a connection."
    pageInfo: CouponToProductUnionConnectionPageInfo!
}

"An edge in a connection"
type CouponToProductUnionConnectionEdge implements Edge & ProductUnionConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductUnion!
}

"Page Info on the &quot;CouponToProductUnionConnection&quot;"
type CouponToProductUnionConnectionPageInfo implements PageInfo & ProductUnionConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"The payload for the createCategory mutation."
type CreateCategoryPayload {
    "The created category"
    category: Category
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
}

"The payload for the createComment mutation."
type CreateCommentPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The comment that was created"
    comment: Comment
    "Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache"
    success: Boolean
}

"The payload for the createCoupon mutation."
type CreateCouponPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    code: String
    coupon: Coupon
}

"The payload for the createMediaItem mutation."
type CreateMediaItemPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The MediaItem object mutation type."
    mediaItem: MediaItem
}

"The payload for the createOrder mutation."
type CreateOrderPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    order: Order
    orderId: Int
}

"The payload for the createPaTest mutation."
type CreatePaTestPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created pa_test"
    paTest: PaTest
}

"The payload for the createPage mutation."
type CreatePagePayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The Post object mutation type."
    page: Page
}

"The payload for the createPostFormat mutation."
type CreatePostFormatPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created post_format"
    postFormat: PostFormat
}

"The payload for the createPost mutation."
type CreatePostPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The Post object mutation type."
    post: Post
}

"The payload for the createProductCategory mutation."
type CreateProductCategoryPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created product_cat"
    productCategory: ProductCategory
}

"The payload for the createProduct mutation."
type CreateProductPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The Post object mutation type."
    product: Product
}

"The payload for the createProductTag mutation."
type CreateProductTagPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created product_tag"
    productTag: ProductTag
}

"The payload for the createProductType mutation."
type CreateProductTypePayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created product_type"
    productType: ProductType
}

"The payload for the createShippingClass mutation."
type CreateShippingClassPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created product_shipping_class"
    shippingClass: ShippingClass
}

"The payload for the createShippingZone mutation."
type CreateShippingZonePayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    shippingZone: ShippingZone
}

"The payload for the createTag mutation."
type CreateTagPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created post_tag"
    tag: Tag
}

"The payload for the createTaxClass mutation."
type CreateTaxClassPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    taxClass: TaxClass
}

"The payload for the createTaxRate mutation."
type CreateTaxRatePayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    taxRate: TaxRate
}

"The payload for the createUser mutation."
type CreateUserPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The User object mutation type."
    user: User
}

"The payload for the createVisibleProduct mutation."
type CreateVisibleProductPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created product_visibility"
    visibleProduct: VisibleProduct
}

"A customer object"
type Customer implements Node {
    "A nonce for the account page. By default, it expires in 1 hour."
    accountNonce: String
    "A nonce link to the account page for session user. Expires in 24 hours."
    accountUrl: String
    "A nonce for the add payment method page. By default, it expires in 1 hour."
    addPaymentMethodNonce: String
    "A nonce link to the add payment method page for the authenticated user. Expires in 24 hours."
    addPaymentMethodUrl: String
    "Customer&#039;s stored payment tokens."
    availablePaymentMethods: [PaymentToken]
    "Customer&#039;s stored payment tokens."
    availablePaymentMethodsCC: [PaymentTokenCC]
    "Customer&#039;s stored payment tokens."
    availablePaymentMethodsEC: [PaymentTokenECheck]
    "Return the date customer billing address properties"
    billing: CustomerAddress
    "Has customer calculated shipping?"
    calculatedShipping: Boolean
    "A nonce for the cart page. By default, it expires in 1 hour."
    cartNonce: String
    "A nonced link to the cart page. By default, it expires in 1 hour."
    cartUrl: String
    "A nonce for the checkout page. By default, it expires in 1 hour."
    checkoutNonce: String
    "A nonce link to the checkout page for session user. Expires in 24 hours."
    checkoutUrl: String
    "The ID of the customer in the database"
    databaseId: Int
    "Return the date customer was created"
    date: String
    "Return the customer&#039;s display name."
    displayName: String
    "Connection between the Customer type and the DownloadableItem type"
    downloadableItems(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: CustomerToDownloadableItemConnectionWhereArgs
    ): CustomerToDownloadableItemConnection
    "Return the customer&#039;s email."
    email: String
    "Return the customer&#039;s first name."
    firstName: String
    "Has calculated shipping?"
    hasCalculatedShipping: Boolean
    "The globally unique identifier for the customer"
    id: ID!
    "Return the date customer was last updated"
    isPayingCustomer: Boolean
    "Is customer VAT exempt?"
    isVatExempt: Boolean
    "Return the customer&#039;s last name."
    lastName: String
    "Gets the customers last order."
    lastOrder: Order
    "Object meta data"
    metaData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String],
        "Retrieve meta with matching keys"
        multiple: Boolean
    ): [MetaData]
    "Return the date customer was last updated"
    modified: String
    "Return the number of orders this customer has."
    orderCount: Int
    "Connection between the Customer type and the Order type"
    orders(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: CustomerToOrderConnectionWhereArgs
    ): CustomerToOrderConnection
    "Connection between the Customer type and the Refund type"
    refunds(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: CustomerToRefundConnectionWhereArgs
    ): CustomerToRefundConnection
    "Return the customer&#039;s user role."
    role: String
    "Session data for the viewing customer"
    session: [MetaData]
    "A JWT token that can be used in future requests to for WooCommerce session identification"
    sessionToken: String
    "Return the date customer shipping address properties"
    shipping: CustomerAddress
    "Return how much money this customer has spent."
    totalSpent: Float
    "Return the customer&#039;s username."
    username: String
}

"A customer address object"
type CustomerAddress {
    "Address 1"
    address1: String
    "Address 2"
    address2: String
    "City"
    city: String
    "Company"
    company: String
    "Country"
    country: CountriesEnum
    "E-mail"
    email: String
    "First name"
    firstName: String
    "Last name"
    lastName: String
    "Phone"
    phone: String
    "Zip Postal Code"
    postcode: String
    "State"
    state: String
}

"Connection between the Customer type and the DownloadableItem type"
type CustomerToDownloadableItemConnection implements Connection & DownloadableItemConnection {
    "Edges for the CustomerToDownloadableItemConnection connection"
    edges: [CustomerToDownloadableItemConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [DownloadableItem!]!
    "Information about pagination in a connection."
    pageInfo: CustomerToDownloadableItemConnectionPageInfo!
}

"An edge in a connection"
type CustomerToDownloadableItemConnectionEdge implements DownloadableItemConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: DownloadableItem!
}

"Page Info on the &quot;CustomerToDownloadableItemConnection&quot;"
type CustomerToDownloadableItemConnectionPageInfo implements DownloadableItemConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Customer type and the Order type"
type CustomerToOrderConnection implements Connection & OrderConnection {
    "Edges for the CustomerToOrderConnection connection"
    edges: [CustomerToOrderConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Order!]!
    "Information about pagination in a connection."
    pageInfo: CustomerToOrderConnectionPageInfo!
}

"An edge in a connection"
type CustomerToOrderConnectionEdge implements Edge & OrderConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Order!
}

"Page Info on the &quot;CustomerToOrderConnection&quot;"
type CustomerToOrderConnectionPageInfo implements OrderConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Customer type and the Refund type"
type CustomerToRefundConnection implements Connection & RefundConnection {
    "Edges for the CustomerToRefundConnection connection"
    edges: [CustomerToRefundConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Refund!]!
    "Information about pagination in a connection."
    pageInfo: CustomerToRefundConnectionPageInfo!
}

"An edge in a connection"
type CustomerToRefundConnectionEdge implements Edge & RefundConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Refund!
}

"Page Info on the &quot;CustomerToRefundConnection&quot;"
type CustomerToRefundConnectionPageInfo implements PageInfo & RefundConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"The template assigned to the node"
type DefaultTemplate implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"The payload for the deleteCategory mutation."
type DeleteCategoryPayload {
    "The deleted term object"
    category: Category
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
}

"The payload for the deleteComment mutation."
type DeleteCommentPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The deleted comment object"
    comment: Comment
    "The deleted comment ID"
    deletedId: ID
}

"The payload for the deleteCoupon mutation."
type DeleteCouponPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    code: String
    coupon: Coupon
}

"The payload for the deleteMediaItem mutation."
type DeleteMediaItemPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted mediaItem"
    deletedId: ID
    "The mediaItem before it was deleted"
    mediaItem: MediaItem
}

"The payload for the deleteOrderItems mutation."
type DeleteOrderItemsPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    order: Order
}

"The payload for the deleteOrder mutation."
type DeleteOrderPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    order: Order
}

"The payload for the deletePaTest mutation."
type DeletePaTestPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
    "The deleted term object"
    paTest: PaTest
}

"The payload for the deletePage mutation."
type DeletePagePayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
    "The object before it was deleted"
    page: Page
}

"The payload for the deletePaymentMethod mutation."
type DeletePaymentMethodPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Status of the request"
    status: String
}

"The payload for the deletePostFormat mutation."
type DeletePostFormatPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
    "The deleted term object"
    postFormat: PostFormat
}

"The payload for the deletePost mutation."
type DeletePostPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
    "The object before it was deleted"
    post: Post
}

"The payload for the deleteProductCategory mutation."
type DeleteProductCategoryPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
    "The deleted term object"
    productCategory: ProductCategory
}

"The payload for the deleteProduct mutation."
type DeleteProductPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
    "The object before it was deleted"
    product: Product
}

"The payload for the deleteProductTag mutation."
type DeleteProductTagPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
    "The deleted term object"
    productTag: ProductTag
}

"The payload for the deleteProductType mutation."
type DeleteProductTypePayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
    "The deleted term object"
    productType: ProductType
}

"The payload for the deleteReview mutation."
type DeleteReviewPayload {
    "The affected product review ID"
    affectedId: ID
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The product rating of the affected product review"
    rating: Float
    "The affected product review"
    review: Comment
}

"The payload for the deleteShippingClass mutation."
type DeleteShippingClassPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
    "The deleted term object"
    shippingClass: ShippingClass
}

"The payload for the deleteShippingZone mutation."
type DeleteShippingZonePayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    shippingZone: ShippingZone
}

"The payload for the deleteTag mutation."
type DeleteTagPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
    "The deleted term object"
    tag: Tag
}

"The payload for the deleteTaxClass mutation."
type DeleteTaxClassPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    taxClass: TaxClass
}

"The payload for the deleteTaxRate mutation."
type DeleteTaxRatePayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    taxRate: TaxRate
}

"The payload for the deleteUser mutation."
type DeleteUserPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the user that you just deleted"
    deletedId: ID
    "The deleted user object"
    user: User
}

"The payload for the deleteVisibleProduct mutation."
type DeleteVisibleProductPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the deleted object"
    deletedId: ID
    "The deleted term object"
    visibleProduct: VisibleProduct
}

"The discussion setting type"
type DiscussionSettings {
    "Allow people to submit comments on new posts."
    defaultCommentStatus: String
    "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles."
    defaultPingStatus: String
}

"A downloadable item"
type DownloadableItem implements Node {
    "The date the downloadable item expires"
    accessExpires: String
    "ProductDownload of the downloadable item"
    download: ProductDownload
    "Downloadable item ID."
    downloadId: String!
    "Number of times the item can be downloaded."
    downloadsRemaining: Int
    "Downloadable item unique identifier"
    id: ID!
    "Name of the downloadable item."
    name: String
    "Product of downloadable item."
    product: ProductUnion
    "Download URL of the downloadable item."
    url: String
}

"The payload for the emptyCart mutation."
type EmptyCartPayload {
    cart: Cart
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    deletedCart: Cart
}

"Script enqueued by the CMS"
type EnqueuedScript implements EnqueuedAsset & Node {
    "The inline code to be run after the asset is loaded."
    after: [String]
    "Deprecated"
    args: Boolean @deprecated(reason: "Use `EnqueuedAsset.media` instead.")
    "The inline code to be run before the asset is loaded."
    before: [String]
    "The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc"
    conditional: String
    "Dependencies needed to use this asset"
    dependencies: [EnqueuedScript]
    "Extra information needed for the script"
    extra: String @deprecated(reason: "Use `EnqueuedScript.extraData` instead.")
    "Extra data supplied to the enqueued script"
    extraData: String
    "The handle of the enqueued asset"
    handle: String
    "The global ID of the enqueued script"
    id: ID!
    "The source of the asset"
    src: String
    "The loading strategy to use on the script tag"
    strategy: ScriptLoadingStrategyEnum
    "The version of the enqueued script"
    version: String
}

"Stylesheet enqueued by the CMS"
type EnqueuedStylesheet implements EnqueuedAsset & Node {
    "The inline code to be run after the asset is loaded."
    after: [String]
    "Deprecated"
    args: Boolean @deprecated(reason: "Use `EnqueuedAsset.media` instead.")
    "The inline code to be run before the asset is loaded."
    before: [String]
    "The HTML conditional comment for the enqueued asset. E.g. IE 6, lte IE 7, etc"
    conditional: String
    "Dependencies needed to use this asset"
    dependencies: [EnqueuedStylesheet]
    "Extra information needed for the script"
    extra: String @deprecated(reason: "Use `EnqueuedScript.extraData` instead.")
    "The handle of the enqueued asset"
    handle: String
    "The global ID of the enqueued stylesheet"
    id: ID!
    "Whether the enqueued style is RTL or not"
    isRtl: Boolean
    "The media attribute to use for the link"
    media: String
    "The absolute path to the enqueued style. Set when the stylesheet is meant to load inline."
    path: String
    "The `rel` attribute to use for the link"
    rel: String
    "The source of the asset"
    src: String
    "Optional suffix, used in combination with RTL"
    suffix: String
    "The title of the enqueued style. Used for preferred/alternate stylesheets."
    title: String
    "The version of the enqueued style"
    version: String
}

"A external product object"
type ExternalProduct implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithComments & NodeWithContentEditor & NodeWithExcerpt & NodeWithFeaturedImage & NodeWithTemplate & NodeWithTitle & Previewable & Product & ProductUnion & ProductWithAttributes & ProductWithPricing & UniformResourceIdentifiable {
    "Connection between the Product type and the paTest type"
    allPaTest(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToPaTestConnectionWhereArgs
    ): ProductToPaTestConnection
    "The ancestors of the content node."
    ancestors(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductConnectionWhereArgs
    ): ProductToProductConnection @deprecated(reason: "This content type is not hierarchical and typically will not have ancestors")
    "Connection between the Product type and the ProductAttribute type"
    attributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductAttributeConnectionWhereArgs
    ): ProductToProductAttributeConnection
    "Product average count"
    averageRating: Float
    "External product Buy button text"
    buttonText: String
    "Catalog visibility"
    catalogVisibility: CatalogVisibilityEnum
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "Connection between the Product type and the Comment type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToCommentsConnectionWhereArgs
    ): ProductToCommentsConnection
    "The content of the post."
    content(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Connection between the ContentNode type and the ContentType type"
    contentType: ContentNodeToContentTypeConnectionEdge
    "The name of the Content Type the node belongs to"
    contentTypeName: String!
    "Product or variation ID"
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "Date on sale from"
    dateOnSaleFrom: String
    "Date on sale to"
    dateOnSaleTo: String
    "Connection between the ProductWithAttributes type and the VariationAttribute type"
    defaultAttributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductWithAttributesToVariationAttributeConnection
    "Product description"
    description(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The desired slug of the post"
    desiredSlug: String
    "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editingLockedBy: ContentNodeToEditLockConnectionEdge
    "The RSS enclosure for the object"
    enclosure: String
    "Connection between the ContentNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedScriptConnection
    "Connection between the ContentNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedStylesheetConnection
    "The excerpt of the post."
    excerpt(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "External product url"
    externalUrl: String
    "If the product is featured"
    featured: Boolean
    "Connection between the NodeWithFeaturedImage type and the MediaItem type"
    featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
    "The database identifier for the featured image node assigned to the content node"
    featuredImageDatabaseId: Int
    "Globally unique ID of the featured image assigned to the node"
    featuredImageId: ID
    "Connection between the Product type and the MediaItem type"
    galleryImages(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToMediaItemConnectionWhereArgs
    ): ProductToMediaItemConnection
    "Connection between the Product type and the GlobalProductAttribute type"
    globalAttributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductToGlobalProductAttributeConnection
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "Whether the product object is password protected."
    hasPassword: Boolean
    "Product or variation global ID"
    id: ID!
    "Main image"
    image: MediaItem
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The user that most recently edited the node"
    lastEditedBy: ContentNodeToEditLastConnectionEdge
    "The permalink of the post"
    link: String
    "Connection between the Product type and the LocalProductAttribute type"
    localAttributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductToLocalProductAttributeConnection
    "Menu order"
    menuOrder: Int
    "Object meta data"
    metaData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String],
        "Retrieve meta with matching keys"
        multiple: Boolean
    ): [MetaData]
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "Product name"
    name: String
    "Is product on sale?"
    onSale: Boolean
    "The parent of the content node."
    parent(
        "Arguments for filtering the connection"
        where: ProductToParentConnectionWhereArgs
    ): ProductToParentConnectionEdge @deprecated(reason: "This content type is not hierarchical and typically will not have a parent")
    "The password for the product object."
    password: String
    "Connection between the Product type and the Product type"
    preview(
        "Arguments for filtering the connection"
        where: ProductToPreviewConnectionWhereArgs
    ): ProductToPreviewConnectionEdge
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
    "Product&#039;s active price"
    price(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Connection between the Product type and the productCategory type"
    productCategories(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductCategoryConnectionWhereArgs
    ): ProductToProductCategoryConnection
    "The id field matches the WP_Post-&gt;ID field."
    productId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
    "Connection between the Product type and the productTag type"
    productTags(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductTagConnectionWhereArgs
    ): ProductToProductTagConnection
    "Connection between the Product type and the productType type"
    productTypes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductTypeConnectionWhereArgs
    ): ProductToProductTypeConnection
    "Can product be purchased?"
    purchasable: Boolean
    "Purchase note"
    purchaseNote: String
    "Product&#039;s regular price"
    regularPrice(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Connection between the Product type and the ProductUnion type"
    related(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductUnionConnectionWhereArgs
    ): ProductToProductUnionConnection
    "Product review count"
    reviewCount: Int
    "Connection between the Product type and the Comment type"
    reviews(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToCommentConnectionWhereArgs
    ): ProductToCommentConnection
    "If reviews are allowed"
    reviewsAllowed: Boolean
    "Product&#039;s sale price"
    salePrice(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Connection between the Product type and the shippingClass type"
    shippingClasses(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToShippingClassConnectionWhereArgs
    ): ProductToShippingClassConnection
    "Product short description"
    shortDescription(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Product SKU"
    sku: String
    "Product slug"
    slug: String
    "The current status of the object"
    status: String
    "Tax class"
    taxClass: TaxClassEnum
    "Tax status"
    taxStatus: TaxStatusEnum
    "The template assigned to the node"
    template: ContentTemplate
    "Connection between the Product type and the TermNode type"
    terms(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToTermNodeConnectionWhereArgs
    ): ProductToTermNodeConnection
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Number total of sales"
    totalSales: Int
    "Product type"
    type: ProductTypesEnum
    "Connection between the Product type and the ProductUnion type"
    upsell(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToUpsellConnectionWhereArgs
    ): ProductToUpsellConnection
    "The unique resource identifier path"
    uri: String
    "Connection between the Product type and the visibleProduct type"
    visibleProducts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToVisibleProductConnectionWhereArgs
    ): ProductToVisibleProductConnection
}

"a fee line object"
type FeeLine implements Node {
    "Fee amount"
    amount: String
    "The ID of the order item in the database"
    databaseId: Int
    "The ID of the order item in the database"
    id: ID!
    "Object meta data"
    metaData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String],
        "Retrieve meta with matching keys"
        multiple: Boolean
    ): [MetaData]
    "Fee name"
    name: String
    "The Id of the order the order item belongs to."
    orderId: Int
    "Line tax class"
    taxClass: TaxClassEnum
    "Tax status of fee"
    taxStatus: TaxStatusEnum
    "Line taxes"
    taxes: [OrderItemTax]
    "Line total (after discounts)"
    total: String
    "Line total tax (after discounts)"
    totalTax: String
}

"The payload for the fillCart mutation."
type FillCartPayload {
    added: [CartItem]
    applied: [AppliedCoupon]
    cart: Cart
    cartErrors: [CartError]
    chosenShippingMethods: [String]
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
}

"The payload for the forgetSession mutation."
type ForgetSessionPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    session: [MetaData]
}

"The general setting type"
type GeneralSettings {
    "A date format for all date strings."
    dateFormat: String
    "Site tagline."
    description: String
    "This address is used for admin purposes, like new user notification."
    email: String
    "WordPress locale code."
    language: String
    "A day number of the week that the week should start on."
    startOfWeek: Int
    "A time format for all time strings."
    timeFormat: String
    "A city in the same timezone as you."
    timezone: String
    "Site title."
    title: String
    "Site URL."
    url: String
}

"A product attribute object"
type GlobalProductAttribute implements Node & ProductAttribute {
    "Attribute ID"
    attributeId: Int!
    "Attribute Global ID"
    id: ID!
    "Attribute label"
    label: String
    "Product attribute name"
    name: String
    "Attribute options"
    options: [String]
    "Attribute position"
    position: Int
    "Product attribute scope."
    scope: ProductAttributeTypesEnum!
    "Product attribute slug"
    slug: String
    "Connection between the GlobalProductAttribute type and the TermNode type"
    terms(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: GlobalProductAttributeToTermNodeConnectionWhereArgs
    ): GlobalProductAttributeToTermNodeConnection
    "Is attribute on product variation"
    variation: Boolean
    "Is attribute visible"
    visible: Boolean
}

"Connection between the GlobalProductAttribute type and the TermNode type"
type GlobalProductAttributeToTermNodeConnection implements Connection & TermNodeConnection {
    "Edges for the GlobalProductAttributeToTermNodeConnection connection"
    edges: [GlobalProductAttributeToTermNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [TermNode!]!
    "Information about pagination in a connection."
    pageInfo: GlobalProductAttributeToTermNodeConnectionPageInfo!
}

"An edge in a connection"
type GlobalProductAttributeToTermNodeConnectionEdge implements Edge & TermNodeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: TermNode!
}

"Page Info on the &quot;GlobalProductAttributeToTermNodeConnection&quot;"
type GlobalProductAttributeToTermNodeConnectionPageInfo implements PageInfo & TermNodeConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"A group product object"
type GroupProduct implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithComments & NodeWithContentEditor & NodeWithExcerpt & NodeWithFeaturedImage & NodeWithTemplate & NodeWithTitle & Previewable & Product & ProductUnion & ProductWithAttributes & ProductWithPricing & UniformResourceIdentifiable {
    "Product&#039;s add to cart button text description"
    addToCartDescription: String
    "Product&#039;s add to cart button text description"
    addToCartText: String
    "Connection between the Product type and the paTest type"
    allPaTest(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToPaTestConnectionWhereArgs
    ): ProductToPaTestConnection
    "The ancestors of the content node."
    ancestors(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductConnectionWhereArgs
    ): ProductToProductConnection @deprecated(reason: "This content type is not hierarchical and typically will not have ancestors")
    "Connection between the Product type and the ProductAttribute type"
    attributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductAttributeConnectionWhereArgs
    ): ProductToProductAttributeConnection
    "Product average count"
    averageRating: Float
    "Catalog visibility"
    catalogVisibility: CatalogVisibilityEnum
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "Connection between the Product type and the Comment type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToCommentsConnectionWhereArgs
    ): ProductToCommentsConnection
    "The content of the post."
    content(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Connection between the ContentNode type and the ContentType type"
    contentType: ContentNodeToContentTypeConnectionEdge
    "The name of the Content Type the node belongs to"
    contentTypeName: String!
    "Product or variation ID"
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "Date on sale from"
    dateOnSaleFrom: String
    "Date on sale to"
    dateOnSaleTo: String
    "Connection between the ProductWithAttributes type and the VariationAttribute type"
    defaultAttributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductWithAttributesToVariationAttributeConnection
    "Product description"
    description(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The desired slug of the post"
    desiredSlug: String
    "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editingLockedBy: ContentNodeToEditLockConnectionEdge
    "The RSS enclosure for the object"
    enclosure: String
    "Connection between the ContentNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedScriptConnection
    "Connection between the ContentNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedStylesheetConnection
    "The excerpt of the post."
    excerpt(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "If the product is featured"
    featured: Boolean
    "Connection between the NodeWithFeaturedImage type and the MediaItem type"
    featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
    "The database identifier for the featured image node assigned to the content node"
    featuredImageDatabaseId: Int
    "Globally unique ID of the featured image assigned to the node"
    featuredImageId: ID
    "Connection between the Product type and the MediaItem type"
    galleryImages(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToMediaItemConnectionWhereArgs
    ): ProductToMediaItemConnection
    "Connection between the Product type and the GlobalProductAttribute type"
    globalAttributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductToGlobalProductAttributeConnection
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "Whether the product object is password protected."
    hasPassword: Boolean
    "Product or variation global ID"
    id: ID!
    "Main image"
    image: MediaItem
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The user that most recently edited the node"
    lastEditedBy: ContentNodeToEditLastConnectionEdge
    "The permalink of the post"
    link: String
    "Connection between the Product type and the LocalProductAttribute type"
    localAttributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductToLocalProductAttributeConnection
    "Menu order"
    menuOrder: Int
    "Object meta data"
    metaData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String],
        "Retrieve meta with matching keys"
        multiple: Boolean
    ): [MetaData]
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "Product name"
    name: String
    "Is product on sale?"
    onSale: Boolean
    "The parent of the content node."
    parent(
        "Arguments for filtering the connection"
        where: ProductToParentConnectionWhereArgs
    ): ProductToParentConnectionEdge @deprecated(reason: "This content type is not hierarchical and typically will not have a parent")
    "The password for the product object."
    password: String
    "Connection between the Product type and the Product type"
    preview(
        "Arguments for filtering the connection"
        where: ProductToPreviewConnectionWhereArgs
    ): ProductToPreviewConnectionEdge
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
    "Products&#039; price range"
    price(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Connection between the Product type and the productCategory type"
    productCategories(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductCategoryConnectionWhereArgs
    ): ProductToProductCategoryConnection
    "The id field matches the WP_Post-&gt;ID field."
    productId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
    "Connection between the Product type and the productTag type"
    productTags(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductTagConnectionWhereArgs
    ): ProductToProductTagConnection
    "Connection between the Product type and the productType type"
    productTypes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductTypeConnectionWhereArgs
    ): ProductToProductTypeConnection
    "Connection between the GroupProduct type and the ProductUnion type"
    products(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: GroupProductToProductUnionConnectionWhereArgs
    ): GroupProductToProductUnionConnection
    "Can product be purchased?"
    purchasable: Boolean
    "Purchase note"
    purchaseNote: String
    "Product&#039;s regular price"
    regularPrice(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Connection between the Product type and the ProductUnion type"
    related(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductUnionConnectionWhereArgs
    ): ProductToProductUnionConnection
    "Product review count"
    reviewCount: Int
    "Connection between the Product type and the Comment type"
    reviews(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToCommentConnectionWhereArgs
    ): ProductToCommentConnection
    "If reviews are allowed"
    reviewsAllowed: Boolean
    "Product&#039;s sale price"
    salePrice(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Connection between the Product type and the shippingClass type"
    shippingClasses(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToShippingClassConnectionWhereArgs
    ): ProductToShippingClassConnection
    "Product short description"
    shortDescription(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Product SKU"
    sku: String
    "Product slug"
    slug: String
    "The current status of the object"
    status: String
    "Tax class"
    taxClass: TaxClassEnum
    "Tax status"
    taxStatus: TaxStatusEnum
    "The template assigned to the node"
    template: ContentTemplate
    "Connection between the Product type and the TermNode type"
    terms(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToTermNodeConnectionWhereArgs
    ): ProductToTermNodeConnection
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Number total of sales"
    totalSales: Int
    "Product type"
    type: ProductTypesEnum
    "Connection between the Product type and the ProductUnion type"
    upsell(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToUpsellConnectionWhereArgs
    ): ProductToUpsellConnection
    "The unique resource identifier path"
    uri: String
    "Connection between the Product type and the visibleProduct type"
    visibleProducts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToVisibleProductConnectionWhereArgs
    ): ProductToVisibleProductConnection
}

"Connection between the GroupProduct type and the ProductUnion type"
type GroupProductToProductUnionConnection implements Connection & ProductUnionConnection {
    "Edges for the GroupProductToProductUnionConnection connection"
    edges: [GroupProductToProductUnionConnectionEdge!]!
    "Total products founds"
    found: Int
    "The nodes of the connection, without the edges"
    nodes: [ProductUnion!]!
    "Information about pagination in a connection."
    pageInfo: GroupProductToProductUnionConnectionPageInfo!
}

"An edge in a connection"
type GroupProductToProductUnionConnectionEdge implements Edge & ProductUnionConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductUnion!
}

"Page Info on the &quot;GroupProductToProductUnionConnection&quot;"
type GroupProductToProductUnionConnectionPageInfo implements PageInfo & ProductUnionConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the HierarchicalContentNode type and the ContentNode type"
type HierarchicalContentNodeToContentNodeAncestorsConnection implements Connection & ContentNodeConnection {
    "Edges for the HierarchicalContentNodeToContentNodeAncestorsConnection connection"
    edges: [HierarchicalContentNodeToContentNodeAncestorsConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo!
}

"An edge in a connection"
type HierarchicalContentNodeToContentNodeAncestorsConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;HierarchicalContentNodeToContentNodeAncestorsConnection&quot;"
type HierarchicalContentNodeToContentNodeAncestorsConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the HierarchicalContentNode type and the ContentNode type"
type HierarchicalContentNodeToContentNodeChildrenConnection implements Connection & ContentNodeConnection {
    "Edges for the HierarchicalContentNodeToContentNodeChildrenConnection connection"
    edges: [HierarchicalContentNodeToContentNodeChildrenConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo!
}

"An edge in a connection"
type HierarchicalContentNodeToContentNodeChildrenConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;HierarchicalContentNodeToContentNodeChildrenConnection&quot;"
type HierarchicalContentNodeToContentNodeChildrenConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the HierarchicalContentNode type and the ContentNode type"
type HierarchicalContentNodeToParentContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: ContentNode!
}

"a line item object"
type LineItem implements Node {
    "The ID of the order item in the database"
    databaseId: Int
    "The ID of the order item in the database"
    id: ID!
    "Line item&#039;s taxes"
    itemDownloads: [ProductDownload]
    "Object meta data"
    metaData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String],
        "Retrieve meta with matching keys"
        multiple: Boolean
    ): [MetaData]
    "The Id of the order the order item belongs to."
    orderId: Int
    "Connection between the LineItem type and the Product type"
    product(
        "Arguments for filtering the connection"
        where: LineItemToProductConnectionWhereArgs
    ): LineItemToProductConnectionEdge
    "Line item&#039;s product ID"
    productId: Int
    "Line item&#039;s product quantity"
    quantity: Int
    "Line item&#039;s subtotal"
    subtotal: String
    "Line item&#039;s subtotal tax"
    subtotalTax: String
    "Line item&#039;s tax class"
    taxClass: TaxClassEnum
    "Line item&#039;s taxes"
    taxStatus: TaxStatusEnum
    "Line item&#039;s taxes"
    taxes: [OrderItemTax]
    "Line item&#039;s total"
    total: String
    "Line item&#039;s total tax"
    totalTax: String
    "Connection between the LineItem type and the ProductVariation type"
    variation: LineItemToProductVariationConnectionEdge
    "Line item&#039;s product variation ID"
    variationId: Int
}

"Connection between the LineItem type and the Product type"
type LineItemToProductConnectionEdge implements Edge & OneToOneConnection & ProductConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Product!
}

"Connection between the LineItem type and the ProductVariation type"
type LineItemToProductVariationConnectionEdge implements Edge & OneToOneConnection & ProductVariationConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: ProductVariation!
}

"A product attribute object"
type LocalProductAttribute implements Node & ProductAttribute {
    "Attribute ID"
    attributeId: Int!
    "Attribute Global ID"
    id: ID!
    "Attribute label"
    label: String
    "Attribute name"
    name: String
    "Attribute options"
    options: [String]
    "Attribute position"
    position: Int
    "Product attribute scope."
    scope: ProductAttributeTypesEnum!
    "Is attribute on product variation"
    variation: Boolean
    "Is attribute visible"
    visible: Boolean
}

"The payload for the loginWithCookies mutation."
type LoginWithCookiesPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Login operation status"
    status: String
}

"The payload for the logout mutation."
type LogoutPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Logout operation status"
    status: String
}

"File details for a Media Item"
type MediaDetails {
    "The filename of the mediaItem"
    file: String
    "The height of the mediaItem"
    height: Int
    "Meta information associated with the mediaItem"
    meta: MediaItemMeta
    "The available sizes of the mediaItem"
    sizes(
        "The sizes to exclude. Will take precedence over `include`."
        exclude: [MediaItemSizeEnum],
        "The sizes to include. Can be overridden by `exclude`."
        include: [MediaItemSizeEnum]
    ): [MediaSize]
    "The width of the mediaItem"
    width: Int
}

"The mediaItem type"
type MediaItem implements ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & Node & NodeWithAuthor & NodeWithComments & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
    "Alternative text to display when resource is not displayed"
    altText: String
    "Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
    ancestors(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
    ): HierarchicalContentNodeToContentNodeAncestorsConnection
    "Connection between the NodeWithAuthor type and the User type"
    author: NodeWithAuthorToUserConnectionEdge
    "The database identifier of the author of the node"
    authorDatabaseId: Int
    "The globally unique identifier of the author of the node"
    authorId: ID
    "The caption for the resource"
    caption(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Connection between the HierarchicalContentNode type and the ContentNode type"
    children(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
    ): HierarchicalContentNodeToContentNodeChildrenConnection
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "Connection between the MediaItem type and the Comment type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: MediaItemToCommentConnectionWhereArgs
    ): MediaItemToCommentConnection
    "Connection between the ContentNode type and the ContentType type"
    contentType: ContentNodeToContentTypeConnectionEdge
    "The name of the Content Type the node belongs to"
    contentTypeName: String!
    "The unique identifier stored in the database"
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "Description of the image (stored as post_content)"
    description(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The desired slug of the post"
    desiredSlug: String
    "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editingLockedBy: ContentNodeToEditLockConnectionEdge
    "The RSS enclosure for the object"
    enclosure: String
    "Connection between the ContentNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedScriptConnection
    "Connection between the ContentNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedStylesheetConnection
    "The filesize in bytes of the resource"
    fileSize(
        "Size of the MediaItem to return"
        size: MediaItemSizeEnum
    ): Int
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "Whether the attachment object is password protected."
    hasPassword: Boolean
    "The globally unique identifier of the attachment object."
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The user that most recently edited the node"
    lastEditedBy: ContentNodeToEditLastConnectionEdge
    "The permalink of the post"
    link: String
    "Details about the mediaItem"
    mediaDetails: MediaDetails
    "The id field matches the WP_Post-&gt;ID field."
    mediaItemId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
    "Url of the mediaItem"
    mediaItemUrl: String
    "Type of resource"
    mediaType: String
    "The mime type of the mediaItem"
    mimeType: String
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "The parent of the node. The parent object can be of various types"
    parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
    "Database id of the parent node"
    parentDatabaseId: Int
    "The globally unique identifier of the parent node."
    parentId: ID
    "The password for the attachment object."
    password: String
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
    "The sizes attribute value for an image."
    sizes(
        "Size of the MediaItem to calculate sizes with"
        size: MediaItemSizeEnum
    ): String
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "Url of the mediaItem"
    sourceUrl(
        "Size of the MediaItem to return"
        size: MediaItemSizeEnum
    ): String
    "The srcset attribute specifies the URL of the image to use in different situations. It is a comma separated string of urls and their widths."
    srcSet(
        "Size of the MediaItem to calculate srcSet with"
        size: MediaItemSizeEnum
    ): String
    "The current status of the object"
    status: String
    "The template assigned to a node of content"
    template: ContentTemplate
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The unique resource identifier path"
    uri: String
}

"Meta connected to a MediaItem"
type MediaItemMeta {
    "Aperture measurement of the media item."
    aperture: Float
    "Information about the camera used to create the media item."
    camera: String
    "The text string description associated with the media item."
    caption: String
    "Copyright information associated with the media item."
    copyright: String
    "The date/time when the media was created."
    createdTimestamp: Int
    "The original creator of the media item."
    credit: String
    "The focal length value of the media item."
    focalLength: Float
    "The ISO (International Organization for Standardization) value of the media item."
    iso: Int
    "List of keywords used to describe or identfy the media item."
    keywords: [String]
    "The vertical or horizontal aspect of the media item."
    orientation: String
    "The shutter speed information of the media item."
    shutterSpeed: Float
    "A useful title for the media item."
    title: String
}

"Connection between the MediaItem type and the Comment type"
type MediaItemToCommentConnection implements CommentConnection & Connection {
    "Edges for the MediaItemToCommentConnection connection"
    edges: [MediaItemToCommentConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Comment!]!
    "Information about pagination in a connection."
    pageInfo: MediaItemToCommentConnectionPageInfo!
}

"An edge in a connection"
type MediaItemToCommentConnectionEdge implements CommentConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment!
}

"Page Info on the &quot;MediaItemToCommentConnection&quot;"
type MediaItemToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Details of an available size for a media item"
type MediaSize {
    "The filename of the referenced size"
    file: String
    "The filesize of the resource"
    fileSize: Int
    "The height of the referenced size"
    height: String
    "The mime type of the referenced size"
    mimeType: String
    "The referenced size name"
    name: String
    "The url of the referenced size"
    sourceUrl: String
    "The width of the referenced size"
    width: String
}

"Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme."
type Menu implements DatabaseIdentifier & Node {
    "The number of items in the menu"
    count: Int
    "The unique identifier stored in the database"
    databaseId: Int!
    "The globally unique identifier of the nav menu object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The locations a menu is assigned to"
    locations: [MenuLocationEnum]
    "WP ID of the nav menu."
    menuId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")
    "Connection between the Menu type and the MenuItem type"
    menuItems(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: MenuToMenuItemConnectionWhereArgs
    ): MenuToMenuItemConnection
    "Display name of the menu. Equivalent to WP_Term-&gt;name."
    name: String
    "The url friendly name of the menu. Equivalent to WP_Term-&gt;slug"
    slug: String
}

"Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu."
type MenuItem implements DatabaseIdentifier & Node {
    "Connection between the MenuItem type and the MenuItem type"
    childItems(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: MenuItemToMenuItemConnectionWhereArgs
    ): MenuItemToMenuItemConnection
    "Connection from MenuItem to it&#039;s connected node"
    connectedNode: MenuItemToMenuItemLinkableConnectionEdge
    "The object connected to this menu item."
    connectedObject: MenuItemObjectUnion @deprecated(reason: "Deprecated in favor of the connectedNode field")
    "Class attribute for the menu item link"
    cssClasses: [String]
    "The unique identifier stored in the database"
    databaseId: Int!
    "Description of the menu item."
    description: String
    "The globally unique identifier of the nav menu item object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Label or title of the menu item."
    label: String
    "Link relationship (XFN) of the menu item."
    linkRelationship: String
    "The locations the menu item&#039;s Menu is assigned to"
    locations: [MenuLocationEnum]
    "The Menu a MenuItem is part of"
    menu: MenuItemToMenuConnectionEdge
    "WP ID of the menu item."
    menuItemId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")
    "Menu item order"
    order: Int
    "The database id of the parent menu item or null if it is the root"
    parentDatabaseId: Int
    "The globally unique identifier of the parent nav menu item object."
    parentId: ID
    "Path for the resource. Relative path for internal resources. Absolute path for external resources."
    path: String
    "Target attribute for the menu item link."
    target: String
    "Title attribute for the menu item link"
    title: String
    "The uri of the resource the menu item links to"
    uri: String
    "URL or destination of the menu item."
    url: String
}

"Connection between the MenuItem type and the Menu type"
type MenuItemToMenuConnectionEdge implements Edge & MenuConnectionEdge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Menu!
}

"Connection between the MenuItem type and the MenuItem type"
type MenuItemToMenuItemConnection implements Connection & MenuItemConnection {
    "Edges for the MenuItemToMenuItemConnection connection"
    edges: [MenuItemToMenuItemConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [MenuItem!]!
    "Information about pagination in a connection."
    pageInfo: MenuItemToMenuItemConnectionPageInfo!
}

"An edge in a connection"
type MenuItemToMenuItemConnectionEdge implements Edge & MenuItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: MenuItem!
}

"Page Info on the &quot;MenuItemToMenuItemConnection&quot;"
type MenuItemToMenuItemConnectionPageInfo implements MenuItemConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the MenuItem type and the MenuItemLinkable type"
type MenuItemToMenuItemLinkableConnectionEdge implements Edge & MenuItemLinkableConnectionEdge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: MenuItemLinkable!
}

"Connection between the Menu type and the MenuItem type"
type MenuToMenuItemConnection implements Connection & MenuItemConnection {
    "Edges for the MenuToMenuItemConnection connection"
    edges: [MenuToMenuItemConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [MenuItem!]!
    "Information about pagination in a connection."
    pageInfo: MenuToMenuItemConnectionPageInfo!
}

"An edge in a connection"
type MenuToMenuItemConnectionEdge implements Edge & MenuItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: MenuItem!
}

"Page Info on the &quot;MenuToMenuItemConnection&quot;"
type MenuToMenuItemConnectionPageInfo implements MenuItemConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Extra data defined on the WC object"
type MetaData {
    "Meta ID."
    id: ID
    "Meta key."
    key: String!
    "Meta value."
    value: String
}

"Connection between the NodeWithAuthor type and the User type"
type NodeWithAuthorToUserConnectionEdge implements Edge & OneToOneConnection & UserConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: User!
}

"Connection between the NodeWithFeaturedImage type and the MediaItem type"
type NodeWithFeaturedImageToMediaItemConnectionEdge implements Edge & MediaItemConnectionEdge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: MediaItem!
}

"Connection between the NodeWithRevisions type and the ContentNode type"
type NodeWithRevisionsToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge & OneToOneConnection {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: ContentNode!
}

"A order object"
type Order implements Node & NodeWithComments {
    "Order billing properties"
    billing: CustomerAddress
    "Cart hash"
    cartHash: String
    "Cart tax amount"
    cartTax(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "Connection between the Order type and the CouponLine type"
    couponLines(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): OrderToCouponLineConnection
    "How order was created"
    createdVia: String
    "Order currency"
    currency: String
    "Order customer"
    customer: Customer
    "Customer IP Address"
    customerIpAddress: String
    "Customer note"
    customerNote: String
    "Customer User Agent"
    customerUserAgent: String
    "The ID of the order in the database"
    databaseId: Int
    "Date order was created"
    date: String
    "Date order was completed"
    dateCompleted: String
    "Date order was paid"
    datePaid: String
    "Discount tax amount"
    discountTax(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Discount total amount"
    discountTotal(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Connection between the Order type and the DownloadableItem type"
    downloadableItems(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: OrderToDownloadableItemConnectionWhereArgs
    ): OrderToDownloadableItemConnection
    "Connection between the Order type and the FeeLine type"
    feeLines(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): OrderToFeeLineConnection
    "Order has a billing address?"
    hasBillingAddress: Boolean
    "If order contains a downloadable product"
    hasDownloadableItem: Boolean
    "Order has a shipping address?"
    hasShippingAddress: Boolean
    "The globally unique identifier for the order"
    id: ID!
    "Is product download is permitted"
    isDownloadPermitted: Boolean
    "Connection between the Order type and the LineItem type"
    lineItems(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): OrderToLineItemConnection
    "Object meta data"
    metaData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String],
        "Retrieve meta with matching keys"
        multiple: Boolean
    ): [MetaData]
    "Date order was last updated"
    modified: String
    "If order needs payment"
    needsPayment: Boolean
    "If order needs processing before it can be completed"
    needsProcessing: Boolean
    "If order needs shipping address"
    needsShippingAddress: Boolean
    "Order key"
    orderKey: String
    "Connection between the Order type and the Comment type"
    orderNotes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: OrderToCommentConnectionWhereArgs
    ): OrderToCommentConnection
    "Order number"
    orderNumber: String
    "Order version"
    orderVersion: String
    "Parent order"
    parent: Order
    "Payment method"
    paymentMethod: String
    "Payment method title"
    paymentMethodTitle: String
    "Prices include taxes?"
    pricesIncludeTax: Boolean
    "Connection between the Order type and the Refund type"
    refunds(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: OrderToRefundConnectionWhereArgs
    ): OrderToRefundConnection
    "Order shipping properties"
    shipping: CustomerAddress
    "Order customer"
    shippingAddressMapUrl: String
    "Connection between the Order type and the ShippingLine type"
    shippingLines(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): OrderToShippingLineConnection
    "Shipping tax amount"
    shippingTax(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Shipping total amount"
    shippingTotal(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Order status"
    status: OrderStatusEnum
    "Order subtotal"
    subtotal(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Connection between the Order type and the TaxLine type"
    taxLines(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): OrderToTaxLineConnection
    "Order grand total"
    total(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Order taxes"
    totalTax(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Transaction ID"
    transactionId: String
}

"Order item tax statement"
type OrderItemTax {
    "Amount taxed"
    amount: Float
    "Subtotal"
    subtotal: Float
    "Tax line connected to this statement"
    taxLine: TaxLine
    "Order item ID for tax line connected to this statement"
    taxLineId: Int!
    "Total"
    total: Float
}

"Connection between the Order type and the Comment type"
type OrderToCommentConnection implements CommentConnection & Connection {
    "Edges for the OrderToCommentConnection connection"
    edges: [OrderToCommentConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Comment!]!
    "Information about pagination in a connection."
    pageInfo: OrderToCommentConnectionPageInfo!
}

"An edge in a connection"
type OrderToCommentConnectionEdge implements CommentConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "Is this a customer note?"
    isCustomerNote: Boolean
    "The item at the end of the edge"
    node: Comment!
}

"Page Info on the &quot;OrderToCommentConnection&quot;"
type OrderToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Order type and the CouponLine type"
type OrderToCouponLineConnection implements Connection & CouponLineConnection {
    "Edges for the OrderToCouponLineConnection connection"
    edges: [OrderToCouponLineConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [CouponLine!]!
    "Information about pagination in a connection."
    pageInfo: OrderToCouponLineConnectionPageInfo!
}

"An edge in a connection"
type OrderToCouponLineConnectionEdge implements CouponLineConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: CouponLine!
}

"Page Info on the &quot;OrderToCouponLineConnection&quot;"
type OrderToCouponLineConnectionPageInfo implements CouponLineConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Order type and the DownloadableItem type"
type OrderToDownloadableItemConnection implements Connection & DownloadableItemConnection {
    "Edges for the OrderToDownloadableItemConnection connection"
    edges: [OrderToDownloadableItemConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [DownloadableItem!]!
    "Information about pagination in a connection."
    pageInfo: OrderToDownloadableItemConnectionPageInfo!
}

"An edge in a connection"
type OrderToDownloadableItemConnectionEdge implements DownloadableItemConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: DownloadableItem!
}

"Page Info on the &quot;OrderToDownloadableItemConnection&quot;"
type OrderToDownloadableItemConnectionPageInfo implements DownloadableItemConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Order type and the FeeLine type"
type OrderToFeeLineConnection implements Connection & FeeLineConnection {
    "Edges for the OrderToFeeLineConnection connection"
    edges: [OrderToFeeLineConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [FeeLine!]!
    "Information about pagination in a connection."
    pageInfo: OrderToFeeLineConnectionPageInfo!
}

"An edge in a connection"
type OrderToFeeLineConnectionEdge implements Edge & FeeLineConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: FeeLine!
}

"Page Info on the &quot;OrderToFeeLineConnection&quot;"
type OrderToFeeLineConnectionPageInfo implements FeeLineConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Order type and the LineItem type"
type OrderToLineItemConnection implements Connection & LineItemConnection {
    "Edges for the OrderToLineItemConnection connection"
    edges: [OrderToLineItemConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [LineItem!]!
    "Information about pagination in a connection."
    pageInfo: OrderToLineItemConnectionPageInfo!
}

"An edge in a connection"
type OrderToLineItemConnectionEdge implements Edge & LineItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: LineItem!
}

"Page Info on the &quot;OrderToLineItemConnection&quot;"
type OrderToLineItemConnectionPageInfo implements LineItemConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Order type and the Refund type"
type OrderToRefundConnection implements Connection & RefundConnection {
    "Edges for the OrderToRefundConnection connection"
    edges: [OrderToRefundConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Refund!]!
    "Information about pagination in a connection."
    pageInfo: OrderToRefundConnectionPageInfo!
}

"An edge in a connection"
type OrderToRefundConnectionEdge implements Edge & RefundConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Refund!
}

"Page Info on the &quot;OrderToRefundConnection&quot;"
type OrderToRefundConnectionPageInfo implements PageInfo & RefundConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Order type and the ShippingLine type"
type OrderToShippingLineConnection implements Connection & ShippingLineConnection {
    "Edges for the OrderToShippingLineConnection connection"
    edges: [OrderToShippingLineConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ShippingLine!]!
    "Information about pagination in a connection."
    pageInfo: OrderToShippingLineConnectionPageInfo!
}

"An edge in a connection"
type OrderToShippingLineConnectionEdge implements Edge & ShippingLineConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ShippingLine!
}

"Page Info on the &quot;OrderToShippingLineConnection&quot;"
type OrderToShippingLineConnectionPageInfo implements PageInfo & ShippingLineConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Order type and the TaxLine type"
type OrderToTaxLineConnection implements Connection & TaxLineConnection {
    "Edges for the OrderToTaxLineConnection connection"
    edges: [OrderToTaxLineConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [TaxLine!]!
    "Information about pagination in a connection."
    pageInfo: OrderToTaxLineConnectionPageInfo!
}

"An edge in a connection"
type OrderToTaxLineConnectionEdge implements Edge & TaxLineConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: TaxLine!
}

"Page Info on the &quot;OrderToTaxLineConnection&quot;"
type OrderToTaxLineConnectionPageInfo implements PageInfo & TaxLineConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"The paTest type"
type PaTest implements DatabaseIdentifier & Node & TermNode & UniformResourceIdentifiable {
    "Connection between the PaTest type and the ContentNode type"
    contentNodes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PaTestToContentNodeConnectionWhereArgs
    ): PaTestToContentNodeConnection
    "The number of objects connected to the object"
    count: Int
    "The unique identifier stored in the database"
    databaseId: Int!
    "The description of the object"
    description: String
    "Connection between the TermNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedScriptConnection
    "Connection between the TermNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedStylesheetConnection
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "The id field matches the WP_Post-&gt;ID field."
    paTestId: Int @deprecated(reason: "Deprecated in favor of databaseId")
    "Connection between the PaTest type and the Product type"
    products(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PaTestToProductConnectionWhereArgs
    ): PaTestToProductConnection
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "Connection between the PaTest type and the Taxonomy type"
    taxonomy: PaTestToTaxonomyConnectionEdge
    "The name of the taxonomy that the object is associated with"
    taxonomyName: String
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String
    "Connection between the PaTest type and the ProductVariation type"
    variations(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PaTestToProductVariationConnectionWhereArgs
    ): PaTestToProductVariationConnection
}

"Connection between the PaTest type and the ContentNode type"
type PaTestToContentNodeConnection implements Connection & ContentNodeConnection {
    "Edges for the PaTestToContentNodeConnection connection"
    edges: [PaTestToContentNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: PaTestToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type PaTestToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;PaTestToContentNodeConnection&quot;"
type PaTestToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the PaTest type and the Product type"
type PaTestToProductConnection implements Connection & ProductConnection {
    "Edges for the PaTestToProductConnection connection"
    edges: [PaTestToProductConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Product!]!
    "Information about pagination in a connection."
    pageInfo: PaTestToProductConnectionPageInfo!
}

"An edge in a connection"
type PaTestToProductConnectionEdge implements Edge & ProductConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Product!
}

"Page Info on the &quot;PaTestToProductConnection&quot;"
type PaTestToProductConnectionPageInfo implements PageInfo & ProductConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the PaTest type and the ProductVariation type"
type PaTestToProductVariationConnection implements Connection & ProductVariationConnection {
    "Edges for the PaTestToProductVariationConnection connection"
    edges: [PaTestToProductVariationConnectionEdge!]!
    "Total products founds"
    found: Int
    "The nodes of the connection, without the edges"
    nodes: [ProductVariation!]!
    "Information about pagination in a connection."
    pageInfo: PaTestToProductVariationConnectionPageInfo!
}

"An edge in a connection"
type PaTestToProductVariationConnectionEdge implements Edge & ProductVariationConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductVariation!
}

"Page Info on the &quot;PaTestToProductVariationConnection&quot;"
type PaTestToProductVariationConnectionPageInfo implements PageInfo & ProductVariationConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the PaTest type and the Taxonomy type"
type PaTestToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Taxonomy!
}

"The page type"
type Page implements ContentNode & DatabaseIdentifier & HierarchicalContentNode & HierarchicalNode & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithPageAttributes & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & Previewable & UniformResourceIdentifiable {
    "Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
    ancestors(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
    ): HierarchicalContentNodeToContentNodeAncestorsConnection
    "Connection between the NodeWithAuthor type and the User type"
    author: NodeWithAuthorToUserConnectionEdge
    "The database identifier of the author of the node"
    authorDatabaseId: Int
    "The globally unique identifier of the author of the node"
    authorId: ID
    "Connection between the HierarchicalContentNode type and the ContentNode type"
    children(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
    ): HierarchicalContentNodeToContentNodeChildrenConnection
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "Connection between the Page type and the Comment type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PageToCommentConnectionWhereArgs
    ): PageToCommentConnection
    "The content of the post."
    content(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Connection between the ContentNode type and the ContentType type"
    contentType: ContentNodeToContentTypeConnectionEdge
    "The name of the Content Type the node belongs to"
    contentTypeName: String!
    "The unique identifier stored in the database"
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "The desired slug of the post"
    desiredSlug: String
    "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editingLockedBy: ContentNodeToEditLockConnectionEdge
    "The RSS enclosure for the object"
    enclosure: String
    "Connection between the ContentNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedScriptConnection
    "Connection between the ContentNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedStylesheetConnection
    "Connection between the NodeWithFeaturedImage type and the MediaItem type"
    featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
    "The database identifier for the featured image node assigned to the content node"
    featuredImageDatabaseId: Int
    "Globally unique ID of the featured image assigned to the node"
    featuredImageId: ID
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "Whether the page object is password protected."
    hasPassword: Boolean
    "The globally unique identifier of the page object."
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether this page is set to the static front page."
    isFrontPage: Boolean!
    "Whether this page is set to the blog posts page."
    isPostsPage: Boolean!
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "Whether this page is set to the privacy page."
    isPrivacyPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "True if the node is a revision of another node"
    isRevision: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The user that most recently edited the node"
    lastEditedBy: ContentNodeToEditLastConnectionEdge
    "The permalink of the post"
    link: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "The id field matches the WP_Post-&gt;ID field."
    pageId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
    "The parent of the node. The parent object can be of various types"
    parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
    "Database id of the parent node"
    parentDatabaseId: Int
    "The globally unique identifier of the parent node."
    parentId: ID
    "The password for the page object."
    password: String
    "Connection between the Page type and the page type"
    preview: PageToPreviewConnectionEdge
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
    "If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node."
    revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
    "Connection between the Page type and the page type"
    revisions(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PageToRevisionConnectionWhereArgs
    ): PageToRevisionConnection
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "The current status of the object"
    status: String
    "The template assigned to a node of content"
    template: ContentTemplate
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The unique resource identifier path"
    uri: String
}

"Connection between the Page type and the Comment type"
type PageToCommentConnection implements CommentConnection & Connection {
    "Edges for the PageToCommentConnection connection"
    edges: [PageToCommentConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Comment!]!
    "Information about pagination in a connection."
    pageInfo: PageToCommentConnectionPageInfo!
}

"An edge in a connection"
type PageToCommentConnectionEdge implements CommentConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment!
}

"Page Info on the &quot;PageToCommentConnection&quot;"
type PageToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Page type and the page type"
type PageToPreviewConnectionEdge implements Edge & OneToOneConnection & PageConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Page!
}

"Connection between the Page type and the page type"
type PageToRevisionConnection implements Connection & PageConnection {
    "Edges for the PageToRevisionConnection connection"
    edges: [PageToRevisionConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Page!]!
    "Information about pagination in a connection."
    pageInfo: PageToRevisionConnectionPageInfo!
}

"An edge in a connection"
type PageToRevisionConnectionEdge implements Edge & PageConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Page!
}

"Page Info on the &quot;PageToRevisionConnection&quot;"
type PageToRevisionConnectionPageInfo implements PageConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"A payment gateway object"
type PaymentGateway implements Node {
    "gateway&#039;s description"
    description: String
    "gateway&#039;s icon"
    icon: String
    "gateway&#039;s title"
    id: ID!
    "gateway&#039;s title"
    title: String
}

type PaymentIntent {
    amount: Int
    clientSecret: String
    currency: String
    error: String
    id: String
    stripePaymentMethod: String
}

"A credit cart payment token"
type PaymentTokenCC implements Node & PaymentToken {
    "Card type (visa, mastercard, etc)"
    cardType: String
    "Card&#039;s expiration month"
    expiryMonth: String
    "Card&#039;s expiration year."
    expiryYear: String
    "Token payment gateway"
    gateway: PaymentGateway
    "Token ID unique identifier"
    id: ID!
    "Is token connected to user&#039;s preferred payment method"
    isDefault: Boolean
    "Last 4 digits of the stored credit card number"
    last4: Int
    "Token database ID."
    tokenId: Int!
    "Token type"
    type: String!
}

"A electronic check payment token"
type PaymentTokenECheck implements Node & PaymentToken {
    "Token payment gateway"
    gateway: PaymentGateway
    "Token ID unique identifier"
    id: ID!
    "Is token connected to user&#039;s preferred payment method"
    isDefault: Boolean
    "Last 4 digits of the stored account number"
    last4: Int
    "Token database ID."
    tokenId: Int!
    "Token type"
    type: String!
}

"An plugin object"
type Plugin implements Node {
    "Name of the plugin author(s), may also be a company name."
    author: String
    "URI for the related author(s)/company website."
    authorUri: String
    "Description of the plugin."
    description: String
    "The globally unique identifier of the plugin object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Display name of the plugin."
    name: String
    "Plugin path."
    path: String
    "URI for the plugin website. This is useful for directing users for support requests etc."
    pluginUri: String
    "Current version of the plugin."
    version: String
}

"The post type"
type Post implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithExcerpt & NodeWithFeaturedImage & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & NodeWithTrackbacks & Previewable & UniformResourceIdentifiable {
    "The ancestors of the content node."
    ancestors(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): PostToPostConnection @deprecated(reason: "This content type is not hierarchical and typically will not have ancestors")
    "Connection between the NodeWithAuthor type and the User type"
    author: NodeWithAuthorToUserConnectionEdge
    "The database identifier of the author of the node"
    authorDatabaseId: Int
    "The globally unique identifier of the author of the node"
    authorId: ID
    "Connection between the Post type and the category type"
    categories(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PostToCategoryConnectionWhereArgs
    ): PostToCategoryConnection
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "Connection between the Post type and the Comment type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PostToCommentConnectionWhereArgs
    ): PostToCommentConnection
    "The content of the post."
    content(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Connection between the ContentNode type and the ContentType type"
    contentType: ContentNodeToContentTypeConnectionEdge
    "The name of the Content Type the node belongs to"
    contentTypeName: String!
    "The unique identifier stored in the database"
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "The desired slug of the post"
    desiredSlug: String
    "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editingLockedBy: ContentNodeToEditLockConnectionEdge
    "The RSS enclosure for the object"
    enclosure: String
    "Connection between the ContentNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedScriptConnection
    "Connection between the ContentNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedStylesheetConnection
    "The excerpt of the post."
    excerpt(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Connection between the NodeWithFeaturedImage type and the MediaItem type"
    featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
    "The database identifier for the featured image node assigned to the content node"
    featuredImageDatabaseId: Int
    "Globally unique ID of the featured image assigned to the node"
    featuredImageId: ID
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "Whether the post object is password protected."
    hasPassword: Boolean
    "The globally unique identifier of the post object."
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "True if the node is a revision of another node"
    isRevision: Boolean
    "Whether this page is sticky"
    isSticky: Boolean!
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The user that most recently edited the node"
    lastEditedBy: ContentNodeToEditLastConnectionEdge
    "The permalink of the post"
    link: String
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "The parent of the content node."
    parent: PostToParentConnectionEdge @deprecated(reason: "This content type is not hierarchical and typically will not have a parent")
    "The password for the post object."
    password: String
    "Whether the pings are open or closed for this particular post."
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "Connection between the Post type and the postFormat type"
    postFormats(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PostToPostFormatConnectionWhereArgs
    ): PostToPostFormatConnection
    "The id field matches the WP_Post-&gt;ID field."
    postId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
    "Connection between the Post type and the post type"
    preview: PostToPreviewConnectionEdge
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
    "If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node."
    revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
    "Connection between the Post type and the post type"
    revisions(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PostToRevisionConnectionWhereArgs
    ): PostToRevisionConnection
    "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
    slug: String
    "The current status of the object"
    status: String
    "Connection between the Post type and the tag type"
    tags(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PostToTagConnectionWhereArgs
    ): PostToTagConnection
    "The template assigned to the node"
    template: ContentTemplate
    "Connection between the Post type and the TermNode type"
    terms(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PostToTermNodeConnectionWhereArgs
    ): PostToTermNodeConnection
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "URLs queued to be pinged."
    toPing: [String]
    "The unique resource identifier path"
    uri: String
}

"The postFormat type"
type PostFormat implements DatabaseIdentifier & Node & TermNode & UniformResourceIdentifiable {
    "Connection between the PostFormat type and the ContentNode type"
    contentNodes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PostFormatToContentNodeConnectionWhereArgs
    ): PostFormatToContentNodeConnection
    "The number of objects connected to the object"
    count: Int
    "The unique identifier stored in the database"
    databaseId: Int!
    "The description of the object"
    description: String
    "Connection between the TermNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedScriptConnection
    "Connection between the TermNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedStylesheetConnection
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "The id field matches the WP_Post-&gt;ID field."
    postFormatId: Int @deprecated(reason: "Deprecated in favor of databaseId")
    "Connection between the PostFormat type and the post type"
    posts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: PostFormatToPostConnectionWhereArgs
    ): PostFormatToPostConnection
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "Connection between the PostFormat type and the Taxonomy type"
    taxonomy: PostFormatToTaxonomyConnectionEdge
    "The name of the taxonomy that the object is associated with"
    taxonomyName: String
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String
}

"Connection between the PostFormat type and the ContentNode type"
type PostFormatToContentNodeConnection implements Connection & ContentNodeConnection {
    "Edges for the PostFormatToContentNodeConnection connection"
    edges: [PostFormatToContentNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: PostFormatToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type PostFormatToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;PostFormatToContentNodeConnection&quot;"
type PostFormatToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the PostFormat type and the post type"
type PostFormatToPostConnection implements Connection & PostConnection {
    "Edges for the PostFormatToPostConnection connection"
    edges: [PostFormatToPostConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Post!]!
    "Information about pagination in a connection."
    pageInfo: PostFormatToPostConnectionPageInfo!
}

"An edge in a connection"
type PostFormatToPostConnectionEdge implements Edge & PostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Post!
}

"Page Info on the &quot;PostFormatToPostConnection&quot;"
type PostFormatToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the PostFormat type and the Taxonomy type"
type PostFormatToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Taxonomy!
}

"Connection between the Post type and the category type"
type PostToCategoryConnection implements CategoryConnection & Connection {
    "Edges for the PostToCategoryConnection connection"
    edges: [PostToCategoryConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Category!]!
    "Information about pagination in a connection."
    pageInfo: PostToCategoryConnectionPageInfo!
}

"An edge in a connection"
type PostToCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Category!
}

"Page Info on the &quot;PostToCategoryConnection&quot;"
type PostToCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Post type and the Comment type"
type PostToCommentConnection implements CommentConnection & Connection {
    "Edges for the PostToCommentConnection connection"
    edges: [PostToCommentConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Comment!]!
    "Information about pagination in a connection."
    pageInfo: PostToCommentConnectionPageInfo!
}

"An edge in a connection"
type PostToCommentConnectionEdge implements CommentConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment!
}

"Page Info on the &quot;PostToCommentConnection&quot;"
type PostToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Post type and the post type"
type PostToParentConnectionEdge implements Edge & OneToOneConnection & PostConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Post! @deprecated(reason: "This content type is not hierarchical and typically will not have a parent")
}

"Connection between the Post type and the post type"
type PostToPostConnection implements Connection & PostConnection {
    "Edges for the PostToPostConnection connection"
    edges: [PostToPostConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Post!]!
    "Information about pagination in a connection."
    pageInfo: PostToPostConnectionPageInfo!
}

"An edge in a connection"
type PostToPostConnectionEdge implements Edge & PostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String @deprecated(reason: "This content type is not hierarchical and typically will not have ancestors")
    "The item at the end of the edge"
    node: Post! @deprecated(reason: "This content type is not hierarchical and typically will not have ancestors")
}

"Page Info on the &quot;PostToPostConnection&quot;"
type PostToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Post type and the postFormat type"
type PostToPostFormatConnection implements Connection & PostFormatConnection {
    "Edges for the PostToPostFormatConnection connection"
    edges: [PostToPostFormatConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [PostFormat!]!
    "Information about pagination in a connection."
    pageInfo: PostToPostFormatConnectionPageInfo!
}

"An edge in a connection"
type PostToPostFormatConnectionEdge implements Edge & PostFormatConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: PostFormat!
}

"Page Info on the &quot;PostToPostFormatConnection&quot;"
type PostToPostFormatConnectionPageInfo implements PageInfo & PostFormatConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Post type and the post type"
type PostToPreviewConnectionEdge implements Edge & OneToOneConnection & PostConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Post!
}

"Connection between the Post type and the post type"
type PostToRevisionConnection implements Connection & PostConnection {
    "Edges for the PostToRevisionConnection connection"
    edges: [PostToRevisionConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Post!]!
    "Information about pagination in a connection."
    pageInfo: PostToRevisionConnectionPageInfo!
}

"An edge in a connection"
type PostToRevisionConnectionEdge implements Edge & PostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Post!
}

"Page Info on the &quot;PostToRevisionConnection&quot;"
type PostToRevisionConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Post type and the tag type"
type PostToTagConnection implements Connection & TagConnection {
    "Edges for the PostToTagConnection connection"
    edges: [PostToTagConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Tag!]!
    "Information about pagination in a connection."
    pageInfo: PostToTagConnectionPageInfo!
}

"An edge in a connection"
type PostToTagConnectionEdge implements Edge & TagConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Tag!
}

"Page Info on the &quot;PostToTagConnection&quot;"
type PostToTagConnectionPageInfo implements PageInfo & TagConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Post type and the TermNode type"
type PostToTermNodeConnection implements Connection & TermNodeConnection {
    "Edges for the PostToTermNodeConnection connection"
    edges: [PostToTermNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [TermNode!]!
    "Information about pagination in a connection."
    pageInfo: PostToTermNodeConnectionPageInfo!
}

"An edge in a connection"
type PostToTermNodeConnectionEdge implements Edge & TermNodeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: TermNode!
}

"Page Info on the &quot;PostToTermNodeConnection&quot;"
type PostToTermNodeConnectionPageInfo implements PageInfo & TermNodeConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Details for labels of the PostType"
type PostTypeLabelDetails {
    "Default is ‘Add New’ for both hierarchical and non-hierarchical types."
    addNew: String
    "Label for adding a new singular item."
    addNewItem: String
    "Label to signify all items in a submenu link."
    allItems: String
    "Label for archives in nav menus"
    archives: String
    "Label for the attributes meta box."
    attributes: String
    "Label for editing a singular item."
    editItem: String
    "Label for the Featured Image meta box title."
    featuredImage: String
    "Label for the table views hidden heading."
    filterItemsList: String
    "Label for the media frame button."
    insertIntoItem: String
    "Label for the table hidden heading."
    itemsList: String
    "Label for the table pagination hidden heading."
    itemsListNavigation: String
    "Label for the menu name."
    menuName: String
    "General name for the post type, usually plural."
    name: String
    "Label for the new item page title."
    newItem: String
    "Label used when no items are found."
    notFound: String
    "Label used when no items are in the trash."
    notFoundInTrash: String
    "Label used to prefix parents of hierarchical items."
    parentItemColon: String
    "Label for removing the featured image."
    removeFeaturedImage: String
    "Label for searching plural items."
    searchItems: String
    "Label for setting the featured image."
    setFeaturedImage: String
    "Name for one object of this post type."
    singularName: String
    "Label for the media frame filter."
    uploadedToThisItem: String
    "Label in the media frame for using a featured image."
    useFeaturedImage: String
    "Label for viewing a singular item."
    viewItem: String
    "Label for viewing post type archives."
    viewItems: String
}

"Price range"
type PriceRange {
    "Maximum price"
    maxPrice(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Minimum price"
    minPrice(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
}

"A simple product attribute object"
type ProductAttributeOutput {
    "Attribute name."
    attributeName: String
    "Attribute value."
    attributeValue: String
}

"The productCategory type"
type ProductCategory implements DatabaseIdentifier & HierarchicalNode & HierarchicalTermNode & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable {
    "The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
    ancestors(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductCategoryToAncestorsProductCategoryConnection
    "Connection between the productCategory type and its children productCategories."
    children(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductCategoryToProductCategoryConnectionWhereArgs
    ): ProductCategoryToProductCategoryConnection
    "Connection between the ProductCategory type and the ContentNode type"
    contentNodes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductCategoryToContentNodeConnectionWhereArgs
    ): ProductCategoryToContentNodeConnection
    "The number of objects connected to the object"
    count: Int
    "The unique identifier stored in the database"
    databaseId: Int!
    "The description of the object"
    description: String
    "Product category display type"
    display: ProductCategoryDisplay
    "Connection between the TermNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedScriptConnection
    "Connection between the TermNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedStylesheetConnection
    "The globally unique ID for the object"
    id: ID!
    "Product category image"
    image: MediaItem
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The link to the term"
    link: String
    "Product category menu order"
    menuOrder: Int
    "The human friendly name of the object."
    name: String
    "Connection between the productCategory type and its parent productCategory."
    parent: ProductCategoryToParentProductCategoryConnectionEdge
    "Database id of the parent node"
    parentDatabaseId: Int
    "The globally unique identifier of the parent node."
    parentId: ID
    "The id field matches the WP_Post-&gt;ID field."
    productCategoryId: Int @deprecated(reason: "Deprecated in favor of databaseId")
    "Connection between the ProductCategory type and the Product type"
    products(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductCategoryToProductConnectionWhereArgs
    ): ProductCategoryToProductConnection
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "Connection between the ProductCategory type and the Taxonomy type"
    taxonomy: ProductCategoryToTaxonomyConnectionEdge
    "The name of the taxonomy that the object is associated with"
    taxonomyName: String
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String
}

"Connection between the ProductCategory type and the productCategory type"
type ProductCategoryToAncestorsProductCategoryConnection implements Connection & ProductCategoryConnection {
    "Edges for the ProductCategoryToAncestorsProductCategoryConnection connection"
    edges: [ProductCategoryToAncestorsProductCategoryConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ProductCategory!]!
    "Information about pagination in a connection."
    pageInfo: ProductCategoryToAncestorsProductCategoryConnectionPageInfo!
}

"An edge in a connection"
type ProductCategoryToAncestorsProductCategoryConnectionEdge implements Edge & ProductCategoryConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductCategory!
}

"Page Info on the &quot;ProductCategoryToAncestorsProductCategoryConnection&quot;"
type ProductCategoryToAncestorsProductCategoryConnectionPageInfo implements PageInfo & ProductCategoryConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the ProductCategory type and the ContentNode type"
type ProductCategoryToContentNodeConnection implements Connection & ContentNodeConnection {
    "Edges for the ProductCategoryToContentNodeConnection connection"
    edges: [ProductCategoryToContentNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: ProductCategoryToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type ProductCategoryToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;ProductCategoryToContentNodeConnection&quot;"
type ProductCategoryToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the ProductCategory type and the productCategory type"
type ProductCategoryToParentProductCategoryConnectionEdge implements Edge & OneToOneConnection & ProductCategoryConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: ProductCategory!
}

"Connection between the ProductCategory type and the productCategory type"
type ProductCategoryToProductCategoryConnection implements Connection & ProductCategoryConnection {
    "Edges for the ProductCategoryToProductCategoryConnection connection"
    edges: [ProductCategoryToProductCategoryConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ProductCategory!]!
    "Information about pagination in a connection."
    pageInfo: ProductCategoryToProductCategoryConnectionPageInfo!
}

"An edge in a connection"
type ProductCategoryToProductCategoryConnectionEdge implements Edge & ProductCategoryConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductCategory!
}

"Page Info on the &quot;ProductCategoryToProductCategoryConnection&quot;"
type ProductCategoryToProductCategoryConnectionPageInfo implements PageInfo & ProductCategoryConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the ProductCategory type and the Product type"
type ProductCategoryToProductConnection implements Connection & ProductConnection {
    "Edges for the ProductCategoryToProductConnection connection"
    edges: [ProductCategoryToProductConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Product!]!
    "Information about pagination in a connection."
    pageInfo: ProductCategoryToProductConnectionPageInfo!
}

"An edge in a connection"
type ProductCategoryToProductConnectionEdge implements Edge & ProductConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Product!
}

"Page Info on the &quot;ProductCategoryToProductConnection&quot;"
type ProductCategoryToProductConnectionPageInfo implements PageInfo & ProductConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the ProductCategory type and the Taxonomy type"
type ProductCategoryToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Taxonomy!
}

"A product object"
type ProductDownload {
    "Is file allowed"
    allowedFileType: Boolean
    "Product download ID"
    downloadId: String!
    "Download file"
    file: String
    "Validate file exists"
    fileExists: Boolean
    "File extension"
    fileExt: String
    "Type of file path set"
    filePathType: String
    "File type"
    fileType: String
    "Product download name"
    name: String
}

"The productTag type"
type ProductTag implements DatabaseIdentifier & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable {
    "Connection between the ProductTag type and the ContentNode type"
    contentNodes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductTagToContentNodeConnectionWhereArgs
    ): ProductTagToContentNodeConnection
    "The number of objects connected to the object"
    count: Int
    "The unique identifier stored in the database"
    databaseId: Int!
    "The description of the object"
    description: String
    "Connection between the TermNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedScriptConnection
    "Connection between the TermNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedStylesheetConnection
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "The id field matches the WP_Post-&gt;ID field."
    productTagId: Int @deprecated(reason: "Deprecated in favor of databaseId")
    "Connection between the ProductTag type and the Product type"
    products(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductTagToProductConnectionWhereArgs
    ): ProductTagToProductConnection
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "Connection between the ProductTag type and the Taxonomy type"
    taxonomy: ProductTagToTaxonomyConnectionEdge
    "The name of the taxonomy that the object is associated with"
    taxonomyName: String
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String
}

"Connection between the ProductTag type and the ContentNode type"
type ProductTagToContentNodeConnection implements Connection & ContentNodeConnection {
    "Edges for the ProductTagToContentNodeConnection connection"
    edges: [ProductTagToContentNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: ProductTagToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type ProductTagToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;ProductTagToContentNodeConnection&quot;"
type ProductTagToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the ProductTag type and the Product type"
type ProductTagToProductConnection implements Connection & ProductConnection {
    "Edges for the ProductTagToProductConnection connection"
    edges: [ProductTagToProductConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Product!]!
    "Information about pagination in a connection."
    pageInfo: ProductTagToProductConnectionPageInfo!
}

"An edge in a connection"
type ProductTagToProductConnectionEdge implements Edge & ProductConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Product!
}

"Page Info on the &quot;ProductTagToProductConnection&quot;"
type ProductTagToProductConnectionPageInfo implements PageInfo & ProductConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the ProductTag type and the Taxonomy type"
type ProductTagToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Taxonomy!
}

"Connection between the Product type and the Comment type"
type ProductToCommentConnection implements CommentConnection & Connection {
    "Average review rating for this product."
    averageRating: Float
    "Edges for the ProductToCommentConnection connection"
    edges: [ProductToCommentConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Comment!]!
    "Information about pagination in a connection."
    pageInfo: ProductToCommentConnectionPageInfo!
}

"An edge in a connection"
type ProductToCommentConnectionEdge implements CommentConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment!
    "Review rating"
    rating: Float
}

"Page Info on the &quot;ProductToCommentConnection&quot;"
type ProductToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Product type and the Comment type"
type ProductToCommentsConnection implements CommentConnection & Connection {
    "Edges for the ProductToCommentsConnection connection"
    edges: [ProductToCommentsConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Comment!]!
    "Information about pagination in a connection."
    pageInfo: ProductToCommentsConnectionPageInfo!
}

"An edge in a connection"
type ProductToCommentsConnectionEdge implements CommentConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment!
}

"Page Info on the &quot;ProductToCommentsConnection&quot;"
type ProductToCommentsConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Product type and the GlobalProductAttribute type"
type ProductToGlobalProductAttributeConnection implements Connection & GlobalProductAttributeConnection {
    "Edges for the ProductToGlobalProductAttributeConnection connection"
    edges: [ProductToGlobalProductAttributeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [GlobalProductAttribute!]!
    "Information about pagination in a connection."
    pageInfo: ProductToGlobalProductAttributeConnectionPageInfo!
}

"An edge in a connection"
type ProductToGlobalProductAttributeConnectionEdge implements Edge & GlobalProductAttributeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: GlobalProductAttribute!
}

"Page Info on the &quot;ProductToGlobalProductAttributeConnection&quot;"
type ProductToGlobalProductAttributeConnectionPageInfo implements GlobalProductAttributeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Product type and the LocalProductAttribute type"
type ProductToLocalProductAttributeConnection implements Connection & LocalProductAttributeConnection {
    "Edges for the ProductToLocalProductAttributeConnection connection"
    edges: [ProductToLocalProductAttributeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [LocalProductAttribute!]!
    "Information about pagination in a connection."
    pageInfo: ProductToLocalProductAttributeConnectionPageInfo!
}

"An edge in a connection"
type ProductToLocalProductAttributeConnectionEdge implements Edge & LocalProductAttributeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: LocalProductAttribute!
}

"Page Info on the &quot;ProductToLocalProductAttributeConnection&quot;"
type ProductToLocalProductAttributeConnectionPageInfo implements LocalProductAttributeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Product type and the MediaItem type"
type ProductToMediaItemConnection implements Connection & MediaItemConnection {
    "Edges for the ProductToMediaItemConnection connection"
    edges: [ProductToMediaItemConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [MediaItem!]!
    "Information about pagination in a connection."
    pageInfo: ProductToMediaItemConnectionPageInfo!
}

"An edge in a connection"
type ProductToMediaItemConnectionEdge implements Edge & MediaItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: MediaItem!
}

"Page Info on the &quot;ProductToMediaItemConnection&quot;"
type ProductToMediaItemConnectionPageInfo implements MediaItemConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Product type and the paTest type"
type ProductToPaTestConnection implements Connection & PaTestConnection {
    "Edges for the ProductToPaTestConnection connection"
    edges: [ProductToPaTestConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [PaTest!]!
    "Information about pagination in a connection."
    pageInfo: ProductToPaTestConnectionPageInfo!
}

"An edge in a connection"
type ProductToPaTestConnectionEdge implements Edge & PaTestConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: PaTest!
}

"Page Info on the &quot;ProductToPaTestConnection&quot;"
type ProductToPaTestConnectionPageInfo implements PaTestConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Product type and the Product type"
type ProductToParentConnectionEdge implements Edge & OneToOneConnection & ProductConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Product! @deprecated(reason: "This content type is not hierarchical and typically will not have a parent")
}

"Connection between the Product type and the Product type"
type ProductToPreviewConnectionEdge implements Edge & OneToOneConnection & ProductConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Product!
}

"Connection between the Product type and the ProductAttribute type"
type ProductToProductAttributeConnection implements Connection & ProductAttributeConnection {
    "Edges for the ProductToProductAttributeConnection connection"
    edges: [ProductToProductAttributeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ProductAttribute!]!
    "Information about pagination in a connection."
    pageInfo: ProductToProductAttributeConnectionPageInfo!
}

"An edge in a connection"
type ProductToProductAttributeConnectionEdge implements Edge & ProductAttributeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductAttribute!
}

"Page Info on the &quot;ProductToProductAttributeConnection&quot;"
type ProductToProductAttributeConnectionPageInfo implements PageInfo & ProductAttributeConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Product type and the productCategory type"
type ProductToProductCategoryConnection implements Connection & ProductCategoryConnection {
    "Edges for the ProductToProductCategoryConnection connection"
    edges: [ProductToProductCategoryConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ProductCategory!]!
    "Information about pagination in a connection."
    pageInfo: ProductToProductCategoryConnectionPageInfo!
}

"An edge in a connection"
type ProductToProductCategoryConnectionEdge implements Edge & ProductCategoryConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductCategory!
}

"Page Info on the &quot;ProductToProductCategoryConnection&quot;"
type ProductToProductCategoryConnectionPageInfo implements PageInfo & ProductCategoryConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Product type and the Product type"
type ProductToProductConnection implements Connection & ProductConnection {
    "Edges for the ProductToProductConnection connection"
    edges: [ProductToProductConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Product!]!
    "Information about pagination in a connection."
    pageInfo: ProductToProductConnectionPageInfo!
}

"An edge in a connection"
type ProductToProductConnectionEdge implements Edge & ProductConnectionEdge {
    "A cursor for use in pagination"
    cursor: String @deprecated(reason: "This content type is not hierarchical and typically will not have ancestors")
    "The item at the end of the edge"
    node: Product! @deprecated(reason: "This content type is not hierarchical and typically will not have ancestors")
}

"Page Info on the &quot;ProductToProductConnection&quot;"
type ProductToProductConnectionPageInfo implements PageInfo & ProductConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Product type and the productTag type"
type ProductToProductTagConnection implements Connection & ProductTagConnection {
    "Edges for the ProductToProductTagConnection connection"
    edges: [ProductToProductTagConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ProductTag!]!
    "Information about pagination in a connection."
    pageInfo: ProductToProductTagConnectionPageInfo!
}

"An edge in a connection"
type ProductToProductTagConnectionEdge implements Edge & ProductTagConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductTag!
}

"Page Info on the &quot;ProductToProductTagConnection&quot;"
type ProductToProductTagConnectionPageInfo implements PageInfo & ProductTagConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Product type and the productType type"
type ProductToProductTypeConnection implements Connection & ProductTypeConnection {
    "Edges for the ProductToProductTypeConnection connection"
    edges: [ProductToProductTypeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ProductType!]!
    "Information about pagination in a connection."
    pageInfo: ProductToProductTypeConnectionPageInfo!
}

"An edge in a connection"
type ProductToProductTypeConnectionEdge implements Edge & ProductTypeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductType!
}

"Page Info on the &quot;ProductToProductTypeConnection&quot;"
type ProductToProductTypeConnectionPageInfo implements PageInfo & ProductTypeConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Product type and the ProductUnion type"
type ProductToProductUnionConnection implements Connection & ProductUnionConnection {
    "Edges for the ProductToProductUnionConnection connection"
    edges: [ProductToProductUnionConnectionEdge!]!
    "Total products founds"
    found: Int
    "The nodes of the connection, without the edges"
    nodes: [ProductUnion!]!
    "Information about pagination in a connection."
    pageInfo: ProductToProductUnionConnectionPageInfo!
}

"An edge in a connection"
type ProductToProductUnionConnectionEdge implements Edge & ProductUnionConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductUnion!
}

"Page Info on the &quot;ProductToProductUnionConnection&quot;"
type ProductToProductUnionConnectionPageInfo implements PageInfo & ProductUnionConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Product type and the shippingClass type"
type ProductToShippingClassConnection implements Connection & ShippingClassConnection {
    "Edges for the ProductToShippingClassConnection connection"
    edges: [ProductToShippingClassConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ShippingClass!]!
    "Information about pagination in a connection."
    pageInfo: ProductToShippingClassConnectionPageInfo!
}

"An edge in a connection"
type ProductToShippingClassConnectionEdge implements Edge & ShippingClassConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ShippingClass!
}

"Page Info on the &quot;ProductToShippingClassConnection&quot;"
type ProductToShippingClassConnectionPageInfo implements PageInfo & ShippingClassConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Product type and the TermNode type"
type ProductToTermNodeConnection implements Connection & TermNodeConnection {
    "Edges for the ProductToTermNodeConnection connection"
    edges: [ProductToTermNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [TermNode!]!
    "Information about pagination in a connection."
    pageInfo: ProductToTermNodeConnectionPageInfo!
}

"An edge in a connection"
type ProductToTermNodeConnectionEdge implements Edge & TermNodeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: TermNode!
}

"Page Info on the &quot;ProductToTermNodeConnection&quot;"
type ProductToTermNodeConnectionPageInfo implements PageInfo & TermNodeConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Product type and the ProductUnion type"
type ProductToUpsellConnection implements Connection & ProductUnionConnection {
    "Edges for the ProductToUpsellConnection connection"
    edges: [ProductToUpsellConnectionEdge!]!
    "Total products founds"
    found: Int
    "The nodes of the connection, without the edges"
    nodes: [ProductUnion!]!
    "Information about pagination in a connection."
    pageInfo: ProductToUpsellConnectionPageInfo!
}

"An edge in a connection"
type ProductToUpsellConnectionEdge implements Edge & ProductUnionConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductUnion!
}

"Page Info on the &quot;ProductToUpsellConnection&quot;"
type ProductToUpsellConnectionPageInfo implements PageInfo & ProductUnionConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Product type and the visibleProduct type"
type ProductToVisibleProductConnection implements Connection & VisibleProductConnection {
    "Edges for the ProductToVisibleProductConnection connection"
    edges: [ProductToVisibleProductConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [VisibleProduct!]!
    "Information about pagination in a connection."
    pageInfo: ProductToVisibleProductConnectionPageInfo!
}

"An edge in a connection"
type ProductToVisibleProductConnectionEdge implements Edge & VisibleProductConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: VisibleProduct!
}

"Page Info on the &quot;ProductToVisibleProductConnection&quot;"
type ProductToVisibleProductConnectionPageInfo implements PageInfo & VisibleProductConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"The productType type"
type ProductType implements DatabaseIdentifier & Node & TermNode & UniformResourceIdentifiable {
    "Connection between the ProductType type and the ContentNode type"
    contentNodes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductTypeToContentNodeConnectionWhereArgs
    ): ProductTypeToContentNodeConnection
    "The number of objects connected to the object"
    count: Int
    "The unique identifier stored in the database"
    databaseId: Int!
    "The description of the object"
    description: String
    "Connection between the TermNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedScriptConnection
    "Connection between the TermNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedStylesheetConnection
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "The id field matches the WP_Post-&gt;ID field."
    productTypeId: Int @deprecated(reason: "Deprecated in favor of databaseId")
    "Connection between the ProductType type and the Product type"
    products(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductTypeToProductConnectionWhereArgs
    ): ProductTypeToProductConnection
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "Connection between the ProductType type and the Taxonomy type"
    taxonomy: ProductTypeToTaxonomyConnectionEdge
    "The name of the taxonomy that the object is associated with"
    taxonomyName: String
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String
}

"Connection between the ProductType type and the ContentNode type"
type ProductTypeToContentNodeConnection implements Connection & ContentNodeConnection {
    "Edges for the ProductTypeToContentNodeConnection connection"
    edges: [ProductTypeToContentNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: ProductTypeToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type ProductTypeToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;ProductTypeToContentNodeConnection&quot;"
type ProductTypeToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the ProductType type and the Product type"
type ProductTypeToProductConnection implements Connection & ProductConnection {
    "Edges for the ProductTypeToProductConnection connection"
    edges: [ProductTypeToProductConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Product!]!
    "Information about pagination in a connection."
    pageInfo: ProductTypeToProductConnectionPageInfo!
}

"An edge in a connection"
type ProductTypeToProductConnectionEdge implements Edge & ProductConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Product!
}

"Page Info on the &quot;ProductTypeToProductConnection&quot;"
type ProductTypeToProductConnectionPageInfo implements PageInfo & ProductConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the ProductType type and the Taxonomy type"
type ProductTypeToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Taxonomy!
}

"Connection between the ProductVariation type and the VariableProduct type"
type ProductVariationToVariableProductConnectionEdge implements Edge & OneToOneConnection & VariableProductConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: VariableProduct!
}

"Connection between the ProductVariation type and the VariationAttribute type"
type ProductVariationToVariationAttributeConnection implements Connection & VariationAttributeConnection {
    "Edges for the ProductVariationToVariationAttributeConnection connection"
    edges: [ProductVariationToVariationAttributeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [VariationAttribute!]!
    "Information about pagination in a connection."
    pageInfo: ProductVariationToVariationAttributeConnectionPageInfo!
}

"An edge in a connection"
type ProductVariationToVariationAttributeConnectionEdge implements Edge & VariationAttributeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: VariationAttribute!
}

"Page Info on the &quot;ProductVariationToVariationAttributeConnection&quot;"
type ProductVariationToVariationAttributeConnectionPageInfo implements PageInfo & VariationAttributeConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the ProductWithAttributes type and the VariationAttribute type"
type ProductWithAttributesToVariationAttributeConnection implements Connection & VariationAttributeConnection {
    "Edges for the ProductWithAttributesToVariationAttributeConnection connection"
    edges: [ProductWithAttributesToVariationAttributeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [VariationAttribute!]!
    "Information about pagination in a connection."
    pageInfo: ProductWithAttributesToVariationAttributeConnectionPageInfo!
}

"An edge in a connection"
type ProductWithAttributesToVariationAttributeConnectionEdge implements Edge & VariationAttributeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: VariationAttribute!
}

"Page Info on the &quot;ProductWithAttributesToVariationAttributeConnection&quot;"
type ProductWithAttributesToVariationAttributeConnectionPageInfo implements PageInfo & VariationAttributeConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the ProductWithVariations type and the ProductVariation type"
type ProductWithVariationsToProductVariationConnection implements Connection & ProductVariationConnection {
    "Edges for the ProductWithVariationsToProductVariationConnection connection"
    edges: [ProductWithVariationsToProductVariationConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ProductVariation!]!
    "Information about pagination in a connection."
    pageInfo: ProductWithVariationsToProductVariationConnectionPageInfo!
}

"An edge in a connection"
type ProductWithVariationsToProductVariationConnectionEdge implements Edge & ProductVariationConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductVariation!
}

"Page Info on the &quot;ProductWithVariationsToProductVariationConnection&quot;"
type ProductWithVariationsToProductVariationConnectionPageInfo implements PageInfo & ProductVariationConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Single rating count"
type RatingCount {
    "Number of products"
    count: Int
    "Average rating"
    rating: Int!
}

"The reading setting type"
type ReadingSettings {
    "The ID of the page that should display the latest posts"
    pageForPosts: Int
    "The ID of the page that should be displayed on the front page"
    pageOnFront: Int
    "Blog pages show at most."
    postsPerPage: Int
    "What to show on the front page"
    showOnFront: String
}

"A refund object"
type Refund implements Node {
    "Refunded amount"
    amount: Float
    "The ID of the refund in the database"
    databaseId: Int
    "The date of the refund"
    date: String
    "The globally unique identifier for the refund"
    id: ID!
    "Object meta data"
    metaData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String],
        "Retrieve meta with matching keys"
        multiple: Boolean
    ): [MetaData]
    "Reason for refund"
    reason: String
    "User who completed the refund"
    refundedBy: User
    "A title for the new post type"
    title: String
}

"The payload for the registerCustomer mutation."
type RegisterCustomerPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    customer: Customer
    viewer: User
}

"The payload for the registerUser mutation."
type RegisterUserPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The User object mutation type."
    user: User
}

"The payload for the removeCoupons mutation."
type RemoveCouponsPayload {
    cart: Cart
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
}

"The payload for the removeItemsFromCart mutation."
type RemoveItemsFromCartPayload {
    cart: Cart
    cartItems: [CartItem]
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
}

"The payload for the removeMethodFromShippingZone mutation."
type RemoveMethodFromShippingZonePayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    removedMethod: ShippingZoneToShippingMethodConnectionEdge
    shippingZone: ShippingZone
}

"The payload for the resetUserPassword mutation."
type ResetUserPasswordPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The User object mutation type."
    user: User
}

"The payload for the restoreCartItems mutation."
type RestoreCartItemsPayload {
    cart: Cart
    cartItems: [CartItem]
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
}

"The payload for the restoreComment mutation."
type RestoreCommentPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The restored comment object"
    comment: Comment
    "The ID of the restored comment"
    restoredId: ID
}

"The payload for the restoreReview mutation."
type RestoreReviewPayload {
    "The affected product review ID"
    affectedId: ID
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The product rating of the affected product review"
    rating: Float
    "The affected product review"
    review: Comment
}

"The root mutation"
type RootMutation {
    "The addCartItems mutation"
    addCartItems(
        "Input for the addCartItems mutation"
        input: AddCartItemsInput!
    ): AddCartItemsPayload
    "The addFee mutation"
    addFee(
        "Input for the addFee mutation"
        input: AddFeeInput!
    ): AddFeePayload
    "The addMethodToShippingZone mutation"
    addMethodToShippingZone(
        "Input for the addMethodToShippingZone mutation"
        input: AddMethodToShippingZoneInput!
    ): AddMethodToShippingZonePayload
    "The addToCart mutation"
    addToCart(
        "Input for the addToCart mutation"
        input: AddToCartInput!
    ): AddToCartPayload
    "The applyCoupon mutation"
    applyCoupon(
        "Input for the applyCoupon mutation"
        input: ApplyCouponInput!
    ): ApplyCouponPayload
    "The checkout mutation"
    checkout(
        "Input for the checkout mutation"
        input: CheckoutInput!
    ): CheckoutPayload
    "The clearShippingZoneLocations mutation"
    clearShippingZoneLocations(
        "Input for the clearShippingZoneLocations mutation"
        input: ClearShippingZoneLocationsInput!
    ): ClearShippingZoneLocationsPayload
    "The createCategory mutation"
    createCategory(
        "Input for the createCategory mutation"
        input: CreateCategoryInput!
    ): CreateCategoryPayload
    "The createComment mutation"
    createComment(
        "Input for the createComment mutation"
        input: CreateCommentInput!
    ): CreateCommentPayload
    "The createCoupon mutation"
    createCoupon(
        "Input for the createCoupon mutation"
        input: CreateCouponInput!
    ): CreateCouponPayload
    "The createMediaItem mutation"
    createMediaItem(
        "Input for the createMediaItem mutation"
        input: CreateMediaItemInput!
    ): CreateMediaItemPayload
    "The createOrder mutation"
    createOrder(
        "Input for the createOrder mutation"
        input: CreateOrderInput!
    ): CreateOrderPayload
    "The createPaTest mutation"
    createPaTest(
        "Input for the createPaTest mutation"
        input: CreatePaTestInput!
    ): CreatePaTestPayload
    "The createPage mutation"
    createPage(
        "Input for the createPage mutation"
        input: CreatePageInput!
    ): CreatePagePayload
    "The createPost mutation"
    createPost(
        "Input for the createPost mutation"
        input: CreatePostInput!
    ): CreatePostPayload
    "The createPostFormat mutation"
    createPostFormat(
        "Input for the createPostFormat mutation"
        input: CreatePostFormatInput!
    ): CreatePostFormatPayload
    "The createProduct mutation"
    createProduct(
        "Input for the createProduct mutation"
        input: CreateProductInput!
    ): CreateProductPayload
    "The createProductCategory mutation"
    createProductCategory(
        "Input for the createProductCategory mutation"
        input: CreateProductCategoryInput!
    ): CreateProductCategoryPayload
    "The createProductTag mutation"
    createProductTag(
        "Input for the createProductTag mutation"
        input: CreateProductTagInput!
    ): CreateProductTagPayload
    "The createProductType mutation"
    createProductType(
        "Input for the createProductType mutation"
        input: CreateProductTypeInput!
    ): CreateProductTypePayload
    "The createShippingClass mutation"
    createShippingClass(
        "Input for the createShippingClass mutation"
        input: CreateShippingClassInput!
    ): CreateShippingClassPayload
    "The createShippingZone mutation"
    createShippingZone(
        "Input for the createShippingZone mutation"
        input: CreateShippingZoneInput!
    ): CreateShippingZonePayload
    "The createTag mutation"
    createTag(
        "Input for the createTag mutation"
        input: CreateTagInput!
    ): CreateTagPayload
    "The createTaxClass mutation"
    createTaxClass(
        "Input for the createTaxClass mutation"
        input: CreateTaxClassInput!
    ): CreateTaxClassPayload
    "The createTaxRate mutation"
    createTaxRate(
        "Input for the createTaxRate mutation"
        input: CreateTaxRateInput!
    ): CreateTaxRatePayload
    "The createUser mutation"
    createUser(
        "Input for the createUser mutation"
        input: CreateUserInput!
    ): CreateUserPayload
    "The createVisibleProduct mutation"
    createVisibleProduct(
        "Input for the createVisibleProduct mutation"
        input: CreateVisibleProductInput!
    ): CreateVisibleProductPayload
    "The deleteCategory mutation"
    deleteCategory(
        "Input for the deleteCategory mutation"
        input: DeleteCategoryInput!
    ): DeleteCategoryPayload
    "The deleteComment mutation"
    deleteComment(
        "Input for the deleteComment mutation"
        input: DeleteCommentInput!
    ): DeleteCommentPayload
    "The deleteCoupon mutation"
    deleteCoupon(
        "Input for the deleteCoupon mutation"
        input: DeleteCouponInput!
    ): DeleteCouponPayload
    "The deleteMediaItem mutation"
    deleteMediaItem(
        "Input for the deleteMediaItem mutation"
        input: DeleteMediaItemInput!
    ): DeleteMediaItemPayload
    "The deleteOrder mutation"
    deleteOrder(
        "Input for the deleteOrder mutation"
        input: DeleteOrderInput!
    ): DeleteOrderPayload
    "The deleteOrderItems mutation"
    deleteOrderItems(
        "Input for the deleteOrderItems mutation"
        input: DeleteOrderItemsInput!
    ): DeleteOrderItemsPayload
    "The deletePaTest mutation"
    deletePaTest(
        "Input for the deletePaTest mutation"
        input: DeletePaTestInput!
    ): DeletePaTestPayload
    "The deletePage mutation"
    deletePage(
        "Input for the deletePage mutation"
        input: DeletePageInput!
    ): DeletePagePayload
    "The deletePaymentMethod mutation"
    deletePaymentMethod(
        "Input for the deletePaymentMethod mutation"
        input: DeletePaymentMethodInput!
    ): DeletePaymentMethodPayload
    "The deletePost mutation"
    deletePost(
        "Input for the deletePost mutation"
        input: DeletePostInput!
    ): DeletePostPayload
    "The deletePostFormat mutation"
    deletePostFormat(
        "Input for the deletePostFormat mutation"
        input: DeletePostFormatInput!
    ): DeletePostFormatPayload
    "The deleteProduct mutation"
    deleteProduct(
        "Input for the deleteProduct mutation"
        input: DeleteProductInput!
    ): DeleteProductPayload
    "The deleteProductCategory mutation"
    deleteProductCategory(
        "Input for the deleteProductCategory mutation"
        input: DeleteProductCategoryInput!
    ): DeleteProductCategoryPayload
    "The deleteProductTag mutation"
    deleteProductTag(
        "Input for the deleteProductTag mutation"
        input: DeleteProductTagInput!
    ): DeleteProductTagPayload
    "The deleteProductType mutation"
    deleteProductType(
        "Input for the deleteProductType mutation"
        input: DeleteProductTypeInput!
    ): DeleteProductTypePayload
    "The deleteReview mutation"
    deleteReview(
        "Input for the deleteReview mutation"
        input: DeleteReviewInput!
    ): DeleteReviewPayload
    "The deleteShippingClass mutation"
    deleteShippingClass(
        "Input for the deleteShippingClass mutation"
        input: DeleteShippingClassInput!
    ): DeleteShippingClassPayload
    "The deleteShippingZone mutation"
    deleteShippingZone(
        "Input for the deleteShippingZone mutation"
        input: DeleteShippingZoneInput!
    ): DeleteShippingZonePayload
    "The deleteTag mutation"
    deleteTag(
        "Input for the deleteTag mutation"
        input: DeleteTagInput!
    ): DeleteTagPayload
    "The deleteTaxClass mutation"
    deleteTaxClass(
        "Input for the deleteTaxClass mutation"
        input: DeleteTaxClassInput!
    ): DeleteTaxClassPayload
    "The deleteTaxRate mutation"
    deleteTaxRate(
        "Input for the deleteTaxRate mutation"
        input: DeleteTaxRateInput!
    ): DeleteTaxRatePayload
    "The deleteUser mutation"
    deleteUser(
        "Input for the deleteUser mutation"
        input: DeleteUserInput!
    ): DeleteUserPayload
    "The deleteVisibleProduct mutation"
    deleteVisibleProduct(
        "Input for the deleteVisibleProduct mutation"
        input: DeleteVisibleProductInput!
    ): DeleteVisibleProductPayload
    "The emptyCart mutation"
    emptyCart(
        "Input for the emptyCart mutation"
        input: EmptyCartInput!
    ): EmptyCartPayload
    "The fillCart mutation"
    fillCart(
        "Input for the fillCart mutation"
        input: FillCartInput!
    ): FillCartPayload
    "The forgetSession mutation"
    forgetSession(
        "Input for the forgetSession mutation"
        input: ForgetSessionInput!
    ): ForgetSessionPayload
    "Increase the count."
    increaseCount(
        "The count to increase"
        count: Int
    ): Int
    "The loginWithCookies mutation"
    loginWithCookies(
        "Input for the loginWithCookies mutation"
        input: LoginWithCookiesInput!
    ): LoginWithCookiesPayload
    "The logout mutation"
    logout(
        "Input for the logout mutation"
        input: LogoutInput!
    ): LogoutPayload
    "The registerCustomer mutation"
    registerCustomer(
        "Input for the registerCustomer mutation"
        input: RegisterCustomerInput!
    ): RegisterCustomerPayload
    "The registerUser mutation"
    registerUser(
        "Input for the registerUser mutation"
        input: RegisterUserInput!
    ): RegisterUserPayload
    "The removeCoupons mutation"
    removeCoupons(
        "Input for the removeCoupons mutation"
        input: RemoveCouponsInput!
    ): RemoveCouponsPayload
    "The removeItemsFromCart mutation"
    removeItemsFromCart(
        "Input for the removeItemsFromCart mutation"
        input: RemoveItemsFromCartInput!
    ): RemoveItemsFromCartPayload
    "The removeMethodFromShippingZone mutation"
    removeMethodFromShippingZone(
        "Input for the removeMethodFromShippingZone mutation"
        input: RemoveMethodFromShippingZoneInput!
    ): RemoveMethodFromShippingZonePayload
    "The resetUserPassword mutation"
    resetUserPassword(
        "Input for the resetUserPassword mutation"
        input: ResetUserPasswordInput!
    ): ResetUserPasswordPayload
    "The restoreCartItems mutation"
    restoreCartItems(
        "Input for the restoreCartItems mutation"
        input: RestoreCartItemsInput!
    ): RestoreCartItemsPayload
    "The restoreComment mutation"
    restoreComment(
        "Input for the restoreComment mutation"
        input: RestoreCommentInput!
    ): RestoreCommentPayload
    "The restoreReview mutation"
    restoreReview(
        "Input for the restoreReview mutation"
        input: RestoreReviewInput!
    ): RestoreReviewPayload
    "Send password reset email to user"
    sendPasswordResetEmail(
        "Input for the sendPasswordResetEmail mutation"
        input: SendPasswordResetEmailInput!
    ): SendPasswordResetEmailPayload
    "The setDefaultPaymentMethod mutation"
    setDefaultPaymentMethod(
        "Input for the setDefaultPaymentMethod mutation"
        input: SetDefaultPaymentMethodInput!
    ): SetDefaultPaymentMethodPayload
    "The updateCategory mutation"
    updateCategory(
        "Input for the updateCategory mutation"
        input: UpdateCategoryInput!
    ): UpdateCategoryPayload
    "The updateComment mutation"
    updateComment(
        "Input for the updateComment mutation"
        input: UpdateCommentInput!
    ): UpdateCommentPayload
    "The updateCoupon mutation"
    updateCoupon(
        "Input for the updateCoupon mutation"
        input: UpdateCouponInput!
    ): UpdateCouponPayload
    "The updateCustomer mutation"
    updateCustomer(
        "Input for the updateCustomer mutation"
        input: UpdateCustomerInput!
    ): UpdateCustomerPayload
    "The updateItemQuantities mutation"
    updateItemQuantities(
        "Input for the updateItemQuantities mutation"
        input: UpdateItemQuantitiesInput!
    ): UpdateItemQuantitiesPayload
    "The updateMediaItem mutation"
    updateMediaItem(
        "Input for the updateMediaItem mutation"
        input: UpdateMediaItemInput!
    ): UpdateMediaItemPayload
    "The updateMethodOnShippingZone mutation"
    updateMethodOnShippingZone(
        "Input for the updateMethodOnShippingZone mutation"
        input: UpdateMethodOnShippingZoneInput!
    ): UpdateMethodOnShippingZonePayload
    "The updateOrder mutation"
    updateOrder(
        "Input for the updateOrder mutation"
        input: UpdateOrderInput!
    ): UpdateOrderPayload
    "The updatePaTest mutation"
    updatePaTest(
        "Input for the updatePaTest mutation"
        input: UpdatePaTestInput!
    ): UpdatePaTestPayload
    "The updatePage mutation"
    updatePage(
        "Input for the updatePage mutation"
        input: UpdatePageInput!
    ): UpdatePagePayload
    "The updatePost mutation"
    updatePost(
        "Input for the updatePost mutation"
        input: UpdatePostInput!
    ): UpdatePostPayload
    "The updatePostFormat mutation"
    updatePostFormat(
        "Input for the updatePostFormat mutation"
        input: UpdatePostFormatInput!
    ): UpdatePostFormatPayload
    "The updateProduct mutation"
    updateProduct(
        "Input for the updateProduct mutation"
        input: UpdateProductInput!
    ): UpdateProductPayload
    "The updateProductCategory mutation"
    updateProductCategory(
        "Input for the updateProductCategory mutation"
        input: UpdateProductCategoryInput!
    ): UpdateProductCategoryPayload
    "The updateProductTag mutation"
    updateProductTag(
        "Input for the updateProductTag mutation"
        input: UpdateProductTagInput!
    ): UpdateProductTagPayload
    "The updateProductType mutation"
    updateProductType(
        "Input for the updateProductType mutation"
        input: UpdateProductTypeInput!
    ): UpdateProductTypePayload
    "The updateReview mutation"
    updateReview(
        "Input for the updateReview mutation"
        input: UpdateReviewInput!
    ): UpdateReviewPayload
    "The updateSession mutation"
    updateSession(
        "Input for the updateSession mutation"
        input: UpdateSessionInput!
    ): UpdateSessionPayload
    "The updateSettings mutation"
    updateSettings(
        "Input for the updateSettings mutation"
        input: UpdateSettingsInput!
    ): UpdateSettingsPayload
    "The updateShippingClass mutation"
    updateShippingClass(
        "Input for the updateShippingClass mutation"
        input: UpdateShippingClassInput!
    ): UpdateShippingClassPayload
    "The updateShippingMethod mutation"
    updateShippingMethod(
        "Input for the updateShippingMethod mutation"
        input: UpdateShippingMethodInput!
    ): UpdateShippingMethodPayload
    "The updateShippingZone mutation"
    updateShippingZone(
        "Input for the updateShippingZone mutation"
        input: UpdateShippingZoneInput!
    ): UpdateShippingZonePayload
    "The updateShippingZoneLocations mutation"
    updateShippingZoneLocations(
        "Input for the updateShippingZoneLocations mutation"
        input: UpdateShippingZoneLocationsInput!
    ): UpdateShippingZoneLocationsPayload
    "The updateTag mutation"
    updateTag(
        "Input for the updateTag mutation"
        input: UpdateTagInput!
    ): UpdateTagPayload
    "The updateTaxRate mutation"
    updateTaxRate(
        "Input for the updateTaxRate mutation"
        input: UpdateTaxRateInput!
    ): UpdateTaxRatePayload
    "The updateUser mutation"
    updateUser(
        "Input for the updateUser mutation"
        input: UpdateUserInput!
    ): UpdateUserPayload
    "The updateVisibleProduct mutation"
    updateVisibleProduct(
        "Input for the updateVisibleProduct mutation"
        input: UpdateVisibleProductInput!
    ): UpdateVisibleProductPayload
    "The writeReview mutation"
    writeReview(
        "Input for the writeReview mutation"
        input: WriteReviewInput!
    ): WriteReviewPayload
}

"The root entry point into the Graph"
type RootQuery {
    "Connection between the RootQuery type and the paTest type"
    allPaTest(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToPaTestConnectionWhereArgs
    ): RootQueryToPaTestConnection
    "Entry point to get all settings for the site"
    allSettings: Settings
    "Countries that the store sells to"
    allowedCountries: [CountriesEnum]
    "The cart object"
    cart(
        "Should cart totals be recalculated."
        recalculateTotals: Boolean
    ): Cart
    "The cart object"
    cartFee(id: ID!): CartFee
    "The cart object"
    cartItem(key: ID!): CartItem
    "Connection between the RootQuery type and the category type"
    categories(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToCategoryConnectionWhereArgs
    ): RootQueryToCategoryConnection
    "A 0bject"
    category(
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: CategoryIdType
    ): Category
    "Statistics for a product taxonomy query"
    collectionStats(
        "If true, calculates the minimum and maximum product prices for the collection."
        calculatePriceRange: Boolean,
        "If true, calculates rating counts for products in the collection."
        calculateRatingCounts: Boolean,
        "If true, calculates stock counts for products in the collection."
        calculateStockStatusCounts: Boolean,
        taxonomies: [CollectionStatsQueryInput],
        where: CollectionStatsWhereArgs
    ): CollectionStats
    "Returns a Comment"
    comment(
        "Unique identifier for the comment node."
        id: ID!,
        "Type of unique identifier to fetch a comment by. Default is Global ID"
        idType: CommentNodeIdTypeEnum
    ): Comment
    "Connection between the RootQuery type and the Comment type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToCommentConnectionWhereArgs
    ): RootQueryToCommentConnection
    "A node used to manage content"
    contentNode(
        "Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the \"asPreview\" argument is not explicitly provided as an argument."
        asPreview: Boolean,
        "The content type the node is used for. Required when idType is set to \"name\" or \"slug\""
        contentType: ContentTypeEnum,
        "Unique identifier for the content node."
        id: ID!,
        "Type of unique identifier to fetch a content node by. Default is Global ID"
        idType: ContentNodeIdTypeEnum
    ): ContentNode
    "Connection between the RootQuery type and the ContentNode type"
    contentNodes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToContentNodeConnectionWhereArgs
    ): RootQueryToContentNodeConnection
    "Fetch a Content Type node by unique Identifier"
    contentType(
        "Unique Identifier for the Content Type node."
        id: ID!,
        "Type of unique identifier to fetch a content type by. Default is Global ID"
        idType: ContentTypeIdTypeEnum
    ): ContentType
    "Connection between the RootQuery type and the ContentType type"
    contentTypes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): RootQueryToContentTypeConnection
    "Countries"
    countries: [CountriesEnum]
    "Countries that the store sells to"
    countryStates(
        "Target country"
        country: CountriesEnum!
    ): [CountryState]
    "A coupon object"
    coupon(
        id: ID!,
        "Type of ID being used identify coupon"
        idType: CouponIdTypeEnum
    ): Coupon
    "Connection between the RootQuery type and the Coupon type"
    coupons(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToCouponConnectionWhereArgs
    ): RootQueryToCouponConnection
    "A customer object"
    customer(
        "Get the customer by their database ID"
        customerId: Int,
        "Get the customer by their global ID"
        id: ID
    ): Customer
    "Connection between the RootQuery type and the Customer type"
    customers(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToCustomerConnectionWhereArgs
    ): RootQueryToCustomerConnection
    "Fields of the &#039;DiscussionSettings&#039; settings group"
    discussionSettings: DiscussionSettings
    "A external product object"
    externalProduct(
        "The ID for identifying the ExternalProduct product"
        id: ID,
        "Type of ID being used identify product"
        idType: ProductIdTypeEnum
    ): ExternalProduct @deprecated(reason: "Use &quot;product&quot; instead.")
    "Fields of the &#039;GeneralSettings&#039; settings group"
    generalSettings: GeneralSettings
    "A grouped product object"
    groupedProduct(
        "The ID for identifying the GroupProduct product"
        id: ID,
        "Type of ID being used identify product"
        idType: ProductIdTypeEnum
    ): GroupProduct @deprecated(reason: "Use &quot;product&quot; instead.")
    "An object of the mediaItem Type. "
    mediaItem(
        "Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the \"asPreview\" argument is not explicitly provided as an argument."
        asPreview: Boolean,
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: MediaItemIdType
    ): MediaItem
    "A mediaItem object"
    mediaItemBy(
        "Get the mediaItem object by its global ID"
        id: ID,
        "Get the mediaItem by its database ID"
        mediaItemId: Int,
        "Get the mediaItem by its slug (only available for non-hierarchical types)"
        slug: String,
        "Get the mediaItem by its uri"
        uri: String
    ): MediaItem @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")
    "Connection between the RootQuery type and the mediaItem type"
    mediaItems(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToMediaItemConnectionWhereArgs
    ): RootQueryToMediaItemConnection
    "A WordPress navigation menu"
    menu(
        "The globally unique identifier of the menu."
        id: ID!,
        "Type of unique identifier to fetch a menu by. Default is Global ID"
        idType: MenuNodeIdTypeEnum
    ): Menu
    "A WordPress navigation menu item"
    menuItem(
        "The globally unique identifier of the menu item."
        id: ID!,
        "Type of unique identifier to fetch a menu item by. Default is Global ID"
        idType: MenuItemNodeIdTypeEnum
    ): MenuItem
    "Connection between the RootQuery type and the MenuItem type"
    menuItems(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToMenuItemConnectionWhereArgs
    ): RootQueryToMenuItemConnection
    "Connection between the RootQuery type and the Menu type"
    menus(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToMenuConnectionWhereArgs
    ): RootQueryToMenuConnection
    "Fetches an object given its ID"
    node(
        "The unique identifier of the node"
        id: ID
    ): Node
    "Fetches an object given its Unique Resource Identifier"
    nodeByUri(
        "Unique Resource Identifier in the form of a path or permalink for a node. Ex: \"/hello-world\""
        uri: String!
    ): UniformResourceIdentifiable
    "A order object"
    order(
        "The ID for identifying the order"
        id: ID,
        "Type of ID being used identify order"
        idType: OrderIdTypeEnum
    ): Order
    "Connection between the RootQuery type and the Order type"
    orders(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToOrderConnectionWhereArgs
    ): RootQueryToOrderConnection
    "A 0bject"
    paTest(
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: PaTestIdType
    ): PaTest
    "An object of the page Type. "
    page(
        "Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the \"asPreview\" argument is not explicitly provided as an argument."
        asPreview: Boolean,
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: PageIdType
    ): Page
    "A page object"
    pageBy(
        "Get the page object by its global ID"
        id: ID,
        "Get the page by its database ID"
        pageId: Int,
        "Get the page by its uri"
        uri: String
    ): Page @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")
    "Connection between the RootQuery type and the page type"
    pages(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToPageConnectionWhereArgs
    ): RootQueryToPageConnection
    "Connection between the RootQuery type and the PaymentGateway type"
    paymentGateways(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToPaymentGatewayConnectionWhereArgs
    ): RootQueryToPaymentGatewayConnection
    "A WordPress plugin"
    plugin(
        "The globally unique identifier of the plugin."
        id: ID!
    ): Plugin
    "Connection between the RootQuery type and the Plugin type"
    plugins(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToPluginConnectionWhereArgs
    ): RootQueryToPluginConnection
    "An object of the post Type. "
    post(
        "Whether to return the Preview Node instead of the Published Node. When the ID of a Node is provided along with asPreview being set to true, the preview node with un-published changes will be returned instead of the published node. If no preview node exists or the requester doesn't have proper capabilities to preview, no node will be returned. If the ID provided is a URI and has a preview query arg, it will be used as a fallback if the \"asPreview\" argument is not explicitly provided as an argument."
        asPreview: Boolean,
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: PostIdType
    ): Post
    "A post object"
    postBy(
        "Get the post object by its global ID"
        id: ID,
        "Get the post by its database ID"
        postId: Int,
        "Get the post by its slug (only available for non-hierarchical types)"
        slug: String,
        "Get the post by its uri"
        uri: String
    ): Post @deprecated(reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)")
    "A 0bject"
    postFormat(
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: PostFormatIdType
    ): PostFormat
    "Connection between the RootQuery type and the postFormat type"
    postFormats(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToPostFormatConnectionWhereArgs
    ): RootQueryToPostFormatConnection
    "Connection between the RootQuery type and the post type"
    posts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToPostConnectionWhereArgs
    ): RootQueryToPostConnection
    "A product object"
    product(
        "The ID for identifying the product"
        id: ID!,
        "Type of ID being used identify product"
        idType: ProductIdTypeEnum
    ): Product
    "Connection between the RootQuery type and the productCategory type"
    productCategories(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToProductCategoryConnectionWhereArgs
    ): RootQueryToProductCategoryConnection
    "A 0bject"
    productCategory(
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: ProductCategoryIdType
    ): ProductCategory
    "A 0bject"
    productTag(
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: ProductTagIdType
    ): ProductTag
    "Connection between the RootQuery type and the productTag type"
    productTags(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToProductTagConnectionWhereArgs
    ): RootQueryToProductTagConnection
    "A 0bject"
    productType(
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: ProductTypeIdType
    ): ProductType
    "Connection between the RootQuery type and the productType type"
    productTypes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToProductTypeConnectionWhereArgs
    ): RootQueryToProductTypeConnection
    "A product variation object"
    productVariation(
        "The ID for identifying the product variation"
        id: ID,
        "Type of ID being used identify product variation"
        idType: ProductVariationIdTypeEnum
    ): ProductVariation
    "Connection between the RootQuery type and the ProductUnion type"
    products(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToProductUnionConnectionWhereArgs
    ): RootQueryToProductUnionConnection
    "Fields of the &#039;ReadingSettings&#039; settings group"
    readingSettings: ReadingSettings
    "A refund object"
    refund(
        "The ID for identifying the refund"
        id: ID!,
        "Type of ID being used identify refund"
        idType: RefundIdTypeEnum
    ): Refund
    "Connection between the RootQuery type and the Refund type"
    refunds(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToRefundConnectionWhereArgs
    ): RootQueryToRefundConnection
    "Connection between the RootQuery type and the EnqueuedScript type"
    registeredScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): RootQueryToEnqueuedScriptConnection
    "Connection between the RootQuery type and the EnqueuedStylesheet type"
    registeredStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): RootQueryToEnqueuedStylesheetConnection
    "Connection between the RootQuery type and the ContentNode type"
    revisions(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToRevisionsConnectionWhereArgs
    ): RootQueryToRevisionsConnection
    "A 0bject"
    shippingClass(
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: ShippingClassIdType
    ): ShippingClass
    "Connection between the RootQuery type and the shippingClass type"
    shippingClasses(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToShippingClassConnectionWhereArgs
    ): RootQueryToShippingClassConnection
    "A shipping method object"
    shippingMethod(
        "The ID for identifying the shipping method"
        id: ID,
        "Type of ID being used identify product variation"
        idType: ShippingMethodIdTypeEnum
    ): ShippingMethod
    "Connection between the RootQuery type and the ShippingMethod type"
    shippingMethods(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): RootQueryToShippingMethodConnection
    "A shipping zone object"
    shippingZone(
        "The ID for identifying the shipping zone"
        id: ID,
        "Type of ID being used identify shipping zone"
        idType: ShippingZoneIdTypeEnum
    ): ShippingZone
    "Connection between the RootQuery type and the ShippingZone type"
    shippingZones(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): RootQueryToShippingZoneConnection
    "A simple product object"
    simpleProduct(
        "The ID for identifying the SimpleProduct product"
        id: ID,
        "Type of ID being used identify product"
        idType: ProductIdTypeEnum
    ): SimpleProduct @deprecated(reason: "Use &quot;product&quot; instead.")
    stripePaymentIntent(
        "The Stripe Payment Method. PAYMENT or SETUP."
        stripePaymentMethod: StripePaymentMethodEnum
    ): PaymentIntent
    "A 0bject"
    tag(
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: TagIdType
    ): Tag
    "Connection between the RootQuery type and the tag type"
    tags(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToTagConnectionWhereArgs
    ): RootQueryToTagConnection
    "Connection between the RootQuery type and the TaxClass type"
    taxClasses(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): RootQueryToTaxClassConnection
    "A tax rate object"
    taxRate(
        "The ID for identifying the tax rate"
        id: ID,
        "Type of ID being used identify tax rate"
        idType: TaxRateIdTypeEnum
    ): TaxRate
    "Connection between the RootQuery type and the TaxRate type"
    taxRates(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToTaxRateConnectionWhereArgs
    ): RootQueryToTaxRateConnection
    "Connection between the RootQuery type and the Taxonomy type"
    taxonomies(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): RootQueryToTaxonomyConnection
    "Fetch a Taxonomy node by unique Identifier"
    taxonomy(
        "Unique Identifier for the Taxonomy node."
        id: ID!,
        "Type of unique identifier to fetch a taxonomy by. Default is Global ID"
        idType: TaxonomyIdTypeEnum
    ): Taxonomy
    "A node in a taxonomy used to group and relate content nodes"
    termNode(
        "Unique identifier for the term node."
        id: ID!,
        "Type of unique identifier to fetch a term node by. Default is Global ID"
        idType: TermNodeIdTypeEnum,
        "The taxonomy of the tern node. Required when idType is set to \"name\" or \"slug\""
        taxonomy: TaxonomyEnum
    ): TermNode
    "Connection between the RootQuery type and the TermNode type"
    terms(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToTermNodeConnectionWhereArgs
    ): RootQueryToTermNodeConnection
    "A Theme object"
    theme(
        "The globally unique identifier of the theme."
        id: ID!
    ): Theme
    "Connection between the RootQuery type and the Theme type"
    themes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): RootQueryToThemeConnection
    "A unsupported product object"
    unsupportedProduct(
        "The ID for identifying the UnsupportedProduct product"
        id: ID,
        "Type of ID being used identify product"
        idType: ProductIdTypeEnum
    ): UnsupportedProduct @deprecated(reason: "Use &quot;product&quot; instead.")
    "Returns a user"
    user(
        "The globally unique identifier of the user."
        id: ID!,
        "Type of unique identifier to fetch a user by. Default is Global ID"
        idType: UserNodeIdTypeEnum
    ): User
    "Returns a user role"
    userRole(
        "The globally unique identifier of the user object."
        id: ID!
    ): UserRole
    "Connection between the RootQuery type and the UserRole type"
    userRoles(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): RootQueryToUserRoleConnection
    "Connection between the RootQuery type and the User type"
    users(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToUserConnectionWhereArgs
    ): RootQueryToUserConnection
    "A variable product object"
    variableProduct(
        "The ID for identifying the VariableProduct product"
        id: ID,
        "Type of ID being used identify product"
        idType: ProductIdTypeEnum
    ): VariableProduct @deprecated(reason: "Use &quot;product&quot; instead.")
    "Returns the current user"
    viewer: User
    "A 0bject"
    visibleProduct(
        "The globally unique identifier of the object."
        id: ID!,
        "Type of unique identifier to fetch by. Default is Global ID"
        idType: VisibleProductIdType
    ): VisibleProduct
    "Connection between the RootQuery type and the visibleProduct type"
    visibleProducts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: RootQueryToVisibleProductConnectionWhereArgs
    ): RootQueryToVisibleProductConnection
    woonuxtSettings: WoonuxtOptions
    "Fields of the &#039;WritingSettings&#039; settings group"
    writingSettings: WritingSettings
}

"Connection between the RootQuery type and the category type"
type RootQueryToCategoryConnection implements CategoryConnection & Connection {
    "Edges for the RootQueryToCategoryConnection connection"
    edges: [RootQueryToCategoryConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Category!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToCategoryConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToCategoryConnectionEdge implements CategoryConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Category!
}

"Page Info on the &quot;RootQueryToCategoryConnection&quot;"
type RootQueryToCategoryConnectionPageInfo implements CategoryConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the Comment type"
type RootQueryToCommentConnection implements CommentConnection & Connection {
    "Edges for the RootQueryToCommentConnection connection"
    edges: [RootQueryToCommentConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Comment!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToCommentConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToCommentConnectionEdge implements CommentConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment!
}

"Page Info on the &quot;RootQueryToCommentConnection&quot;"
type RootQueryToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the ContentNode type"
type RootQueryToContentNodeConnection implements Connection & ContentNodeConnection {
    "Edges for the RootQueryToContentNodeConnection connection"
    edges: [RootQueryToContentNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;RootQueryToContentNodeConnection&quot;"
type RootQueryToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the ContentType type"
type RootQueryToContentTypeConnection implements Connection & ContentTypeConnection {
    "Edges for the RootQueryToContentTypeConnection connection"
    edges: [RootQueryToContentTypeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentType!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToContentTypeConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToContentTypeConnectionEdge implements ContentTypeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentType!
}

"Page Info on the &quot;RootQueryToContentTypeConnection&quot;"
type RootQueryToContentTypeConnectionPageInfo implements ContentTypeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the Coupon type"
type RootQueryToCouponConnection implements Connection & CouponConnection {
    "Edges for the RootQueryToCouponConnection connection"
    edges: [RootQueryToCouponConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Coupon!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToCouponConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToCouponConnectionEdge implements CouponConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Coupon!
}

"Page Info on the &quot;RootQueryToCouponConnection&quot;"
type RootQueryToCouponConnectionPageInfo implements CouponConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the Customer type"
type RootQueryToCustomerConnection implements Connection & CustomerConnection {
    "Edges for the RootQueryToCustomerConnection connection"
    edges: [RootQueryToCustomerConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Customer!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToCustomerConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToCustomerConnectionEdge implements CustomerConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Customer!
}

"Page Info on the &quot;RootQueryToCustomerConnection&quot;"
type RootQueryToCustomerConnectionPageInfo implements CustomerConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the EnqueuedScript type"
type RootQueryToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
    "Edges for the RootQueryToEnqueuedScriptConnection connection"
    edges: [RootQueryToEnqueuedScriptConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [EnqueuedScript!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToEnqueuedScriptConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: EnqueuedScript!
}

"Page Info on the &quot;RootQueryToEnqueuedScriptConnection&quot;"
type RootQueryToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the EnqueuedStylesheet type"
type RootQueryToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
    "Edges for the RootQueryToEnqueuedStylesheetConnection connection"
    edges: [RootQueryToEnqueuedStylesheetConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [EnqueuedStylesheet!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToEnqueuedStylesheetConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: EnqueuedStylesheet!
}

"Page Info on the &quot;RootQueryToEnqueuedStylesheetConnection&quot;"
type RootQueryToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the mediaItem type"
type RootQueryToMediaItemConnection implements Connection & MediaItemConnection {
    "Edges for the RootQueryToMediaItemConnection connection"
    edges: [RootQueryToMediaItemConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [MediaItem!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToMediaItemConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToMediaItemConnectionEdge implements Edge & MediaItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: MediaItem!
}

"Page Info on the &quot;RootQueryToMediaItemConnection&quot;"
type RootQueryToMediaItemConnectionPageInfo implements MediaItemConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the Menu type"
type RootQueryToMenuConnection implements Connection & MenuConnection {
    "Edges for the RootQueryToMenuConnection connection"
    edges: [RootQueryToMenuConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Menu!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToMenuConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToMenuConnectionEdge implements Edge & MenuConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Menu!
}

"Page Info on the &quot;RootQueryToMenuConnection&quot;"
type RootQueryToMenuConnectionPageInfo implements MenuConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the MenuItem type"
type RootQueryToMenuItemConnection implements Connection & MenuItemConnection {
    "Edges for the RootQueryToMenuItemConnection connection"
    edges: [RootQueryToMenuItemConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [MenuItem!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToMenuItemConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToMenuItemConnectionEdge implements Edge & MenuItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: MenuItem!
}

"Page Info on the &quot;RootQueryToMenuItemConnection&quot;"
type RootQueryToMenuItemConnectionPageInfo implements MenuItemConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the Order type"
type RootQueryToOrderConnection implements Connection & OrderConnection {
    "Edges for the RootQueryToOrderConnection connection"
    edges: [RootQueryToOrderConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Order!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToOrderConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToOrderConnectionEdge implements Edge & OrderConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Order!
}

"Page Info on the &quot;RootQueryToOrderConnection&quot;"
type RootQueryToOrderConnectionPageInfo implements OrderConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the paTest type"
type RootQueryToPaTestConnection implements Connection & PaTestConnection {
    "Edges for the RootQueryToPaTestConnection connection"
    edges: [RootQueryToPaTestConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [PaTest!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToPaTestConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToPaTestConnectionEdge implements Edge & PaTestConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: PaTest!
}

"Page Info on the &quot;RootQueryToPaTestConnection&quot;"
type RootQueryToPaTestConnectionPageInfo implements PaTestConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the page type"
type RootQueryToPageConnection implements Connection & PageConnection {
    "Edges for the RootQueryToPageConnection connection"
    edges: [RootQueryToPageConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Page!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToPageConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToPageConnectionEdge implements Edge & PageConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Page!
}

"Page Info on the &quot;RootQueryToPageConnection&quot;"
type RootQueryToPageConnectionPageInfo implements PageConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the PaymentGateway type"
type RootQueryToPaymentGatewayConnection implements Connection & PaymentGatewayConnection {
    "Edges for the RootQueryToPaymentGatewayConnection connection"
    edges: [RootQueryToPaymentGatewayConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [PaymentGateway!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToPaymentGatewayConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToPaymentGatewayConnectionEdge implements Edge & PaymentGatewayConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: PaymentGateway!
}

"Page Info on the &quot;RootQueryToPaymentGatewayConnection&quot;"
type RootQueryToPaymentGatewayConnectionPageInfo implements PageInfo & PaymentGatewayConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the Plugin type"
type RootQueryToPluginConnection implements Connection & PluginConnection {
    "Edges for the RootQueryToPluginConnection connection"
    edges: [RootQueryToPluginConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Plugin!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToPluginConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToPluginConnectionEdge implements Edge & PluginConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Plugin!
}

"Page Info on the &quot;RootQueryToPluginConnection&quot;"
type RootQueryToPluginConnectionPageInfo implements PageInfo & PluginConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the post type"
type RootQueryToPostConnection implements Connection & PostConnection {
    "Edges for the RootQueryToPostConnection connection"
    edges: [RootQueryToPostConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Post!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToPostConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToPostConnectionEdge implements Edge & PostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Post!
}

"Page Info on the &quot;RootQueryToPostConnection&quot;"
type RootQueryToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the postFormat type"
type RootQueryToPostFormatConnection implements Connection & PostFormatConnection {
    "Edges for the RootQueryToPostFormatConnection connection"
    edges: [RootQueryToPostFormatConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [PostFormat!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToPostFormatConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToPostFormatConnectionEdge implements Edge & PostFormatConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: PostFormat!
}

"Page Info on the &quot;RootQueryToPostFormatConnection&quot;"
type RootQueryToPostFormatConnectionPageInfo implements PageInfo & PostFormatConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the productCategory type"
type RootQueryToProductCategoryConnection implements Connection & ProductCategoryConnection {
    "Edges for the RootQueryToProductCategoryConnection connection"
    edges: [RootQueryToProductCategoryConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ProductCategory!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToProductCategoryConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToProductCategoryConnectionEdge implements Edge & ProductCategoryConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductCategory!
}

"Page Info on the &quot;RootQueryToProductCategoryConnection&quot;"
type RootQueryToProductCategoryConnectionPageInfo implements PageInfo & ProductCategoryConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the productTag type"
type RootQueryToProductTagConnection implements Connection & ProductTagConnection {
    "Edges for the RootQueryToProductTagConnection connection"
    edges: [RootQueryToProductTagConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ProductTag!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToProductTagConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToProductTagConnectionEdge implements Edge & ProductTagConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductTag!
}

"Page Info on the &quot;RootQueryToProductTagConnection&quot;"
type RootQueryToProductTagConnectionPageInfo implements PageInfo & ProductTagConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the productType type"
type RootQueryToProductTypeConnection implements Connection & ProductTypeConnection {
    "Edges for the RootQueryToProductTypeConnection connection"
    edges: [RootQueryToProductTypeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ProductType!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToProductTypeConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToProductTypeConnectionEdge implements Edge & ProductTypeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductType!
}

"Page Info on the &quot;RootQueryToProductTypeConnection&quot;"
type RootQueryToProductTypeConnectionPageInfo implements PageInfo & ProductTypeConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the ProductUnion type"
type RootQueryToProductUnionConnection implements Connection & ProductUnionConnection {
    "Edges for the RootQueryToProductUnionConnection connection"
    edges: [RootQueryToProductUnionConnectionEdge!]!
    "Total products founds"
    found: Int
    "The nodes of the connection, without the edges"
    nodes: [ProductUnion!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToProductUnionConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToProductUnionConnectionEdge implements Edge & ProductUnionConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductUnion!
}

"Page Info on the &quot;RootQueryToProductUnionConnection&quot;"
type RootQueryToProductUnionConnectionPageInfo implements PageInfo & ProductUnionConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the Refund type"
type RootQueryToRefundConnection implements Connection & RefundConnection {
    "Edges for the RootQueryToRefundConnection connection"
    edges: [RootQueryToRefundConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Refund!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToRefundConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToRefundConnectionEdge implements Edge & RefundConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Refund!
}

"Page Info on the &quot;RootQueryToRefundConnection&quot;"
type RootQueryToRefundConnectionPageInfo implements PageInfo & RefundConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the ContentNode type"
type RootQueryToRevisionsConnection implements Connection & ContentNodeConnection {
    "Edges for the RootQueryToRevisionsConnection connection"
    edges: [RootQueryToRevisionsConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToRevisionsConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToRevisionsConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;RootQueryToRevisionsConnection&quot;"
type RootQueryToRevisionsConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the shippingClass type"
type RootQueryToShippingClassConnection implements Connection & ShippingClassConnection {
    "Edges for the RootQueryToShippingClassConnection connection"
    edges: [RootQueryToShippingClassConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ShippingClass!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToShippingClassConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToShippingClassConnectionEdge implements Edge & ShippingClassConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ShippingClass!
}

"Page Info on the &quot;RootQueryToShippingClassConnection&quot;"
type RootQueryToShippingClassConnectionPageInfo implements PageInfo & ShippingClassConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the ShippingMethod type"
type RootQueryToShippingMethodConnection implements Connection & ShippingMethodConnection {
    "Edges for the RootQueryToShippingMethodConnection connection"
    edges: [RootQueryToShippingMethodConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ShippingMethod!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToShippingMethodConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToShippingMethodConnectionEdge implements Edge & ShippingMethodConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ShippingMethod!
}

"Page Info on the &quot;RootQueryToShippingMethodConnection&quot;"
type RootQueryToShippingMethodConnectionPageInfo implements PageInfo & ShippingMethodConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the ShippingZone type"
type RootQueryToShippingZoneConnection implements Connection & ShippingZoneConnection {
    "Edges for the RootQueryToShippingZoneConnection connection"
    edges: [RootQueryToShippingZoneConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ShippingZone!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToShippingZoneConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToShippingZoneConnectionEdge implements Edge & ShippingZoneConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ShippingZone!
}

"Page Info on the &quot;RootQueryToShippingZoneConnection&quot;"
type RootQueryToShippingZoneConnectionPageInfo implements PageInfo & ShippingZoneConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the tag type"
type RootQueryToTagConnection implements Connection & TagConnection {
    "Edges for the RootQueryToTagConnection connection"
    edges: [RootQueryToTagConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Tag!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToTagConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToTagConnectionEdge implements Edge & TagConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Tag!
}

"Page Info on the &quot;RootQueryToTagConnection&quot;"
type RootQueryToTagConnectionPageInfo implements PageInfo & TagConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the TaxClass type"
type RootQueryToTaxClassConnection implements Connection & TaxClassConnection {
    "Edges for the RootQueryToTaxClassConnection connection"
    edges: [RootQueryToTaxClassConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [TaxClass!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToTaxClassConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToTaxClassConnectionEdge implements Edge & TaxClassConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: TaxClass!
}

"Page Info on the &quot;RootQueryToTaxClassConnection&quot;"
type RootQueryToTaxClassConnectionPageInfo implements PageInfo & TaxClassConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the TaxRate type"
type RootQueryToTaxRateConnection implements Connection & TaxRateConnection {
    "Edges for the RootQueryToTaxRateConnection connection"
    edges: [RootQueryToTaxRateConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [TaxRate!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToTaxRateConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToTaxRateConnectionEdge implements Edge & TaxRateConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: TaxRate!
}

"Page Info on the &quot;RootQueryToTaxRateConnection&quot;"
type RootQueryToTaxRateConnectionPageInfo implements PageInfo & TaxRateConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the Taxonomy type"
type RootQueryToTaxonomyConnection implements Connection & TaxonomyConnection {
    "Edges for the RootQueryToTaxonomyConnection connection"
    edges: [RootQueryToTaxonomyConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Taxonomy!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToTaxonomyConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToTaxonomyConnectionEdge implements Edge & TaxonomyConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Taxonomy!
}

"Page Info on the &quot;RootQueryToTaxonomyConnection&quot;"
type RootQueryToTaxonomyConnectionPageInfo implements PageInfo & TaxonomyConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the TermNode type"
type RootQueryToTermNodeConnection implements Connection & TermNodeConnection {
    "Edges for the RootQueryToTermNodeConnection connection"
    edges: [RootQueryToTermNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [TermNode!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToTermNodeConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToTermNodeConnectionEdge implements Edge & TermNodeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: TermNode!
}

"Page Info on the &quot;RootQueryToTermNodeConnection&quot;"
type RootQueryToTermNodeConnectionPageInfo implements PageInfo & TermNodeConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the Theme type"
type RootQueryToThemeConnection implements Connection & ThemeConnection {
    "Edges for the RootQueryToThemeConnection connection"
    edges: [RootQueryToThemeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Theme!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToThemeConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToThemeConnectionEdge implements Edge & ThemeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Theme!
}

"Page Info on the &quot;RootQueryToThemeConnection&quot;"
type RootQueryToThemeConnectionPageInfo implements PageInfo & ThemeConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the User type"
type RootQueryToUserConnection implements Connection & UserConnection {
    "Edges for the RootQueryToUserConnection connection"
    edges: [RootQueryToUserConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [User!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToUserConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToUserConnectionEdge implements Edge & UserConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: User!
}

"Page Info on the &quot;RootQueryToUserConnection&quot;"
type RootQueryToUserConnectionPageInfo implements PageInfo & UserConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the UserRole type"
type RootQueryToUserRoleConnection implements Connection & UserRoleConnection {
    "Edges for the RootQueryToUserRoleConnection connection"
    edges: [RootQueryToUserRoleConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [UserRole!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToUserRoleConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToUserRoleConnectionEdge implements Edge & UserRoleConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: UserRole!
}

"Page Info on the &quot;RootQueryToUserRoleConnection&quot;"
type RootQueryToUserRoleConnectionPageInfo implements PageInfo & UserRoleConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the RootQuery type and the visibleProduct type"
type RootQueryToVisibleProductConnection implements Connection & VisibleProductConnection {
    "Edges for the RootQueryToVisibleProductConnection connection"
    edges: [RootQueryToVisibleProductConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [VisibleProduct!]!
    "Information about pagination in a connection."
    pageInfo: RootQueryToVisibleProductConnectionPageInfo!
}

"An edge in a connection"
type RootQueryToVisibleProductConnectionEdge implements Edge & VisibleProductConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: VisibleProduct!
}

"Page Info on the &quot;RootQueryToVisibleProductConnection&quot;"
type RootQueryToVisibleProductConnectionPageInfo implements PageInfo & VisibleProductConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"The payload for the sendPasswordResetEmail mutation."
type SendPasswordResetEmailPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Whether the mutation completed successfully. This does NOT necessarily mean that an email was sent."
    success: Boolean
    "The user that the password reset email was sent to"
    user: User @deprecated(reason: "This field will be removed in a future version of WPGraphQL")
}

"The payload for the setDefaultPaymentMethod mutation."
type SetDefaultPaymentMethodPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Status of the request"
    status: String
    "Preferred payment method token"
    token: PaymentToken
}

"All of the registered settings"
type Settings {
    "Settings of the the string Settings Group"
    discussionSettingsDefaultCommentStatus: String
    "Settings of the the string Settings Group"
    discussionSettingsDefaultPingStatus: String
    "Settings of the the string Settings Group"
    generalSettingsDateFormat: String
    "Settings of the the string Settings Group"
    generalSettingsDescription: String
    "Settings of the the string Settings Group"
    generalSettingsEmail: String
    "Settings of the the string Settings Group"
    generalSettingsLanguage: String
    "Settings of the the integer Settings Group"
    generalSettingsStartOfWeek: Int
    "Settings of the the string Settings Group"
    generalSettingsTimeFormat: String
    "Settings of the the string Settings Group"
    generalSettingsTimezone: String
    "Settings of the the string Settings Group"
    generalSettingsTitle: String
    "Settings of the the string Settings Group"
    generalSettingsUrl: String
    "Settings of the the integer Settings Group"
    readingSettingsPageForPosts: Int
    "Settings of the the integer Settings Group"
    readingSettingsPageOnFront: Int
    "Settings of the the integer Settings Group"
    readingSettingsPostsPerPage: Int
    "Settings of the the string Settings Group"
    readingSettingsShowOnFront: String
    "Settings of the the integer Settings Group"
    writingSettingsDefaultCategory: Int
    "Settings of the the string Settings Group"
    writingSettingsDefaultPostFormat: String
    "Settings of the the boolean Settings Group"
    writingSettingsUseSmilies: Boolean
}

"The shippingClass type"
type ShippingClass implements DatabaseIdentifier & Node & TermNode & UniformResourceIdentifiable {
    "Connection between the ShippingClass type and the ContentNode type"
    contentNodes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ShippingClassToContentNodeConnectionWhereArgs
    ): ShippingClassToContentNodeConnection
    "The number of objects connected to the object"
    count: Int
    "The unique identifier stored in the database"
    databaseId: Int!
    "The description of the object"
    description: String
    "Connection between the TermNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedScriptConnection
    "Connection between the TermNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedStylesheetConnection
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "Connection between the ShippingClass type and the Product type"
    products(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ShippingClassToProductConnectionWhereArgs
    ): ShippingClassToProductConnection
    "The id field matches the WP_Post-&gt;ID field."
    shippingClassId: Int @deprecated(reason: "Deprecated in favor of databaseId")
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "Connection between the ShippingClass type and the Taxonomy type"
    taxonomy: ShippingClassToTaxonomyConnectionEdge
    "The name of the taxonomy that the object is associated with"
    taxonomyName: String
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String
}

"Connection between the ShippingClass type and the ContentNode type"
type ShippingClassToContentNodeConnection implements Connection & ContentNodeConnection {
    "Edges for the ShippingClassToContentNodeConnection connection"
    edges: [ShippingClassToContentNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: ShippingClassToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type ShippingClassToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;ShippingClassToContentNodeConnection&quot;"
type ShippingClassToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the ShippingClass type and the Product type"
type ShippingClassToProductConnection implements Connection & ProductConnection {
    "Edges for the ShippingClassToProductConnection connection"
    edges: [ShippingClassToProductConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Product!]!
    "Information about pagination in a connection."
    pageInfo: ShippingClassToProductConnectionPageInfo!
}

"An edge in a connection"
type ShippingClassToProductConnectionEdge implements Edge & ProductConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Product!
}

"Page Info on the &quot;ShippingClassToProductConnection&quot;"
type ShippingClassToProductConnectionPageInfo implements PageInfo & ProductConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the ShippingClass type and the Taxonomy type"
type ShippingClassToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Taxonomy!
}

"a shipping line object"
type ShippingLine implements Node {
    "The ID of the order item in the database"
    databaseId: Int
    "The ID of the order item in the database"
    id: ID!
    "Object meta data"
    metaData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String],
        "Retrieve meta with matching keys"
        multiple: Boolean
    ): [MetaData]
    "Shipping Line&#039;s shipping method name"
    methodTitle: String
    "The Id of the order the order item belongs to."
    orderId: Int
    "Shipping Line&#039;s shipping method"
    shippingMethod: ShippingMethod
    "Line tax class"
    taxClass: TaxClassEnum
    "Line taxes"
    taxes: [OrderItemTax]
    "Line total (after discounts)"
    total: String
    "Line total tax (after discounts)"
    totalTax: String
}

"A Shipping zone object"
type ShippingLocation {
    "The globally unique identifier for the tax rate."
    code: String
    "Shipping zone location name."
    type: ShippingLocationTypeEnum
}

"A shipping method object"
type ShippingMethod implements Node {
    "The ID of the shipping method in the database"
    databaseId: ID!
    "Shipping method description."
    description: String
    "The globally unique identifier for the tax rate."
    id: ID!
    "Shipping method title."
    title: String
}

"Shipping package object"
type ShippingPackage {
    "Shipping package details"
    packageDetails: String
    "Shipping package rates"
    rates: [ShippingRate]
    "This shipping package supports the shipping calculator."
    supportsShippingCalculator: Boolean
}

"Shipping rate object"
type ShippingRate {
    "Shipping rate cost"
    cost: String
    "Shipping rate ID"
    id: ID!
    "Shipping instance ID"
    instanceId: Int
    "Shipping rate label"
    label: String
    "Shipping method ID"
    methodId: ID!
}

"A Shipping zone object"
type ShippingZone implements Node {
    "The ID of the customer in the database"
    databaseId: Int
    "The globally unique identifier for the tax rate."
    id: ID!
    "Shipping zone locations."
    locations: [ShippingLocation]
    "Connection between the ShippingZone type and the ShippingMethod type"
    methods(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ShippingZoneToShippingMethodConnection
    "Shipping zone name."
    name: String
    "Shipping zone order."
    order: Int
}

"Connection between the ShippingZone type and the ShippingMethod type"
type ShippingZoneToShippingMethodConnection implements Connection & ShippingMethodConnection {
    "Edges for the ShippingZoneToShippingMethodConnection connection"
    edges: [ShippingZoneToShippingMethodConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ShippingMethod!]!
    "Information about pagination in a connection."
    pageInfo: ShippingZoneToShippingMethodConnectionPageInfo!
}

"An edge in a connection"
type ShippingZoneToShippingMethodConnectionEdge implements Edge & ShippingMethodConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "Whether the shipping method is enabled."
    enabled: Boolean
    "The globally unique identifier for the shipping method."
    id: ID!
    "Shipping method instance ID."
    instanceId: Int
    "The item at the end of the edge"
    node: ShippingMethod!
    "The order of the shipping method."
    order: Int
    "Shipping method settings."
    settings: [WCSetting]
}

"Page Info on the &quot;ShippingZoneToShippingMethodConnection&quot;"
type ShippingZoneToShippingMethodConnectionPageInfo implements PageInfo & ShippingMethodConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"A simple attribute object"
type SimpleAttribute implements Attribute & Node {
    "The globally unique ID for the object"
    id: ID!
    "Name of attribute"
    name: String
    "Selected value of attribute"
    value: String
}

"A item in the cart"
type SimpleCartItem implements CartItem & Node {
    "Object meta data"
    extraData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String]
    ): [MetaData]
    "The globally unique ID for the object"
    id: ID!
    "CartItem ID"
    key: ID!
    "Connection between the CartItem type and the Product type"
    product(
        "Arguments for filtering the connection"
        where: CartItemToProductConnectionWhereArgs
    ): CartItemToProductConnectionEdge
    "Quantity of the product"
    quantity: Int
    "Item&#039;s subtotal"
    subtotal(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Item&#039;s subtotal tax"
    subtotalTax(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Item&#039;s tax"
    tax(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Item&#039;s total"
    total(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Connection between the CartItem type and the ProductVariation type"
    variation: CartItemToProductVariationConnectionEdge
}

"A simple product object"
type SimpleProduct implements ContentNode & DatabaseIdentifier & DownloadableProduct & InventoriedProduct & MenuItemLinkable & Node & NodeWithComments & NodeWithContentEditor & NodeWithExcerpt & NodeWithFeaturedImage & NodeWithTemplate & NodeWithTitle & Previewable & Product & ProductUnion & ProductWithAttributes & ProductWithDimensions & ProductWithPricing & UniformResourceIdentifiable {
    "Connection between the Product type and the paTest type"
    allPaTest(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToPaTestConnectionWhereArgs
    ): ProductToPaTestConnection
    "The ancestors of the content node."
    ancestors(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductConnectionWhereArgs
    ): ProductToProductConnection @deprecated(reason: "This content type is not hierarchical and typically will not have ancestors")
    "Connection between the Product type and the ProductAttribute type"
    attributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductAttributeConnectionWhereArgs
    ): ProductToProductAttributeConnection
    "Product average count"
    averageRating: Float
    "Product backorders status"
    backorders: BackordersEnum
    "Can product be backordered?"
    backordersAllowed: Boolean
    "Catalog visibility"
    catalogVisibility: CatalogVisibilityEnum
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "Connection between the Product type and the Comment type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToCommentsConnectionWhereArgs
    ): ProductToCommentsConnection
    "The content of the post."
    content(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Connection between the ContentNode type and the ContentType type"
    contentType: ContentNodeToContentTypeConnectionEdge
    "The name of the Content Type the node belongs to"
    contentTypeName: String!
    "Connection between the SimpleProduct type and the ProductUnion type"
    crossSell(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: SimpleProductToProductUnionConnectionWhereArgs
    ): SimpleProductToProductUnionConnection
    "Product or variation ID"
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "Date on sale from"
    dateOnSaleFrom: String
    "Date on sale to"
    dateOnSaleTo: String
    "Connection between the ProductWithAttributes type and the VariationAttribute type"
    defaultAttributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductWithAttributesToVariationAttributeConnection
    "Product description"
    description(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The desired slug of the post"
    desiredSlug: String
    "Download expiry"
    downloadExpiry: Int
    "Download limit"
    downloadLimit: Int
    "Is downloadable?"
    downloadable: Boolean
    "Product downloads"
    downloads: [ProductDownload]
    "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editingLockedBy: ContentNodeToEditLockConnectionEdge
    "The RSS enclosure for the object"
    enclosure: String
    "Connection between the ContentNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedScriptConnection
    "Connection between the ContentNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedStylesheetConnection
    "The excerpt of the post."
    excerpt(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "If the product is featured"
    featured: Boolean
    "Connection between the NodeWithFeaturedImage type and the MediaItem type"
    featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
    "The database identifier for the featured image node assigned to the content node"
    featuredImageDatabaseId: Int
    "Globally unique ID of the featured image assigned to the node"
    featuredImageId: ID
    "Connection between the Product type and the MediaItem type"
    galleryImages(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToMediaItemConnectionWhereArgs
    ): ProductToMediaItemConnection
    "Connection between the Product type and the GlobalProductAttribute type"
    globalAttributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductToGlobalProductAttributeConnection
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "Whether the product object is password protected."
    hasPassword: Boolean
    "Product&#039;s height"
    height: String
    "Product or variation global ID"
    id: ID!
    "Main image"
    image: MediaItem
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The user that most recently edited the node"
    lastEditedBy: ContentNodeToEditLastConnectionEdge
    "Product&#039;s length"
    length: String
    "The permalink of the post"
    link: String
    "Connection between the Product type and the LocalProductAttribute type"
    localAttributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductToLocalProductAttributeConnection
    "Low stock amount"
    lowStockAmount: Int
    "If product manage stock"
    manageStock: ManageStockEnum
    "Menu order"
    menuOrder: Int
    "Object meta data"
    metaData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String],
        "Retrieve meta with matching keys"
        multiple: Boolean
    ): [MetaData]
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "Product name"
    name: String
    "Is product on sale?"
    onSale: Boolean
    "The parent of the content node."
    parent(
        "Arguments for filtering the connection"
        where: ProductToParentConnectionWhereArgs
    ): ProductToParentConnectionEdge @deprecated(reason: "This content type is not hierarchical and typically will not have a parent")
    "The password for the product object."
    password: String
    "Connection between the Product type and the Product type"
    preview(
        "Arguments for filtering the connection"
        where: ProductToPreviewConnectionWhereArgs
    ): ProductToPreviewConnectionEdge
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
    "Product&#039;s active price"
    price(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Connection between the Product type and the productCategory type"
    productCategories(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductCategoryConnectionWhereArgs
    ): ProductToProductCategoryConnection
    "The id field matches the WP_Post-&gt;ID field."
    productId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
    "Connection between the Product type and the productTag type"
    productTags(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductTagConnectionWhereArgs
    ): ProductToProductTagConnection
    "Connection between the Product type and the productType type"
    productTypes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductTypeConnectionWhereArgs
    ): ProductToProductTypeConnection
    "Can product be purchased?"
    purchasable: Boolean
    "Purchase note"
    purchaseNote: String
    "Product&#039;s regular price"
    regularPrice(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Connection between the Product type and the ProductUnion type"
    related(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductUnionConnectionWhereArgs
    ): ProductToProductUnionConnection
    "Product review count"
    reviewCount: Int
    "Connection between the Product type and the Comment type"
    reviews(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToCommentConnectionWhereArgs
    ): ProductToCommentConnection
    "If reviews are allowed"
    reviewsAllowed: Boolean
    "Product&#039;s sale price"
    salePrice(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "shipping class ID"
    shippingClassId: Int
    "Connection between the Product type and the shippingClass type"
    shippingClasses(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToShippingClassConnectionWhereArgs
    ): ProductToShippingClassConnection
    "Does product need to be shipped?"
    shippingRequired: Boolean
    "Is product shipping taxable?"
    shippingTaxable: Boolean
    "Product short description"
    shortDescription(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Product SKU"
    sku: String
    "Product slug"
    slug: String
    "If should be sold individually"
    soldIndividually: Boolean
    "The current status of the object"
    status: String
    "Number of items available for sale"
    stockQuantity: Int
    "Product stock status"
    stockStatus: StockStatusEnum
    "Tax class"
    taxClass: TaxClassEnum
    "Tax status"
    taxStatus: TaxStatusEnum
    "The template assigned to the node"
    template: ContentTemplate
    "Connection between the Product type and the TermNode type"
    terms(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToTermNodeConnectionWhereArgs
    ): ProductToTermNodeConnection
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Number total of sales"
    totalSales: Int
    "Product type"
    type: ProductTypesEnum
    "Connection between the Product type and the ProductUnion type"
    upsell(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToUpsellConnectionWhereArgs
    ): ProductToUpsellConnection
    "The unique resource identifier path"
    uri: String
    "Is product virtual?"
    virtual: Boolean
    "Connection between the Product type and the visibleProduct type"
    visibleProducts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToVisibleProductConnectionWhereArgs
    ): ProductToVisibleProductConnection
    "Product&#039;s weight"
    weight: String
    "Product&#039;s width"
    width: String
}

"Connection between the SimpleProduct type and the ProductUnion type"
type SimpleProductToProductUnionConnection implements Connection & ProductUnionConnection {
    "Edges for the SimpleProductToProductUnionConnection connection"
    edges: [SimpleProductToProductUnionConnectionEdge!]!
    "Total products founds"
    found: Int
    "The nodes of the connection, without the edges"
    nodes: [ProductUnion!]!
    "Information about pagination in a connection."
    pageInfo: SimpleProductToProductUnionConnectionPageInfo!
}

"An edge in a connection"
type SimpleProductToProductUnionConnectionEdge implements Edge & ProductUnionConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductUnion!
}

"Page Info on the &quot;SimpleProductToProductUnionConnection&quot;"
type SimpleProductToProductUnionConnectionPageInfo implements PageInfo & ProductUnionConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"A product variation"
type SimpleProductVariation implements ContentNode & DownloadableProduct & InventoriedProduct & Node & NodeWithFeaturedImage & ProductUnion & ProductVariation & ProductWithDimensions & ProductWithPricing & UniformResourceIdentifiable {
    "Connection between the ProductVariation type and the VariationAttribute type"
    attributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductVariationToVariationAttributeConnection
    "Product average count"
    averageRating: Float
    "Product backorders status"
    backorders: BackordersEnum
    "Can product be backordered?"
    backordersAllowed: Boolean
    "Catalog visibility"
    catalogVisibility: CatalogVisibilityEnum
    "Connection between the ContentNode type and the ContentType type"
    contentType: ContentNodeToContentTypeConnectionEdge
    "The name of the Content Type the node belongs to"
    contentTypeName: String!
    "Product or variation ID"
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "Date on sale from"
    dateOnSaleFrom: String
    "Date on sale to"
    dateOnSaleTo: String
    "Product description"
    description(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The desired slug of the post"
    desiredSlug: String
    "Download expiry"
    downloadExpiry: Int
    "Download limit"
    downloadLimit: Int
    "Is downloadable?"
    downloadable: Boolean
    "Product downloads"
    downloads: [ProductDownload]
    "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editingLockedBy: ContentNodeToEditLockConnectionEdge
    "The RSS enclosure for the object"
    enclosure: String
    "Connection between the ContentNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedScriptConnection
    "Connection between the ContentNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedStylesheetConnection
    "If the product is featured"
    featured: Boolean
    "Connection between the NodeWithFeaturedImage type and the MediaItem type"
    featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
    "The database identifier for the featured image node assigned to the content node"
    featuredImageDatabaseId: Int
    "Globally unique ID of the featured image assigned to the node"
    featuredImageId: ID
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "Does product variation have any visible attributes"
    hasAttributes: Boolean
    "Product&#039;s height"
    height: String
    "Product or variation global ID"
    id: ID!
    "Main image"
    image: MediaItem
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The user that most recently edited the node"
    lastEditedBy: ContentNodeToEditLastConnectionEdge
    "Product&#039;s length"
    length: String
    "The permalink of the post"
    link: String
    "Low stock amount"
    lowStockAmount: Int
    "If product manage stock"
    manageStock: ManageStockEnum
    "Menu order"
    menuOrder: Int
    "Object meta data"
    metaData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String],
        "Retrieve meta with matching keys"
        multiple: Boolean
    ): [MetaData]
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "Product name"
    name: String
    "Is product on sale?"
    onSale: Boolean
    "The parent of the node. The parent object can be of various types"
    parent: ProductVariationToVariableProductConnectionEdge
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
    "Product&#039;s active price"
    price(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Can product be purchased?"
    purchasable: Boolean
    "Purchase note"
    purchaseNote: String
    "Product&#039;s regular price"
    regularPrice(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Product review count"
    reviewCount: Int
    "If reviews are allowed"
    reviewsAllowed: Boolean
    "Product&#039;s sale price"
    salePrice(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Product variation shipping class"
    shippingClass: String
    "shipping class ID"
    shippingClassId: Int
    "Does product need to be shipped?"
    shippingRequired: Boolean
    "Is product shipping taxable?"
    shippingTaxable: Boolean
    "Product short description"
    shortDescription(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Product SKU"
    sku: String
    "Product slug"
    slug: String
    "If should be sold individually"
    soldIndividually: Boolean
    "The current status of the object"
    status: String
    "Number of items available for sale"
    stockQuantity: Int
    "Product stock status"
    stockStatus: StockStatusEnum
    "Tax class"
    taxClass: TaxClassEnum
    "Tax status"
    taxStatus: TaxStatusEnum
    "The template assigned to a node of content"
    template: ContentTemplate
    "Number total of sales"
    totalSales: Int
    "Product type"
    type: ProductTypesEnum
    "The unique resource identifier path"
    uri: String
    "Is product virtual?"
    virtual: Boolean
    "Product&#039;s weight"
    weight: String
    "Product&#039;s width"
    width: String
}

"Single attribute term count"
type SingleAttributeCount {
    "Number of products."
    count: Int
    "Term object."
    node: TermNode
    "Term ID"
    termId: ID!
}

"Single stock status count"
type StockStatusCount {
    "Number of products."
    count: Int
    "Status"
    status: StockStatusEnum!
}

"The tag type"
type Tag implements DatabaseIdentifier & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable {
    "Connection between the Tag type and the ContentNode type"
    contentNodes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: TagToContentNodeConnectionWhereArgs
    ): TagToContentNodeConnection
    "The number of objects connected to the object"
    count: Int
    "The unique identifier stored in the database"
    databaseId: Int!
    "The description of the object"
    description: String
    "Connection between the TermNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedScriptConnection
    "Connection between the TermNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedStylesheetConnection
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "Connection between the Tag type and the post type"
    posts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: TagToPostConnectionWhereArgs
    ): TagToPostConnection
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "The id field matches the WP_Post-&gt;ID field."
    tagId: Int @deprecated(reason: "Deprecated in favor of databaseId")
    "Connection between the Tag type and the Taxonomy type"
    taxonomy: TagToTaxonomyConnectionEdge
    "The name of the taxonomy that the object is associated with"
    taxonomyName: String
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String
}

"Connection between the Tag type and the ContentNode type"
type TagToContentNodeConnection implements Connection & ContentNodeConnection {
    "Edges for the TagToContentNodeConnection connection"
    edges: [TagToContentNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: TagToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type TagToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;TagToContentNodeConnection&quot;"
type TagToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Tag type and the post type"
type TagToPostConnection implements Connection & PostConnection {
    "Edges for the TagToPostConnection connection"
    edges: [TagToPostConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Post!]!
    "Information about pagination in a connection."
    pageInfo: TagToPostConnectionPageInfo!
}

"An edge in a connection"
type TagToPostConnectionEdge implements Edge & PostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Post!
}

"Page Info on the &quot;TagToPostConnection&quot;"
type TagToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Tag type and the Taxonomy type"
type TagToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Taxonomy!
}

"A Tax class object"
type TaxClass implements Node {
    "The globally unique identifier for the tax class."
    id: ID!
    "Tax class name."
    name: String
    "The globally unique identifier for the tax class."
    slug: String
}

"a tax line object"
type TaxLine implements Node {
    "The ID of the order item in the database"
    databaseId: Int
    "The ID of the order item in the database"
    id: ID!
    "Is this a compound tax rate?"
    isCompound: Boolean
    "Tax rate label"
    label: String
    "Object meta data"
    metaData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String],
        "Retrieve meta with matching keys"
        multiple: Boolean
    ): [MetaData]
    "The Id of the order the order item belongs to."
    orderId: Int
    "Tax rate code/name"
    rateCode: String
    "Tax line&#039;s shipping tax total"
    shippingTaxTotal: String
    "Tax line&#039;s tax rate"
    taxRate: TaxRate
    "Tax total (not including shipping taxes)"
    taxTotal: String
}

"A Tax rate object"
type TaxRate implements Node {
    "City names."
    cities: [String]
    "City name."
    city: String @deprecated(reason: "Use &quot;cities&quot; instead.")
    "Tax class. Default is standard."
    class: TaxClassEnum
    "Whether or not this is a compound rate."
    compound: Boolean
    "Country ISO 3166 code."
    country: String
    "The ID of the customer in the database"
    databaseId: Int
    "The globally unique identifier for the tax rate."
    id: ID!
    "Tax rate name."
    name: String
    "Indicates the order that will appear in queries."
    order: Int
    "Postcode/ZIP."
    postcode: String @deprecated(reason: "Use &quot;postcodes&quot; instead.")
    "Postcodes/ZIPs."
    postcodes: [String]
    "Tax priority."
    priority: Int
    "Tax rate."
    rate: String
    "Whether or not this tax rate also gets applied to shipping."
    shipping: Boolean
    "State code."
    state: String
}

"A taxonomy object"
type Taxonomy implements Node {
    "List of Content Types associated with the Taxonomy"
    connectedContentTypes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TaxonomyToContentTypeConnection
    "List of Term Nodes associated with the Taxonomy"
    connectedTerms(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TaxonomyToTermNodeConnection
    "Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description"
    description: String
    "The plural name of the post type within the GraphQL Schema."
    graphqlPluralName: String
    "The singular name of the post type within the GraphQL Schema."
    graphqlSingleName: String
    "Whether the taxonomy is hierarchical"
    hierarchical: Boolean
    "The globally unique identifier of the taxonomy object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Name of the taxonomy shown in the menu. Usually plural."
    label: String
    "The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label"
    name: String
    "Whether the taxonomy is publicly queryable"
    public: Boolean
    "Name of content type to display in REST API &quot;wp/v2&quot; namespace."
    restBase: String
    "The REST Controller class assigned to handling this content type."
    restControllerClass: String
    "Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud"
    showCloud: Boolean
    "Whether to display a column for the taxonomy on its post type listing screens."
    showInAdminColumn: Boolean
    "Whether to add the post type to the GraphQL Schema."
    showInGraphql: Boolean
    "Whether to show the taxonomy in the admin menu"
    showInMenu: Boolean
    "Whether the taxonomy is available for selection in navigation menus."
    showInNavMenus: Boolean
    "Whether to show the taxonomy in the quick/bulk edit panel."
    showInQuickEdit: Boolean
    "Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace."
    showInRest: Boolean
    "Whether to generate and allow a UI for managing terms in this taxonomy in the admin"
    showUi: Boolean
}

"Connection between the Taxonomy type and the ContentType type"
type TaxonomyToContentTypeConnection implements Connection & ContentTypeConnection {
    "Edges for the TaxonomyToContentTypeConnection connection"
    edges: [TaxonomyToContentTypeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentType!]!
    "Information about pagination in a connection."
    pageInfo: TaxonomyToContentTypeConnectionPageInfo!
}

"An edge in a connection"
type TaxonomyToContentTypeConnectionEdge implements ContentTypeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentType!
}

"Page Info on the &quot;TaxonomyToContentTypeConnection&quot;"
type TaxonomyToContentTypeConnectionPageInfo implements ContentTypeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the Taxonomy type and the TermNode type"
type TaxonomyToTermNodeConnection implements Connection & TermNodeConnection {
    "Edges for the TaxonomyToTermNodeConnection connection"
    edges: [TaxonomyToTermNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [TermNode!]!
    "Information about pagination in a connection."
    pageInfo: TaxonomyToTermNodeConnectionPageInfo!
}

"An edge in a connection"
type TaxonomyToTermNodeConnectionEdge implements Edge & TermNodeConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: TermNode!
}

"Page Info on the &quot;TaxonomyToTermNodeConnection&quot;"
type TaxonomyToTermNodeConnectionPageInfo implements PageInfo & TermNodeConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"The template assigned to the node"
type Template_PageNoTitle implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"The template assigned to the node"
type Template_PageWithSidebar implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"The template assigned to the node"
type Template_PageWithWideImage implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"The template assigned to the node"
type Template_SingleWithSidebar implements ContentTemplate {
    "The name of the template"
    templateName: String
}

"Connection between the TermNode type and the EnqueuedScript type"
type TermNodeToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
    "Edges for the TermNodeToEnqueuedScriptConnection connection"
    edges: [TermNodeToEnqueuedScriptConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [EnqueuedScript!]!
    "Information about pagination in a connection."
    pageInfo: TermNodeToEnqueuedScriptConnectionPageInfo!
}

"An edge in a connection"
type TermNodeToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: EnqueuedScript!
}

"Page Info on the &quot;TermNodeToEnqueuedScriptConnection&quot;"
type TermNodeToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the TermNode type and the EnqueuedStylesheet type"
type TermNodeToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
    "Edges for the TermNodeToEnqueuedStylesheetConnection connection"
    edges: [TermNodeToEnqueuedStylesheetConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [EnqueuedStylesheet!]!
    "Information about pagination in a connection."
    pageInfo: TermNodeToEnqueuedStylesheetConnectionPageInfo!
}

"An edge in a connection"
type TermNodeToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: EnqueuedStylesheet!
}

"Page Info on the &quot;TermNodeToEnqueuedStylesheetConnection&quot;"
type TermNodeToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"A theme object"
type Theme implements Node {
    "Name of the theme author(s), could also be a company name. This field is equivalent to WP_Theme-&gt;get( &quot;Author&quot; )."
    author: String
    "URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;AuthorURI&quot; )."
    authorUri: String
    "The description of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Description&quot; )."
    description: String
    "The globally unique identifier of the theme object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Display name of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Name&quot; )."
    name: String
    "The URL of the screenshot for the theme. The screenshot is intended to give an overview of what the theme looks like. This field is equivalent to WP_Theme-&gt;get_screenshot()."
    screenshot: String
    "The theme slug is used to internally match themes. Theme slugs can have subdirectories like: my-theme/sub-theme. This field is equivalent to WP_Theme-&gt;get_stylesheet()."
    slug: String
    "URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;Tags&quot; )."
    tags: [String]
    "A URI if the theme has a website associated with it. The Theme URI is handy for directing users to a theme site for support etc. This field is equivalent to WP_Theme-&gt;get( &quot;ThemeURI&quot; )."
    themeUri: String
    "The current version of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Version&quot; )."
    version: String
}

"A product object for a product type that is unsupported by the current API."
type UnsupportedProduct implements ContentNode & DatabaseIdentifier & DownloadableProduct & InventoriedProduct & MenuItemLinkable & Node & NodeWithComments & NodeWithContentEditor & NodeWithExcerpt & NodeWithFeaturedImage & NodeWithTemplate & NodeWithTitle & Previewable & Product & ProductUnion & ProductWithAttributes & ProductWithDimensions & ProductWithPricing & UniformResourceIdentifiable {
    "Connection between the Product type and the paTest type"
    allPaTest(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToPaTestConnectionWhereArgs
    ): ProductToPaTestConnection
    "The ancestors of the content node."
    ancestors(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductConnectionWhereArgs
    ): ProductToProductConnection @deprecated(reason: "This content type is not hierarchical and typically will not have ancestors")
    "Connection between the Product type and the ProductAttribute type"
    attributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductAttributeConnectionWhereArgs
    ): ProductToProductAttributeConnection
    "Product average count"
    averageRating: Float
    "Product backorders status"
    backorders: BackordersEnum
    "Can product be backordered?"
    backordersAllowed: Boolean
    "Catalog visibility"
    catalogVisibility: CatalogVisibilityEnum
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "Connection between the Product type and the Comment type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToCommentsConnectionWhereArgs
    ): ProductToCommentsConnection
    "The content of the post."
    content(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Connection between the ContentNode type and the ContentType type"
    contentType: ContentNodeToContentTypeConnectionEdge
    "The name of the Content Type the node belongs to"
    contentTypeName: String!
    "Product or variation ID"
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "Date on sale from"
    dateOnSaleFrom: String
    "Date on sale to"
    dateOnSaleTo: String
    "Connection between the ProductWithAttributes type and the VariationAttribute type"
    defaultAttributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductWithAttributesToVariationAttributeConnection
    "Product description"
    description(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The desired slug of the post"
    desiredSlug: String
    "Download expiry"
    downloadExpiry: Int
    "Download limit"
    downloadLimit: Int
    "Is downloadable?"
    downloadable: Boolean
    "Product downloads"
    downloads: [ProductDownload]
    "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editingLockedBy: ContentNodeToEditLockConnectionEdge
    "The RSS enclosure for the object"
    enclosure: String
    "Connection between the ContentNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedScriptConnection
    "Connection between the ContentNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedStylesheetConnection
    "The excerpt of the post."
    excerpt(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "If the product is featured"
    featured: Boolean
    "Connection between the NodeWithFeaturedImage type and the MediaItem type"
    featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
    "The database identifier for the featured image node assigned to the content node"
    featuredImageDatabaseId: Int
    "Globally unique ID of the featured image assigned to the node"
    featuredImageId: ID
    "Connection between the Product type and the MediaItem type"
    galleryImages(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToMediaItemConnectionWhereArgs
    ): ProductToMediaItemConnection
    "Connection between the Product type and the GlobalProductAttribute type"
    globalAttributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductToGlobalProductAttributeConnection
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "Whether the product object is password protected."
    hasPassword: Boolean
    "Product&#039;s height"
    height: String
    "Product or variation global ID"
    id: ID!
    "Main image"
    image: MediaItem
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The user that most recently edited the node"
    lastEditedBy: ContentNodeToEditLastConnectionEdge
    "Product&#039;s length"
    length: String
    "The permalink of the post"
    link: String
    "Connection between the Product type and the LocalProductAttribute type"
    localAttributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductToLocalProductAttributeConnection
    "Low stock amount"
    lowStockAmount: Int
    "If product manage stock"
    manageStock: ManageStockEnum
    "Menu order"
    menuOrder: Int
    "Object meta data"
    metaData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String],
        "Retrieve meta with matching keys"
        multiple: Boolean
    ): [MetaData]
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "Product name"
    name: String
    "Is product on sale?"
    onSale: Boolean
    "The parent of the content node."
    parent(
        "Arguments for filtering the connection"
        where: ProductToParentConnectionWhereArgs
    ): ProductToParentConnectionEdge @deprecated(reason: "This content type is not hierarchical and typically will not have a parent")
    "The password for the product object."
    password: String
    "Connection between the Product type and the Product type"
    preview(
        "Arguments for filtering the connection"
        where: ProductToPreviewConnectionWhereArgs
    ): ProductToPreviewConnectionEdge
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
    "Product&#039;s active price"
    price(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Connection between the Product type and the productCategory type"
    productCategories(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductCategoryConnectionWhereArgs
    ): ProductToProductCategoryConnection
    "The id field matches the WP_Post-&gt;ID field."
    productId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
    "Connection between the Product type and the productTag type"
    productTags(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductTagConnectionWhereArgs
    ): ProductToProductTagConnection
    "Connection between the Product type and the productType type"
    productTypes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductTypeConnectionWhereArgs
    ): ProductToProductTypeConnection
    "Can product be purchased?"
    purchasable: Boolean
    "Purchase note"
    purchaseNote: String
    "Product&#039;s regular price"
    regularPrice(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Connection between the Product type and the ProductUnion type"
    related(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductUnionConnectionWhereArgs
    ): ProductToProductUnionConnection
    "Product review count"
    reviewCount: Int
    "Connection between the Product type and the Comment type"
    reviews(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToCommentConnectionWhereArgs
    ): ProductToCommentConnection
    "If reviews are allowed"
    reviewsAllowed: Boolean
    "Product&#039;s sale price"
    salePrice(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "shipping class ID"
    shippingClassId: Int
    "Connection between the Product type and the shippingClass type"
    shippingClasses(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToShippingClassConnectionWhereArgs
    ): ProductToShippingClassConnection
    "Does product need to be shipped?"
    shippingRequired: Boolean
    "Is product shipping taxable?"
    shippingTaxable: Boolean
    "Product short description"
    shortDescription(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Product SKU"
    sku: String
    "Product slug"
    slug: String
    "If should be sold individually"
    soldIndividually: Boolean
    "The current status of the object"
    status: String
    "Number of items available for sale"
    stockQuantity: Int
    "Product stock status"
    stockStatus: StockStatusEnum
    "Tax class"
    taxClass: TaxClassEnum
    "Tax status"
    taxStatus: TaxStatusEnum
    "The template assigned to the node"
    template: ContentTemplate
    "Connection between the Product type and the TermNode type"
    terms(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToTermNodeConnectionWhereArgs
    ): ProductToTermNodeConnection
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Number total of sales"
    totalSales: Int
    "Product type"
    type: ProductTypesEnum
    "Connection between the Product type and the ProductUnion type"
    upsell(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToUpsellConnectionWhereArgs
    ): ProductToUpsellConnection
    "The unique resource identifier path"
    uri: String
    "Is product virtual?"
    virtual: Boolean
    "Connection between the Product type and the visibleProduct type"
    visibleProducts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToVisibleProductConnectionWhereArgs
    ): ProductToVisibleProductConnection
    "Product&#039;s weight"
    weight: String
    "Product&#039;s width"
    width: String
}

"The payload for the updateCategory mutation."
type UpdateCategoryPayload {
    "The created category"
    category: Category
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
}

"The payload for the updateComment mutation."
type UpdateCommentPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The comment that was created"
    comment: Comment
    "Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache"
    success: Boolean
}

"The payload for the updateCoupon mutation."
type UpdateCouponPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    code: String
    coupon: Coupon
}

"The payload for the updateCustomer mutation."
type UpdateCustomerPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    customer: Customer
}

"The payload for the updateItemQuantities mutation."
type UpdateItemQuantitiesPayload {
    cart: Cart
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    items: [CartItem]
    removed: [CartItem]
    updated: [CartItem]
}

"The payload for the updateMediaItem mutation."
type UpdateMediaItemPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The MediaItem object mutation type."
    mediaItem: MediaItem
}

"The payload for the updateMethodOnShippingZone mutation."
type UpdateMethodOnShippingZonePayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    method: ShippingZoneToShippingMethodConnectionEdge
    shippingZone: ShippingZone
}

"The payload for the updateOrder mutation."
type UpdateOrderPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    order: Order
}

"The payload for the updatePaTest mutation."
type UpdatePaTestPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created pa_test"
    paTest: PaTest
}

"The payload for the updatePage mutation."
type UpdatePagePayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The Post object mutation type."
    page: Page
}

"The payload for the updatePostFormat mutation."
type UpdatePostFormatPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created post_format"
    postFormat: PostFormat
}

"The payload for the updatePost mutation."
type UpdatePostPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The Post object mutation type."
    post: Post
}

"The payload for the updateProductCategory mutation."
type UpdateProductCategoryPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created product_cat"
    productCategory: ProductCategory
}

"The payload for the updateProduct mutation."
type UpdateProductPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The Post object mutation type."
    product: Product
}

"The payload for the updateProductTag mutation."
type UpdateProductTagPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created product_tag"
    productTag: ProductTag
}

"The payload for the updateProductType mutation."
type UpdateProductTypePayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created product_type"
    productType: ProductType
}

"The payload for the updateReview mutation."
type UpdateReviewPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The product rating of the review that was created"
    rating: Float
    "The product review that was created"
    review: Comment
}

"The payload for the updateSession mutation."
type UpdateSessionPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    customer: Customer
    session: [MetaData]
}

"The payload for the updateSettings mutation."
type UpdateSettingsPayload {
    "Update all settings."
    allSettings: Settings
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Update the DiscussionSettings setting."
    discussionSettings: DiscussionSettings
    "Update the GeneralSettings setting."
    generalSettings: GeneralSettings
    "Update the ReadingSettings setting."
    readingSettings: ReadingSettings
    "Update the WritingSettings setting."
    writingSettings: WritingSettings
}

"The payload for the updateShippingClass mutation."
type UpdateShippingClassPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created product_shipping_class"
    shippingClass: ShippingClass
}

"The payload for the updateShippingMethod mutation."
type UpdateShippingMethodPayload {
    cart: Cart
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
}

"The payload for the updateShippingZoneLocations mutation."
type UpdateShippingZoneLocationsPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    locations: [ShippingLocation]
    shippingZone: ShippingZone
}

"The payload for the updateShippingZone mutation."
type UpdateShippingZonePayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    shippingZone: ShippingZone
}

"The payload for the updateTag mutation."
type UpdateTagPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created post_tag"
    tag: Tag
}

"The payload for the updateTaxRate mutation."
type UpdateTaxRatePayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    taxRate: TaxRate
}

"The payload for the updateUser mutation."
type UpdateUserPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The User object mutation type."
    user: User
}

"The payload for the updateVisibleProduct mutation."
type UpdateVisibleProductPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The created product_visibility"
    visibleProduct: VisibleProduct
}

"A User object"
type User implements Commenter & DatabaseIdentifier & Node & UniformResourceIdentifiable {
    "Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument."
    avatar(
        "Whether to always show the default image, never the Gravatar. Default false"
        forceDefault: Boolean,
        "The rating level of the avatar."
        rating: AvatarRatingEnum,
        "The size attribute of the avatar field can be used to fetch avatars of different sizes. The value corresponds to the dimension in pixels to fetch. The default is 96 pixels."
        size: Int = 96
    ): Avatar
    "User metadata option name. Usually it will be &quot;wp_capabilities&quot;."
    capKey: String
    "A list of capabilities (permissions) granted to the user"
    capabilities: [String]
    "Connection between the User type and the Comment type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: UserToCommentConnectionWhereArgs
    ): UserToCommentConnection
    "Identifies the primary key from the database."
    databaseId: Int!
    "Description of the user."
    description: String
    "Email address of the user. This is equivalent to the WP_User-&gt;user_email property."
    email: String
    "Connection between the User type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): UserToEnqueuedScriptConnection
    "Connection between the User type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): UserToEnqueuedStylesheetConnection
    "A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP_User-&gt;allcaps."
    extraCapabilities: [String]
    "First name of the user. This is equivalent to the WP_User-&gt;user_first_name property."
    firstName: String
    "The globally unique identifier for the user object."
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property."
    lastName: String
    "The preferred language locale set for the user. Value derived from get_user_locale()."
    locale: String
    "Connection between the User type and the mediaItem type"
    mediaItems(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: UserToMediaItemConnectionWhereArgs
    ): UserToMediaItemConnection
    "Display name of the user. This is equivalent to the WP_User-&gt;display_name property."
    name: String
    "The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename"
    nicename: String
    "Nickname of the user."
    nickname: String
    "Connection between the User type and the page type"
    pages(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: UserToPageConnectionWhereArgs
    ): UserToPageConnection
    "Connection between the User type and the post type"
    posts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: UserToPostConnectionWhereArgs
    ): UserToPostConnection
    "The date the user registered or was created. The field follows a full ISO8601 date string format."
    registeredDate: String
    "Connection between the User and Revisions authored by the user"
    revisions(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: UserToRevisionsConnectionWhereArgs
    ): UserToRevisionsConnection
    "Connection between the User type and the UserRole type"
    roles(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): UserToUserRoleConnection
    "Whether the Toolbar should be displayed when the user is viewing the site."
    shouldShowAdminToolbar: Boolean
    "The slug for the user. This field is equivalent to WP_User-&gt;user_nicename"
    slug: String
    "The unique resource identifier path"
    uri: String
    "A website url that is associated with the user."
    url: String
    "The Id of the user. Equivalent to WP_User-&gt;ID"
    userId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")
    "Username for the user. This field is equivalent to WP_User-&gt;user_login."
    username: String
    "A JWT token that can be used in future requests to for WooCommerce session identification"
    wooSessionToken: String
}

"A user role object"
type UserRole implements Node {
    "The capabilities that belong to this role"
    capabilities: [String]
    "The display name of the role"
    displayName: String
    "The globally unique identifier for the user role object."
    id: ID!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "The registered name of the role"
    name: String
}

"Connection between the User type and the Comment type"
type UserToCommentConnection implements CommentConnection & Connection {
    "Edges for the UserToCommentConnection connection"
    edges: [UserToCommentConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Comment!]!
    "Information about pagination in a connection."
    pageInfo: UserToCommentConnectionPageInfo!
}

"An edge in a connection"
type UserToCommentConnectionEdge implements CommentConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Comment!
}

"Page Info on the &quot;UserToCommentConnection&quot;"
type UserToCommentConnectionPageInfo implements CommentConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the User type and the EnqueuedScript type"
type UserToEnqueuedScriptConnection implements Connection & EnqueuedScriptConnection {
    "Edges for the UserToEnqueuedScriptConnection connection"
    edges: [UserToEnqueuedScriptConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [EnqueuedScript!]!
    "Information about pagination in a connection."
    pageInfo: UserToEnqueuedScriptConnectionPageInfo!
}

"An edge in a connection"
type UserToEnqueuedScriptConnectionEdge implements Edge & EnqueuedScriptConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: EnqueuedScript!
}

"Page Info on the &quot;UserToEnqueuedScriptConnection&quot;"
type UserToEnqueuedScriptConnectionPageInfo implements EnqueuedScriptConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the User type and the EnqueuedStylesheet type"
type UserToEnqueuedStylesheetConnection implements Connection & EnqueuedStylesheetConnection {
    "Edges for the UserToEnqueuedStylesheetConnection connection"
    edges: [UserToEnqueuedStylesheetConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [EnqueuedStylesheet!]!
    "Information about pagination in a connection."
    pageInfo: UserToEnqueuedStylesheetConnectionPageInfo!
}

"An edge in a connection"
type UserToEnqueuedStylesheetConnectionEdge implements Edge & EnqueuedStylesheetConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: EnqueuedStylesheet!
}

"Page Info on the &quot;UserToEnqueuedStylesheetConnection&quot;"
type UserToEnqueuedStylesheetConnectionPageInfo implements EnqueuedStylesheetConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the User type and the mediaItem type"
type UserToMediaItemConnection implements Connection & MediaItemConnection {
    "Edges for the UserToMediaItemConnection connection"
    edges: [UserToMediaItemConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [MediaItem!]!
    "Information about pagination in a connection."
    pageInfo: UserToMediaItemConnectionPageInfo!
}

"An edge in a connection"
type UserToMediaItemConnectionEdge implements Edge & MediaItemConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: MediaItem!
}

"Page Info on the &quot;UserToMediaItemConnection&quot;"
type UserToMediaItemConnectionPageInfo implements MediaItemConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the User type and the page type"
type UserToPageConnection implements Connection & PageConnection {
    "Edges for the UserToPageConnection connection"
    edges: [UserToPageConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Page!]!
    "Information about pagination in a connection."
    pageInfo: UserToPageConnectionPageInfo!
}

"An edge in a connection"
type UserToPageConnectionEdge implements Edge & PageConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Page!
}

"Page Info on the &quot;UserToPageConnection&quot;"
type UserToPageConnectionPageInfo implements PageConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the User type and the post type"
type UserToPostConnection implements Connection & PostConnection {
    "Edges for the UserToPostConnection connection"
    edges: [UserToPostConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Post!]!
    "Information about pagination in a connection."
    pageInfo: UserToPostConnectionPageInfo!
}

"An edge in a connection"
type UserToPostConnectionEdge implements Edge & PostConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Post!
}

"Page Info on the &quot;UserToPostConnection&quot;"
type UserToPostConnectionPageInfo implements PageInfo & PostConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the User type and the ContentNode type"
type UserToRevisionsConnection implements Connection & ContentNodeConnection {
    "Edges for the UserToRevisionsConnection connection"
    edges: [UserToRevisionsConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: UserToRevisionsConnectionPageInfo!
}

"An edge in a connection"
type UserToRevisionsConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;UserToRevisionsConnection&quot;"
type UserToRevisionsConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the User type and the UserRole type"
type UserToUserRoleConnection implements Connection & UserRoleConnection {
    "Edges for the UserToUserRoleConnection connection"
    edges: [UserToUserRoleConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [UserRole!]!
    "Information about pagination in a connection."
    pageInfo: UserToUserRoleConnectionPageInfo!
}

"An edge in a connection"
type UserToUserRoleConnectionEdge implements Edge & UserRoleConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: UserRole!
}

"Page Info on the &quot;UserToUserRoleConnection&quot;"
type UserToUserRoleConnectionPageInfo implements PageInfo & UserRoleConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"A variable product object"
type VariableProduct implements ContentNode & DatabaseIdentifier & InventoriedProduct & MenuItemLinkable & Node & NodeWithComments & NodeWithContentEditor & NodeWithExcerpt & NodeWithFeaturedImage & NodeWithTemplate & NodeWithTitle & Previewable & Product & ProductUnion & ProductWithAttributes & ProductWithDimensions & ProductWithPricing & ProductWithVariations & UniformResourceIdentifiable {
    "Connection between the Product type and the paTest type"
    allPaTest(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToPaTestConnectionWhereArgs
    ): ProductToPaTestConnection
    "The ancestors of the content node."
    ancestors(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductConnectionWhereArgs
    ): ProductToProductConnection @deprecated(reason: "This content type is not hierarchical and typically will not have ancestors")
    "Connection between the Product type and the ProductAttribute type"
    attributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductAttributeConnectionWhereArgs
    ): ProductToProductAttributeConnection
    "Product average count"
    averageRating: Float
    "Product backorders status"
    backorders: BackordersEnum
    "Can product be backordered?"
    backordersAllowed: Boolean
    "Catalog visibility"
    catalogVisibility: CatalogVisibilityEnum
    "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
    commentCount: Int
    "Whether the comments are open or closed for this particular post."
    commentStatus: String
    "Connection between the Product type and the Comment type"
    comments(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToCommentsConnectionWhereArgs
    ): ProductToCommentsConnection
    "The content of the post."
    content(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Connection between the ContentNode type and the ContentType type"
    contentType: ContentNodeToContentTypeConnectionEdge
    "The name of the Content Type the node belongs to"
    contentTypeName: String!
    "Connection between the VariableProduct type and the ProductUnion type"
    crossSell(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: VariableProductToProductUnionConnectionWhereArgs
    ): VariableProductToProductUnionConnection
    "Product or variation ID"
    databaseId: Int!
    "Post publishing date."
    date: String
    "The publishing date set in GMT."
    dateGmt: String
    "Date on sale from"
    dateOnSaleFrom: String
    "Date on sale to"
    dateOnSaleTo: String
    "Connection between the ProductWithAttributes type and the VariationAttribute type"
    defaultAttributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductWithAttributesToVariationAttributeConnection
    "Product description"
    description(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "The desired slug of the post"
    desiredSlug: String
    "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
    editingLockedBy: ContentNodeToEditLockConnectionEdge
    "The RSS enclosure for the object"
    enclosure: String
    "Connection between the ContentNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedScriptConnection
    "Connection between the ContentNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ContentNodeToEnqueuedStylesheetConnection
    "The excerpt of the post."
    excerpt(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "If the product is featured"
    featured: Boolean
    "Connection between the NodeWithFeaturedImage type and the MediaItem type"
    featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
    "The database identifier for the featured image node assigned to the content node"
    featuredImageDatabaseId: Int
    "Globally unique ID of the featured image assigned to the node"
    featuredImageId: ID
    "Connection between the Product type and the MediaItem type"
    galleryImages(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToMediaItemConnectionWhereArgs
    ): ProductToMediaItemConnection
    "Connection between the Product type and the GlobalProductAttribute type"
    globalAttributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductToGlobalProductAttributeConnection
    "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
    guid: String
    "Whether the product object is password protected."
    hasPassword: Boolean
    "Product&#039;s height"
    height: String
    "Product or variation global ID"
    id: ID!
    "Main image"
    image: MediaItem
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is a node in the preview state"
    isPreview: Boolean
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The user that most recently edited the node"
    lastEditedBy: ContentNodeToEditLastConnectionEdge
    "Product&#039;s length"
    length: String
    "The permalink of the post"
    link: String
    "Connection between the Product type and the LocalProductAttribute type"
    localAttributes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): ProductToLocalProductAttributeConnection
    "Low stock amount"
    lowStockAmount: Int
    "If product manage stock"
    manageStock: ManageStockEnum
    "Menu order"
    menuOrder: Int
    "Object meta data"
    metaData(
        "Retrieve meta by key"
        key: String,
        "Retrieve multiple metas by key"
        keysIn: [String],
        "Retrieve meta with matching keys"
        multiple: Boolean
    ): [MetaData]
    "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
    modified: String
    "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
    modifiedGmt: String
    "Product name"
    name: String
    "Is product on sale?"
    onSale: Boolean
    "The parent of the content node."
    parent(
        "Arguments for filtering the connection"
        where: ProductToParentConnectionWhereArgs
    ): ProductToParentConnectionEdge @deprecated(reason: "This content type is not hierarchical and typically will not have a parent")
    "The password for the product object."
    password: String
    "Connection between the Product type and the Product type"
    preview(
        "Arguments for filtering the connection"
        where: ProductToPreviewConnectionWhereArgs
    ): ProductToPreviewConnectionEdge
    "The database id of the preview node"
    previewRevisionDatabaseId: Int
    "Whether the object is a node in the preview state"
    previewRevisionId: ID
    "Product&#039;s active price"
    price(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Connection between the Product type and the productCategory type"
    productCategories(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductCategoryConnectionWhereArgs
    ): ProductToProductCategoryConnection
    "The id field matches the WP_Post-&gt;ID field."
    productId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
    "Connection between the Product type and the productTag type"
    productTags(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductTagConnectionWhereArgs
    ): ProductToProductTagConnection
    "Connection between the Product type and the productType type"
    productTypes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductTypeConnectionWhereArgs
    ): ProductToProductTypeConnection
    "Can product be purchased?"
    purchasable: Boolean
    "Purchase note"
    purchaseNote: String
    "Product&#039;s regular price"
    regularPrice(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "Connection between the Product type and the ProductUnion type"
    related(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToProductUnionConnectionWhereArgs
    ): ProductToProductUnionConnection
    "Product review count"
    reviewCount: Int
    "Connection between the Product type and the Comment type"
    reviews(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToCommentConnectionWhereArgs
    ): ProductToCommentConnection
    "If reviews are allowed"
    reviewsAllowed: Boolean
    "Product&#039;s sale price"
    salePrice(
        "Format of the price"
        format: PricingFieldFormatEnum
    ): String
    "shipping class ID"
    shippingClassId: Int
    "Connection between the Product type and the shippingClass type"
    shippingClasses(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToShippingClassConnectionWhereArgs
    ): ProductToShippingClassConnection
    "Does product need to be shipped?"
    shippingRequired: Boolean
    "Is product shipping taxable?"
    shippingTaxable: Boolean
    "Product short description"
    shortDescription(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Product SKU"
    sku: String
    "Product slug"
    slug: String
    "If should be sold individually"
    soldIndividually: Boolean
    "The current status of the object"
    status: String
    "Number of items available for sale"
    stockQuantity: Int
    "Product stock status"
    stockStatus: StockStatusEnum
    "Tax class"
    taxClass: TaxClassEnum
    "Tax status"
    taxStatus: TaxStatusEnum
    "The template assigned to the node"
    template: ContentTemplate
    "Connection between the Product type and the TermNode type"
    terms(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToTermNodeConnectionWhereArgs
    ): ProductToTermNodeConnection
    "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
    title(
        "Format of the field output"
        format: PostObjectFieldFormatEnum
    ): String
    "Number total of sales"
    totalSales: Int
    "Product type"
    type: ProductTypesEnum
    "Connection between the Product type and the ProductUnion type"
    upsell(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToUpsellConnectionWhereArgs
    ): ProductToUpsellConnection
    "The unique resource identifier path"
    uri: String
    "Connection between the ProductWithVariations type and the ProductVariation type"
    variations(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductWithVariationsToProductVariationConnectionWhereArgs
    ): ProductWithVariationsToProductVariationConnection
    "Connection between the Product type and the visibleProduct type"
    visibleProducts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: ProductToVisibleProductConnectionWhereArgs
    ): ProductToVisibleProductConnection
    "Product&#039;s weight"
    weight: String
    "Product&#039;s width"
    width: String
}

"Connection between the VariableProduct type and the ProductUnion type"
type VariableProductToProductUnionConnection implements Connection & ProductUnionConnection {
    "Edges for the VariableProductToProductUnionConnection connection"
    edges: [VariableProductToProductUnionConnectionEdge!]!
    "Total products founds"
    found: Int
    "The nodes of the connection, without the edges"
    nodes: [ProductUnion!]!
    "Information about pagination in a connection."
    pageInfo: VariableProductToProductUnionConnectionPageInfo!
}

"An edge in a connection"
type VariableProductToProductUnionConnectionEdge implements Edge & ProductUnionConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ProductUnion!
}

"Page Info on the &quot;VariableProductToProductUnionConnection&quot;"
type VariableProductToProductUnionConnectionPageInfo implements PageInfo & ProductUnionConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"A product variation attribute object"
type VariationAttribute implements Attribute & Node {
    "The Database ID of the attribute."
    attributeId: Int
    "The Global ID of the attribute."
    id: ID!
    "Label of attribute"
    label: String
    "Name of attribute"
    name: String
    "Selected value of attribute"
    value: String
}

"The visibleProduct type"
type VisibleProduct implements DatabaseIdentifier & Node & TermNode & UniformResourceIdentifiable {
    "Connection between the VisibleProduct type and the ContentNode type"
    contentNodes(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: VisibleProductToContentNodeConnectionWhereArgs
    ): VisibleProductToContentNodeConnection
    "The number of objects connected to the object"
    count: Int
    "The unique identifier stored in the database"
    databaseId: Int!
    "The description of the object"
    description: String
    "Connection between the TermNode type and the EnqueuedScript type"
    enqueuedScripts(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedScriptConnection
    "Connection between the TermNode type and the EnqueuedStylesheet type"
    enqueuedStylesheets(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int
    ): TermNodeToEnqueuedStylesheetConnection
    "The globally unique ID for the object"
    id: ID!
    "Whether the node is a Comment"
    isComment: Boolean!
    "Whether the node is a Content Node"
    isContentNode: Boolean!
    "Whether the node represents the front page."
    isFrontPage: Boolean!
    "Whether  the node represents the blog page."
    isPostsPage: Boolean!
    "Whether the object is restricted from the current viewer"
    isRestricted: Boolean
    "Whether the node is a Term"
    isTermNode: Boolean!
    "The link to the term"
    link: String
    "The human friendly name of the object."
    name: String
    "Connection between the VisibleProduct type and the Product type"
    products(
        "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
        after: String,
        "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
        before: String,
        "The number of items to return after the referenced \"after\" cursor"
        first: Int,
        "The number of items to return before the referenced \"before\" cursor"
        last: Int,
        "Arguments for filtering the connection"
        where: VisibleProductToProductConnectionWhereArgs
    ): VisibleProductToProductConnection
    "An alphanumeric identifier for the object unique to its type."
    slug: String
    "Connection between the VisibleProduct type and the Taxonomy type"
    taxonomy: VisibleProductToTaxonomyConnectionEdge
    "The name of the taxonomy that the object is associated with"
    taxonomyName: String
    "The ID of the term group that this term object belongs to"
    termGroupId: Int
    "The taxonomy ID that the object is associated with"
    termTaxonomyId: Int
    "The unique resource identifier path"
    uri: String
    "The id field matches the WP_Post-&gt;ID field."
    visibleProductId: Int @deprecated(reason: "Deprecated in favor of databaseId")
}

"Connection between the VisibleProduct type and the ContentNode type"
type VisibleProductToContentNodeConnection implements Connection & ContentNodeConnection {
    "Edges for the VisibleProductToContentNodeConnection connection"
    edges: [VisibleProductToContentNodeConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [ContentNode!]!
    "Information about pagination in a connection."
    pageInfo: VisibleProductToContentNodeConnectionPageInfo!
}

"An edge in a connection"
type VisibleProductToContentNodeConnectionEdge implements ContentNodeConnectionEdge & Edge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: ContentNode!
}

"Page Info on the &quot;VisibleProductToContentNodeConnection&quot;"
type VisibleProductToContentNodeConnectionPageInfo implements ContentNodeConnectionPageInfo & PageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the VisibleProduct type and the Product type"
type VisibleProductToProductConnection implements Connection & ProductConnection {
    "Edges for the VisibleProductToProductConnection connection"
    edges: [VisibleProductToProductConnectionEdge!]!
    "The nodes of the connection, without the edges"
    nodes: [Product!]!
    "Information about pagination in a connection."
    pageInfo: VisibleProductToProductConnectionPageInfo!
}

"An edge in a connection"
type VisibleProductToProductConnectionEdge implements Edge & ProductConnectionEdge {
    "A cursor for use in pagination"
    cursor: String
    "The item at the end of the edge"
    node: Product!
}

"Page Info on the &quot;VisibleProductToProductConnection&quot;"
type VisibleProductToProductConnectionPageInfo implements PageInfo & ProductConnectionPageInfo & WPPageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

"Connection between the VisibleProduct type and the Taxonomy type"
type VisibleProductToTaxonomyConnectionEdge implements Edge & OneToOneConnection & TaxonomyConnectionEdge {
    "Opaque reference to the nodes position in the connection. Value can be used with pagination args."
    cursor: String
    "The node of the connection, without the edges"
    node: Taxonomy!
}

"A WC setting object"
type WCSetting {
    "Default value for the setting."
    default: String
    "A human readable description for the setting used in user interfaces."
    description: String
    "The globally unique identifier for the WC setting."
    id: ID!
    "A human readable label for the setting used in user interfaces."
    label: String
    "Placeholder text to be displayed in text inputs."
    placeholder: String
    "Additional help text shown to the user about the setting"
    tip: String
    "Type of setting."
    type: WCSettingTypeEnum
    "Setting value."
    value: String
}

"Woonuxt Social Items"
type WooNuxtSocialItems {
    handle: String
    provider: String
    url: String
}

"Woonuxt Settings"
type WoonuxtOptions {
    currencyCode: String
    currencySymbol: String
    domain: String
    frontEndUrl: String
    global_attributes: [WoonuxtOptionsGlobalAttributes]
    logo: String
    maxPrice: Int
    primary_color: String
    productsPerPage: Int
    publicIntrospectionEnabled: String
    stripeSettings: WoonuxtOptionsStripeSettings
    wooCommerceSettingsVersion: String
    wooNuxtSEO: [WooNuxtSocialItems]
}

"Woonuxt Global attributes for filtering"
type WoonuxtOptionsGlobalAttributes {
    hideEmpty: Boolean
    label: String
    openByDefault: Boolean
    showCount: Boolean
    slug: String
}

type WoonuxtOptionsStripeSettings {
    enabled: String
    publishable_key: String
    test_publishable_key: String
    testmode: String
}

"The payload for the writeReview mutation."
type WriteReviewPayload {
    "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The product rating of the review that was created"
    rating: Float
    "The product review that was created"
    review: Comment
}

"The writing setting type"
type WritingSettings {
    "Default post category."
    defaultCategory: Int
    "Default post format."
    defaultPostFormat: String
    "Convert emoticons like :-) and :-P to graphics on display."
    useSmilies: Boolean
}

"Collection statistic attributes operators"
enum AttributeOperatorEnum {
    AND
    IN
    NOT_IN
}

"What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option"
enum AvatarRatingEnum {
    "Indicates a G level avatar rating level."
    G
    "Indicates a PG level avatar rating level."
    PG
    "Indicates an R level avatar rating level."
    R
    "Indicates an X level avatar rating level."
    X
}

"Product backorder enumeration"
enum BackordersEnum {
    NO
    NOTIFY
    YES
}

"Cart error type enumeration"
enum CartErrorType {
    INVALID_CART_ITEM
    INVALID_COUPON
    INVALID_SHIPPING_METHOD
    UNKNOWN
}

"Product catalog visibility enumeration"
enum CatalogVisibilityEnum {
    CATALOG
    HIDDEN
    SEARCH
    VISIBLE
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum CategoryIdType {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"The Type of Identifier used to fetch a single comment node. Default is \"ID\". To be used along with the \"id\" field."
enum CommentNodeIdTypeEnum {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
}

"The status of the comment object."
enum CommentStatusEnum {
    "Comments with the Approved status"
    APPROVE
    "Comments with the Unapproved status"
    HOLD
    "Comments with the Spam status"
    SPAM
    "Comments with the Trash status"
    TRASH
}

"Options for ordering the connection"
enum CommentsConnectionOrderbyEnum {
    "Order by browser user agent of the commenter."
    COMMENT_AGENT
    "Order by approval status of the comment."
    COMMENT_APPROVED
    "Order by name of the comment author."
    COMMENT_AUTHOR
    "Order by e-mail of the comment author."
    COMMENT_AUTHOR_EMAIL
    "Order by IP address of the comment author."
    COMMENT_AUTHOR_IP
    "Order by URL address of the comment author."
    COMMENT_AUTHOR_URL
    "Order by the comment contents."
    COMMENT_CONTENT
    "Order by date/time timestamp of the comment."
    COMMENT_DATE
    "Order by GMT timezone date/time timestamp of the comment."
    COMMENT_DATE_GMT
    "Order by the globally unique identifier for the comment object"
    COMMENT_ID
    "Order by the array list of comment IDs listed in the where clause."
    COMMENT_IN
    "Order by the comment karma score."
    COMMENT_KARMA
    "Order by the comment parent ID."
    COMMENT_PARENT
    "Order by the post object ID."
    COMMENT_POST_ID
    "Order by the the type of comment, such as 'comment', 'pingback', or 'trackback'."
    COMMENT_TYPE
    "Order by the user ID."
    USER_ID
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum ContentNodeIdTypeEnum {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
    "Identify a resource by the URI."
    URI
}

"Allowed Content Types"
enum ContentTypeEnum {
    "The Type of Content object"
    ATTACHMENT
    "The Type of Content object"
    PAGE
    "The Type of Content object"
    POST
    "The Type of Content object"
    PRODUCT
}

"The Type of Identifier used to fetch a single Content Type node. To be used along with the \"id\" field. Default is \"ID\"."
enum ContentTypeIdTypeEnum {
    "The globally unique ID"
    ID
    "The name of the content type."
    NAME
}

"Allowed Content Types of the Category taxonomy."
enum ContentTypesOfCategoryEnum {
    "The Type of Content object"
    POST
}

"Allowed Content Types of the PaTest taxonomy."
enum ContentTypesOfPaTestEnum {
    "The Type of Content object"
    PRODUCT
}

"Allowed Content Types of the PostFormat taxonomy."
enum ContentTypesOfPostFormatEnum {
    "The Type of Content object"
    POST
}

"Allowed Content Types of the ProductCategory taxonomy."
enum ContentTypesOfProductCategoryEnum {
    "The Type of Content object"
    PRODUCT
}

"Allowed Content Types of the ProductTag taxonomy."
enum ContentTypesOfProductTagEnum {
    "The Type of Content object"
    PRODUCT
}

"Allowed Content Types of the ProductType taxonomy."
enum ContentTypesOfProductTypeEnum {
    "The Type of Content object"
    PRODUCT
}

"Allowed Content Types of the ShippingClass taxonomy."
enum ContentTypesOfShippingClassEnum {
    "The Type of Content object"
    PRODUCT
}

"Allowed Content Types of the Tag taxonomy."
enum ContentTypesOfTagEnum {
    "The Type of Content object"
    POST
}

"Allowed Content Types of the VisibleProduct taxonomy."
enum ContentTypesOfVisibleProductEnum {
    "The Type of Content object"
    PRODUCT
}

"Countries enumeration"
enum CountriesEnum {
    AD
    AE
    AF
    AG
    AI
    AL
    AM
    AO
    AQ
    AR
    AS
    AT
    AU
    AW
    AX
    AZ
    BA
    BB
    BD
    BE
    BF
    BG
    BH
    BI
    BJ
    BL
    BM
    BN
    BO
    BQ
    BR
    BS
    BT
    BV
    BW
    BY
    BZ
    CA
    CC
    CD
    CF
    CG
    CH
    CI
    CK
    CL
    CM
    CN
    CO
    CR
    CU
    CV
    CW
    CX
    CY
    CZ
    DE
    DJ
    DK
    DM
    DO
    DZ
    EC
    EE
    EG
    EH
    ER
    ES
    ET
    FI
    FJ
    FK
    FM
    FO
    FR
    GA
    GB
    GD
    GE
    GF
    GG
    GH
    GI
    GL
    GM
    GN
    GP
    GQ
    GR
    GS
    GT
    GU
    GW
    GY
    HK
    HM
    HN
    HR
    HT
    HU
    ID
    IE
    IL
    IM
    IN
    IO
    IQ
    IR
    IS
    IT
    JE
    JM
    JO
    JP
    KE
    KG
    KH
    KI
    KM
    KN
    KP
    KR
    KW
    KY
    KZ
    LA
    LB
    LC
    LI
    LK
    LR
    LS
    LT
    LU
    LV
    LY
    MA
    MC
    MD
    ME
    MF
    MG
    MH
    MK
    ML
    MM
    MN
    MO
    MP
    MQ
    MR
    MS
    MT
    MU
    MV
    MW
    MX
    MY
    MZ
    NA
    NC
    NE
    NF
    NG
    NI
    NL
    NO
    NP
    NR
    NU
    NZ
    OM
    PA
    PE
    PF
    PG
    PH
    PK
    PL
    PM
    PN
    PR
    PS
    PT
    PW
    PY
    QA
    RE
    RO
    RS
    RU
    RW
    SA
    SB
    SC
    SD
    SE
    SG
    SH
    SI
    SJ
    SK
    SL
    SM
    SN
    SO
    SR
    SS
    ST
    SV
    SX
    SY
    SZ
    TC
    TD
    TF
    TG
    TH
    TJ
    TK
    TL
    TM
    TN
    TO
    TR
    TT
    TV
    TW
    TZ
    UA
    UG
    UM
    US
    UY
    UZ
    VA
    VC
    VE
    VG
    VI
    VN
    VU
    WF
    WS
    YE
    YT
    ZA
    ZM
    ZW
}

"The Type of Identifier used to fetch a single Coupon. Default is ID."
enum CouponIdTypeEnum {
    "Coupon code."
    CODE
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
}

"Currencies enumeration"
enum CurrencyEnum {
    "United Arab Emirates dirham"
    AED
    "Afghan afghani"
    AFN
    "Albanian lek"
    ALL
    "Armenian dram"
    AMD
    "Netherlands Antillean guilder"
    ANG
    "Angolan kwanza"
    AOA
    "Argentine peso"
    ARS
    "Australian dollar"
    AUD
    "Aruban florin"
    AWG
    "Azerbaijani manat"
    AZN
    "Bosnia and Herzegovina convertible mark"
    BAM
    "Barbadian dollar"
    BBD
    "Bangladeshi taka"
    BDT
    "Bulgarian lev"
    BGN
    "Bahraini dinar"
    BHD
    "Burundian franc"
    BIF
    "Bermudian dollar"
    BMD
    "Brunei dollar"
    BND
    "Bolivian boliviano"
    BOB
    "Brazilian real"
    BRL
    "Bahamian dollar"
    BSD
    "Bitcoin"
    BTC
    "Bhutanese ngultrum"
    BTN
    "Botswana pula"
    BWP
    "Belarusian ruble"
    BYN
    "Belarusian ruble (old)"
    BYR
    "Belize dollar"
    BZD
    "Canadian dollar"
    CAD
    "Congolese franc"
    CDF
    "Swiss franc"
    CHF
    "Chilean peso"
    CLP
    "Chinese yuan"
    CNY
    "Colombian peso"
    COP
    "Costa Rican col&oacute;n"
    CRC
    "Cuban convertible peso"
    CUC
    "Cuban peso"
    CUP
    "Cape Verdean escudo"
    CVE
    "Czech koruna"
    CZK
    "Djiboutian franc"
    DJF
    "Danish krone"
    DKK
    "Dominican peso"
    DOP
    "Algerian dinar"
    DZD
    "Egyptian pound"
    EGP
    "Eritrean nakfa"
    ERN
    "Ethiopian birr"
    ETB
    "Euro"
    EUR
    "Fijian dollar"
    FJD
    "Falkland Islands pound"
    FKP
    "Pound sterling"
    GBP
    "Georgian lari"
    GEL
    "Guernsey pound"
    GGP
    "Ghana cedi"
    GHS
    "Gibraltar pound"
    GIP
    "Gambian dalasi"
    GMD
    "Guinean franc"
    GNF
    "Guatemalan quetzal"
    GTQ
    "Guyanese dollar"
    GYD
    "Hong Kong dollar"
    HKD
    "Honduran lempira"
    HNL
    "Croatian kuna"
    HRK
    "Haitian gourde"
    HTG
    "Hungarian forint"
    HUF
    "Indonesian rupiah"
    IDR
    "Israeli new shekel"
    ILS
    "Manx pound"
    IMP
    "Indian rupee"
    INR
    "Iraqi dinar"
    IQD
    "Iranian rial"
    IRR
    "Iranian toman"
    IRT
    "Icelandic kr&oacute;na"
    ISK
    "Jersey pound"
    JEP
    "Jamaican dollar"
    JMD
    "Jordanian dinar"
    JOD
    "Japanese yen"
    JPY
    "Kenyan shilling"
    KES
    "Kyrgyzstani som"
    KGS
    "Cambodian riel"
    KHR
    "Comorian franc"
    KMF
    "North Korean won"
    KPW
    "South Korean won"
    KRW
    "Kuwaiti dinar"
    KWD
    "Cayman Islands dollar"
    KYD
    "Kazakhstani tenge"
    KZT
    "Lao kip"
    LAK
    "Lebanese pound"
    LBP
    "Sri Lankan rupee"
    LKR
    "Liberian dollar"
    LRD
    "Lesotho loti"
    LSL
    "Libyan dinar"
    LYD
    "Moroccan dirham"
    MAD
    "Moldovan leu"
    MDL
    "Malagasy ariary"
    MGA
    "Macedonian denar"
    MKD
    "Burmese kyat"
    MMK
    "Mongolian t&ouml;gr&ouml;g"
    MNT
    "Macanese pataca"
    MOP
    "Mauritanian ouguiya"
    MRU
    "Mauritian rupee"
    MUR
    "Maldivian rufiyaa"
    MVR
    "Malawian kwacha"
    MWK
    "Mexican peso"
    MXN
    "Malaysian ringgit"
    MYR
    "Mozambican metical"
    MZN
    "Namibian dollar"
    NAD
    "Nigerian naira"
    NGN
    "Nicaraguan c&oacute;rdoba"
    NIO
    "Norwegian krone"
    NOK
    "Nepalese rupee"
    NPR
    "New Zealand dollar"
    NZD
    "Omani rial"
    OMR
    "Panamanian balboa"
    PAB
    "Sol"
    PEN
    "Papua New Guinean kina"
    PGK
    "Philippine peso"
    PHP
    "Pakistani rupee"
    PKR
    "Polish z&#x142;oty"
    PLN
    "Transnistrian ruble"
    PRB
    "Paraguayan guaran&iacute;"
    PYG
    "Qatari riyal"
    QAR
    "Romanian leu"
    RON
    "Serbian dinar"
    RSD
    "Russian ruble"
    RUB
    "Rwandan franc"
    RWF
    "Saudi riyal"
    SAR
    "Solomon Islands dollar"
    SBD
    "Seychellois rupee"
    SCR
    "Sudanese pound"
    SDG
    "Swedish krona"
    SEK
    "Singapore dollar"
    SGD
    "Saint Helena pound"
    SHP
    "Sierra Leonean leone"
    SLL
    "Somali shilling"
    SOS
    "Surinamese dollar"
    SRD
    "South Sudanese pound"
    SSP
    "S&atilde;o Tom&eacute; and Pr&iacute;ncipe dobra"
    STN
    "Syrian pound"
    SYP
    "Swazi lilangeni"
    SZL
    "Thai baht"
    THB
    "Tajikistani somoni"
    TJS
    "Turkmenistan manat"
    TMT
    "Tunisian dinar"
    TND
    "Tongan pa&#x2bb;anga"
    TOP
    "Turkish lira"
    TRY
    "Trinidad and Tobago dollar"
    TTD
    "New Taiwan dollar"
    TWD
    "Tanzanian shilling"
    TZS
    "Ukrainian hryvnia"
    UAH
    "Ugandan shilling"
    UGX
    "United States (US) dollar"
    USD
    "Uruguayan peso"
    UYU
    "Uzbekistani som"
    UZS
    "Venezuelan bol&iacute;var (2008–2018)"
    VEF
    "Venezuelan bol&iacute;var"
    VES
    "Vietnamese &#x111;&#x1ed3;ng"
    VND
    "Vanuatu vatu"
    VUV
    "Samoan t&#x101;l&#x101;"
    WST
    "Central African CFA franc"
    XAF
    "East Caribbean dollar"
    XCD
    "West African CFA franc"
    XOF
    "CFP franc"
    XPF
    "Yemeni rial"
    YER
    "South African rand"
    ZAR
    "Zambian kwacha"
    ZMW
}

"Field to order the connection by"
enum CustomerConnectionOrderbyEnum {
    "Order by customer email"
    EMAIL
    "Order by customer ID"
    ID
    "Order by include field"
    INCLUDE
    "Order by customer display name"
    NAME
    "Order by customer registration date"
    REGISTERED_DATE
    "Order by customer username"
    USERNAME
}

"Coupon discount type enumeration"
enum DiscountTypeEnum {
    "Fixed cart discount"
    FIXED_CART
    "Fixed product discount"
    FIXED_PRODUCT
    "Percentage discount"
    PERCENT
}

"Product manage stock enumeration"
enum ManageStockEnum {
    FALSE
    PARENT
    TRUE
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum MediaItemIdType {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
    "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
    SLUG
    "Identify a media item by its source url"
    SOURCE_URL
    "Identify a resource by the URI."
    URI
}

"The size of the media item object."
enum MediaItemSizeEnum {
    "MediaItem with the large size"
    LARGE
    "MediaItem with the medium size"
    MEDIUM
    "MediaItem with the medium_large size"
    MEDIUM_LARGE
    "MediaItem with the thumbnail size"
    THUMBNAIL
    "MediaItem with the woocommerce_gallery_thumbnail size"
    WOOCOMMERCE_GALLERY_THUMBNAIL
    "MediaItem with the woocommerce_single size"
    WOOCOMMERCE_SINGLE
    "MediaItem with the woocommerce_thumbnail size"
    WOOCOMMERCE_THUMBNAIL
    "MediaItem with the 1536x1536 size"
    _1536X1536
    "MediaItem with the 2048x2048 size"
    _2048X2048
}

"The status of the media item object."
enum MediaItemStatusEnum {
    "Objects with the auto-draft status"
    AUTO_DRAFT
    "Objects with the inherit status"
    INHERIT
    "Objects with the private status"
    PRIVATE
    "Objects with the trash status"
    TRASH
}

"The Type of Identifier used to fetch a single node. Default is \"ID\". To be used along with the \"id\" field."
enum MenuItemNodeIdTypeEnum {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
}

"Registered menu locations"
enum MenuLocationEnum {
    "Empty menu location"
    EMPTY
}

"The Type of Identifier used to fetch a single node. Default is \"ID\". To be used along with the \"id\" field."
enum MenuNodeIdTypeEnum {
    "Identify a menu node by the Database ID."
    DATABASE_ID
    "Identify a menu node by the (hashed) Global ID."
    ID
    "Identify a menu node by the slug of menu location to which it is assigned"
    LOCATION
    "Identify a menu node by its name"
    NAME
    "Identify a menu node by its slug"
    SLUG
}

"The MimeType of the object"
enum MimeTypeEnum {
    "application/java mime type."
    APPLICATION_JAVA
    "application/msword mime type."
    APPLICATION_MSWORD
    "application/octet-stream mime type."
    APPLICATION_OCTET_STREAM
    "application/onenote mime type."
    APPLICATION_ONENOTE
    "application/oxps mime type."
    APPLICATION_OXPS
    "application/pdf mime type."
    APPLICATION_PDF
    "application/rar mime type."
    APPLICATION_RAR
    "application/rtf mime type."
    APPLICATION_RTF
    "application/ttaf+xml mime type."
    APPLICATION_TTAF_XML
    "application/vnd.apple.keynote mime type."
    APPLICATION_VND_APPLE_KEYNOTE
    "application/vnd.apple.numbers mime type."
    APPLICATION_VND_APPLE_NUMBERS
    "application/vnd.apple.pages mime type."
    APPLICATION_VND_APPLE_PAGES
    "application/vnd.ms-access mime type."
    APPLICATION_VND_MS_ACCESS
    "application/vnd.ms-excel mime type."
    APPLICATION_VND_MS_EXCEL
    "application/vnd.ms-excel.addin.macroEnabled.12 mime type."
    APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12
    "application/vnd.ms-excel.sheet.binary.macroEnabled.12 mime type."
    APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12
    "application/vnd.ms-excel.sheet.macroEnabled.12 mime type."
    APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12
    "application/vnd.ms-excel.template.macroEnabled.12 mime type."
    APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12
    "application/vnd.ms-powerpoint mime type."
    APPLICATION_VND_MS_POWERPOINT
    "application/vnd.ms-powerpoint.addin.macroEnabled.12 mime type."
    APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12
    "application/vnd.ms-powerpoint.presentation.macroEnabled.12 mime type."
    APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12
    "application/vnd.ms-powerpoint.slideshow.macroEnabled.12 mime type."
    APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12
    "application/vnd.ms-powerpoint.slide.macroEnabled.12 mime type."
    APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12
    "application/vnd.ms-powerpoint.template.macroEnabled.12 mime type."
    APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12
    "application/vnd.ms-project mime type."
    APPLICATION_VND_MS_PROJECT
    "application/vnd.ms-word.document.macroEnabled.12 mime type."
    APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12
    "application/vnd.ms-word.template.macroEnabled.12 mime type."
    APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12
    "application/vnd.ms-write mime type."
    APPLICATION_VND_MS_WRITE
    "application/vnd.ms-xpsdocument mime type."
    APPLICATION_VND_MS_XPSDOCUMENT
    "application/vnd.oasis.opendocument.chart mime type."
    APPLICATION_VND_OASIS_OPENDOCUMENT_CHART
    "application/vnd.oasis.opendocument.database mime type."
    APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE
    "application/vnd.oasis.opendocument.formula mime type."
    APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA
    "application/vnd.oasis.opendocument.graphics mime type."
    APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS
    "application/vnd.oasis.opendocument.presentation mime type."
    APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION
    "application/vnd.oasis.opendocument.spreadsheet mime type."
    APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET
    "application/vnd.oasis.opendocument.text mime type."
    APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT
    "application/vnd.openxmlformats-officedocument.presentationml.presentation mime type."
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION
    "application/vnd.openxmlformats-officedocument.presentationml.slide mime type."
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow mime type."
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW
    "application/vnd.openxmlformats-officedocument.presentationml.template mime type."
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet mime type."
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template mime type."
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document mime type."
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template mime type."
    APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE
    "application/wordperfect mime type."
    APPLICATION_WORDPERFECT
    "application/x-7z-compressed mime type."
    APPLICATION_X_7Z_COMPRESSED
    "application/x-gzip mime type."
    APPLICATION_X_GZIP
    "application/x-tar mime type."
    APPLICATION_X_TAR
    "application/zip mime type."
    APPLICATION_ZIP
    "audio/aac mime type."
    AUDIO_AAC
    "audio/flac mime type."
    AUDIO_FLAC
    "audio/midi mime type."
    AUDIO_MIDI
    "audio/mpeg mime type."
    AUDIO_MPEG
    "audio/ogg mime type."
    AUDIO_OGG
    "audio/wav mime type."
    AUDIO_WAV
    "audio/x-matroska mime type."
    AUDIO_X_MATROSKA
    "audio/x-ms-wax mime type."
    AUDIO_X_MS_WAX
    "audio/x-ms-wma mime type."
    AUDIO_X_MS_WMA
    "audio/x-realaudio mime type."
    AUDIO_X_REALAUDIO
    "image/avif mime type."
    IMAGE_AVIF
    "image/bmp mime type."
    IMAGE_BMP
    "image/gif mime type."
    IMAGE_GIF
    "image/heic mime type."
    IMAGE_HEIC
    "image/jpeg mime type."
    IMAGE_JPEG
    "image/png mime type."
    IMAGE_PNG
    "image/tiff mime type."
    IMAGE_TIFF
    "image/webp mime type."
    IMAGE_WEBP
    "image/x-icon mime type."
    IMAGE_X_ICON
    "text/calendar mime type."
    TEXT_CALENDAR
    "text/css mime type."
    TEXT_CSS
    "text/csv mime type."
    TEXT_CSV
    "text/plain mime type."
    TEXT_PLAIN
    "text/richtext mime type."
    TEXT_RICHTEXT
    "text/tab-separated-values mime type."
    TEXT_TAB_SEPARATED_VALUES
    "text/vtt mime type."
    TEXT_VTT
    "video/3gpp mime type."
    VIDEO_3GPP
    "video/3gpp2 mime type."
    VIDEO_3GPP2
    "video/avi mime type."
    VIDEO_AVI
    "video/divx mime type."
    VIDEO_DIVX
    "video/mp4 mime type."
    VIDEO_MP4
    "video/mpeg mime type."
    VIDEO_MPEG
    "video/ogg mime type."
    VIDEO_OGG
    "video/quicktime mime type."
    VIDEO_QUICKTIME
    "video/webm mime type."
    VIDEO_WEBM
    "video/x-flv mime type."
    VIDEO_X_FLV
    "video/x-matroska mime type."
    VIDEO_X_MATROSKA
    "video/x-ms-asf mime type."
    VIDEO_X_MS_ASF
    "video/x-ms-wm mime type."
    VIDEO_X_MS_WM
    "video/x-ms-wmv mime type."
    VIDEO_X_MS_WMV
    "video/x-ms-wmx mime type."
    VIDEO_X_MS_WMX
}

"The cardinality of the connection order"
enum OrderEnum {
    "Sort the query result set in an ascending order"
    ASC
    "Sort the query result set in a descending order"
    DESC
}

"The Type of Identifier used to fetch a single Order. Default is ID."
enum OrderIdTypeEnum {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
    "Order key."
    ORDER_KEY
}

"Order status enumeration"
enum OrderStatusEnum {
    "Cancelled"
    CANCELLED
    "Draft"
    CHECKOUT_DRAFT
    "Completed"
    COMPLETED
    "Failed"
    FAILED
    "On hold"
    ON_HOLD
    "Pending payment"
    PENDING
    "Processing"
    PROCESSING
    "Refunded"
    REFUNDED
}

"Fields to order the Orders connection by"
enum OrdersOrderByEnum {
    "Order by publish date"
    DATE
    "Order by date the order was completed"
    DATE_COMPLETED
    "Order by date the order was paid"
    DATE_PAID
    "Order by order discount amount"
    DISCOUNT
    "Preserve the ID order given in the IN array"
    IN
    "Order by the menu order value"
    MENU_ORDER
    "Order by last modified date"
    MODIFIED
    "Order by name"
    NAME
    "Preserve slug order given in the NAME_IN array"
    NAME_IN
    "Order by order key"
    ORDER_KEY
    "Order by parent ID"
    PARENT
    "Order by slug"
    SLUG
    "Order by order total"
    TAX
    "Order by order total"
    TOTAL
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum PaTestIdType {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum PageIdType {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
    "Identify a resource by the URI."
    URI
}

"The status of the WordPress plugin."
enum PluginStatusEnum {
    "The plugin is currently active."
    ACTIVE
    "The plugin is a drop-in plugin."
    DROP_IN
    "The plugin is currently inactive."
    INACTIVE
    "The plugin is a must-use plugin."
    MUST_USE
    "The plugin is technically active but was paused while loading."
    PAUSED
    "The plugin was active recently."
    RECENTLY_ACTIVE
    "The plugin has an upgrade available."
    UPGRADE
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum PostFormatIdType {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum PostIdType {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
    "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
    SLUG
    "Identify a resource by the URI."
    URI
}

"The format of post field data."
enum PostObjectFieldFormatEnum {
    "Provide the field value directly from database. Null on unauthenticated requests."
    RAW
    "Provide the field value as rendered by WordPress. Default."
    RENDERED
}

"The column to use when filtering by date"
enum PostObjectsConnectionDateColumnEnum {
    "The date the comment was created in local time."
    DATE
    "The most recent modification date of the comment."
    MODIFIED
}

"Field to order the connection by"
enum PostObjectsConnectionOrderbyEnum {
    "Order by author"
    AUTHOR
    "Order by the number of comments it has acquired"
    COMMENT_COUNT
    "Order by publish date"
    DATE
    "Preserve the ID order given in the IN array"
    IN
    "Order by the menu order value"
    MENU_ORDER
    "Order by last modified date"
    MODIFIED
    "Preserve slug order given in the NAME_IN array"
    NAME_IN
    "Order by parent ID"
    PARENT
    "Order by slug"
    SLUG
    "Order by title"
    TITLE
}

"The status of the object."
enum PostStatusEnum {
    "Objects with the auto-draft status"
    AUTO_DRAFT
    "Objects with the draft status"
    DRAFT
    "Objects with the future status"
    FUTURE
    "Objects with the inherit status"
    INHERIT
    "Objects with the pending status"
    PENDING
    "Objects with the private status"
    PRIVATE
    "Objects with the publish status"
    PUBLISH
    "Objects with the request-completed status"
    REQUEST_COMPLETED
    "Objects with the request-confirmed status"
    REQUEST_CONFIRMED
    "Objects with the request-failed status"
    REQUEST_FAILED
    "Objects with the request-pending status"
    REQUEST_PENDING
    "Objects with the trash status"
    TRASH
    "Objects with the wc-cancelled status"
    WC_CANCELLED
    "Objects with the wc-checkout-draft status"
    WC_CHECKOUT_DRAFT
    "Objects with the wc-completed status"
    WC_COMPLETED
    "Objects with the wc-failed status"
    WC_FAILED
    "Objects with the wc-on-hold status"
    WC_ON_HOLD
    "Objects with the wc-pending status"
    WC_PENDING
    "Objects with the wc-processing status"
    WC_PROCESSING
    "Objects with the wc-refunded status"
    WC_REFUNDED
}

"Fields to order the PostType connection by"
enum PostTypeOrderByEnum {
    "Order by publish date"
    DATE
    "Preserve the ID order given in the IN array"
    IN
    "Order by the menu order value"
    MENU_ORDER
    "Order by last modified date"
    MODIFIED
    "Order by name"
    NAME
    "Preserve slug order given in the NAME_IN array"
    NAME_IN
    "Order by parent ID"
    PARENT
    "Order by slug"
    SLUG
}

"Pricing field format enumeration"
enum PricingFieldFormatEnum {
    FORMATTED
    RAW
}

"Product attribute taxonomies"
enum ProductAttributeEnum {
    PA_TEST
}

"Product attribute type enumeration"
enum ProductAttributeTypesEnum {
    "A global product attribute"
    GLOBAL
    "A local product attribute"
    LOCAL
}

"Product attributes connection orderby enum"
enum ProductAttributesConnectionOrderbyEnum {
    "Order the connection by item count."
    COUNT
    "Order the connection by description."
    DESCRIPTION
    "Order the connection by woocommerce menu order."
    MENU_ORDER
    "Order the connection by name."
    NAME
    "Order the connection by slug."
    SLUG
    "Order the connection by term group."
    TERM_GROUP
    "Order the connection by term id."
    TERM_ID
    "Order the connection by term order."
    TERM_ORDER
}

"Product category display type enumeration"
enum ProductCategoryDisplay {
    "Display both products and subcategories of this category."
    BOTH
    "Display default content connected to this category."
    DEFAULT
    "Display products associated with this category."
    PRODUCTS
    "Display subcategories of this category."
    SUBCATEGORIES
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum ProductCategoryIdType {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"The Type of Identifier used to fetch a single Product. Default is ID."
enum ProductIdTypeEnum {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
    "Unique store identifier for product."
    SKU
    "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
    SLUG
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum ProductTagIdType {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"Product taxonomies"
enum ProductTaxonomyEnum {
    PA_TEST
    PRODUCT_CAT
    PRODUCT_SHIPPING_CLASS
    PRODUCT_TAG
    PRODUCT_TYPE
    PRODUCT_VISIBILITY
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum ProductTypeIdType {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"Product type enumeration"
enum ProductTypesEnum {
    "An external product"
    EXTERNAL
    "A product group"
    GROUPED
    "A simple product"
    SIMPLE
    "An unsupported product"
    UNSUPPORTED
    "A variable product"
    VARIABLE
    "A product variation"
    VARIATION
}

"The Type of Identifier used to fetch a single ProductVariation. Default is ID."
enum ProductVariationIdTypeEnum {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
}

"Fields to order the Products connection by"
enum ProductsOrderByEnum {
    "Order by publish date"
    DATE
    "Preserve the ID order given in the IN array"
    IN
    "Order by the menu order value"
    MENU_ORDER
    "Order by last modified date"
    MODIFIED
    "Order by name"
    NAME
    "Preserve slug order given in the NAME_IN array"
    NAME_IN
    "Order by date product sale starts"
    ON_SALE_FROM @deprecated(reason: "This field is deprecated and will be removed in a future version.")
    "Order by date product sale ends"
    ON_SALE_TO @deprecated(reason: "This field is deprecated and will be removed in a future version.")
    "Order by parent ID"
    PARENT
    "Order by product popularity"
    POPULARITY
    "Order by product's current price"
    PRICE
    "Order by product average rating"
    RATING
    "Order by product's regular price"
    REGULAR_PRICE @deprecated(reason: "This field is deprecated and will be removed in a future version. Use \"PRICE\" instead.")
    "Order by number of reviews on product"
    REVIEW_COUNT
    "Order by product's sale price"
    SALE_PRICE @deprecated(reason: "This field is deprecated and will be removed in a future version. Use \"PRICE\" instead.")
    "Order by slug"
    SLUG
    "Order by total sales of products sold"
    TOTAL_SALES @deprecated(reason: "This field is deprecated and will be removed in a future version. Use \"POPULARITY\" instead")
}

"The Type of Identifier used to fetch a single Refund. Default is ID."
enum RefundIdTypeEnum {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
}

"The logical relation between each item in the array when there are more than one."
enum RelationEnum {
    "The logical AND condition returns true if both operands are true, otherwise, it returns false."
    AND
    "The logical OR condition returns false if both operands are false, otherwise, it returns true."
    OR
}

"The strategy to use when loading the script"
enum ScriptLoadingStrategyEnum {
    "Use the script `async` attribute"
    ASYNC
    "Use the script `defer` attribute"
    DEFER
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum ShippingClassIdType {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"A Shipping zone location type."
enum ShippingLocationTypeEnum {
    CONTINENT
    COUNTRY
    POSTCODE
    STATE
}

"The Type of Identifier used to fetch a single Shipping Method. Default is ID."
enum ShippingMethodIdTypeEnum {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
}

"The Type of Identifier used to fetch a single Shipping Zone. Default is ID."
enum ShippingZoneIdTypeEnum {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
}

"Product stock status enumeration"
enum StockStatusEnum {
    IN_STOCK
    ON_BACKORDER
    OUT_OF_STOCK
}

"The Stripe Payment Method. Payment or Setup."
enum StripePaymentMethodEnum {
    PAYMENT
    SETUP
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum TagIdType {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"Tax class enumeration"
enum TaxClassEnum {
    "Inherits Tax class from cart"
    INHERIT_CART
    REDUCED_RATE
    "Standard Tax rate"
    STANDARD
    ZERO_RATE
}

"Field to order the connection by"
enum TaxRateConnectionOrderbyEnum {
    ID
    ORDER
}

"The Type of Identifier used to fetch a single Tax rate. Default is ID."
enum TaxRateIdTypeEnum {
    "Identify a resource by the Database ID."
    DATABASE_ID
    "Identify a resource by the (hashed) Global ID."
    ID
}

"Product tax status enumeration"
enum TaxStatusEnum {
    NONE
    SHIPPING
    TAXABLE
}

"Allowed taxonomies"
enum TaxonomyEnum {
    "Taxonomy enum category"
    CATEGORY
    "Taxonomy enum pa_test"
    PATEST
    "Taxonomy enum post_format"
    POSTFORMAT
    "Taxonomy enum product_cat"
    PRODUCTCATEGORY
    "Taxonomy enum product_tag"
    PRODUCTTAG
    "Taxonomy enum product_type"
    PRODUCTTYPE
    "Taxonomy enum product_shipping_class"
    SHIPPINGCLASS
    "Taxonomy enum post_tag"
    TAG
    "Taxonomy enum product_visibility"
    VISIBLEPRODUCT
}

"The Type of Identifier used to fetch a single Taxonomy node. To be used along with the \"id\" field. Default is \"ID\"."
enum TaxonomyIdTypeEnum {
    "The globally unique ID"
    ID
    "The name of the taxonomy"
    NAME
}

"Taxonomy query operators"
enum TaxonomyOperatorEnum {
    AND
    EXISTS
    IN
    NOT_EXISTS
    NOT_IN
}

"The Type of Identifier used to fetch a single resource. Default is \"ID\". To be used along with the \"id\" field."
enum TermNodeIdTypeEnum {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"Options for ordering the connection by"
enum TermObjectsConnectionOrderbyEnum {
    "Order the connection by item count."
    COUNT
    "Order the connection by description."
    DESCRIPTION
    "Order the connection by name."
    NAME
    "Order the connection by slug."
    SLUG
    "Order the connection by term group."
    TERM_GROUP
    "Order the connection by term id."
    TERM_ID
    "Order the connection by term order."
    TERM_ORDER
}

"The Type of Identifier used to fetch a single User node. To be used along with the \"id\" field. Default is \"ID\"."
enum UserNodeIdTypeEnum {
    "The Database ID for the node"
    DATABASE_ID
    "The Email of the User"
    EMAIL
    "The hashed Global ID"
    ID
    "The slug of the User"
    SLUG
    "The URI for the node"
    URI
    "The username the User uses to login with"
    USERNAME
}

"Names of available user roles"
enum UserRoleEnum {
    "User role with specific capabilities"
    ADMINISTRATOR
    "User role with specific capabilities"
    AUTHOR
    "User role with specific capabilities"
    CONTRIBUTOR
    "User role with specific capabilities"
    CUSTOMER
    "User role with specific capabilities"
    EDITOR
    "User role with specific capabilities"
    SHOP_MANAGER
    "User role with specific capabilities"
    SUBSCRIBER
}

"Field to order the connection by"
enum UsersConnectionOrderbyEnum {
    "Order by display name"
    DISPLAY_NAME
    "Order by email address"
    EMAIL
    "Order by login"
    LOGIN
    "Preserve the login order given in the LOGIN_IN array"
    LOGIN_IN
    "Order by nice name"
    NICE_NAME
    "Preserve the nice name order given in the NICE_NAME_IN array"
    NICE_NAME_IN
    "Order by registration date"
    REGISTERED
    "Order by URL"
    URL
}

"Column used for searching for users."
enum UsersConnectionSearchColumnEnum {
    "The user's email address."
    EMAIL
    "The globally unique ID."
    ID
    "The username the User uses to login with."
    LOGIN
    "A URL-friendly name for the user. The default is the user's username."
    NICENAME
    "The URL of the user's website."
    URL
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum VisibleProductIdType {
    "The Database ID for the node"
    DATABASE_ID
    "The hashed Global ID"
    ID
    "The name of the node"
    NAME
    "Url friendly name of the node"
    SLUG
    "The URI for the node"
    URI
}

"Type of WC setting."
enum WCSettingTypeEnum {
    CHECKBOX
    COLOR
    EMAIL
    IMAGE_WIDTH
    MULTI_SELECT
    NUMBER
    PASSWORD
    RADIO
    SELECT
    TEXT
    TEXTAREA
}

"Input for the addCartItems mutation."
input AddCartItemsInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Cart items to be added"
    items: [CartItemInput]
}

"Input for the addFee mutation."
input AddFeeInput {
    "Fee amount"
    amount: Float
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Unique name for the fee."
    name: String!
    "The tax class for the fee if taxable."
    taxClass: TaxClassEnum
    "Is the fee taxable?"
    taxable: Boolean
}

"Input for the addMethodToShippingZone mutation."
input AddMethodToShippingZoneInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Whether the shipping method is enabled or not."
    enabled: Boolean
    "The ID of the shipping method to add."
    methodId: String!
    "The order of the shipping method."
    order: Int
    "The settings for the shipping method."
    settings: [WCSettingInput]
    "The ID of the shipping zone to delete."
    zoneId: Int!
}

"Input for the addToCart mutation."
input AddToCartInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "JSON string representation of extra cart item data"
    extraData: String
    "Cart item product database ID or global ID"
    productId: Int!
    "Cart item quantity"
    quantity: Int
    "Cart item product variation attributes"
    variation: [ProductAttributeInput]
    "Cart item product variation database ID or global ID"
    variationId: Int
}

"Input for the applyCoupon mutation."
input ApplyCouponInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Code of coupon being applied"
    code: String!
}

"Cart item quantity"
input CartItemInput {
    "JSON string representation of extra cart item data"
    extraData: String
    "Cart item product database ID or global ID"
    productId: Int!
    "Cart item quantity"
    quantity: Int
    "Cart item product variation attributes"
    variation: [ProductAttributeInput]
    "Cart item product variation database ID or global ID"
    variationId: Int
}

"Cart item quantity"
input CartItemQuantityInput {
    "Cart item being updated"
    key: ID!
    "Cart item's new quantity"
    quantity: Int!
}

"Arguments for filtering the CartItemToProductConnection connection"
input CartItemToProductConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Arguments for filtering the CartToCartItemConnection connection"
input CartToCartItemConnectionWhereArgs {
    "Limit results to cart items that require shipping"
    needsShipping: Boolean
}

"Arguments for filtering the CategoryToCategoryConnection connection"
input CategoryToCategoryConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the CategoryToContentNodeConnection connection"
input CategoryToContentNodeConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypesOfCategoryEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the CategoryToPostConnection connection"
input CategoryToPostConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    "Array of category IDs, used to display objects from one category OR another"
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    "Array of category IDs, used to display objects from one category OR another"
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    "Array of tag IDs, used to display objects from one tag OR another"
    tagIn: [ID]
    "Array of tag IDs, used to display objects from one tag OR another"
    tagNotIn: [ID]
    "Array of tag slugs, used to display objects from one tag AND another"
    tagSlugAnd: [String]
    "Array of tag slugs, used to include objects in ANY specified tags"
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Input for the checkout mutation."
input CheckoutInput {
    "Create new customer account"
    account: CreateAccountInput
    "Order billing address"
    billing: CustomerAddressInput
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Order customer note"
    customerNote: String
    "Define if the order is paid. It will set the status to processing and reduce stock items."
    isPaid: Boolean
    "Order meta data"
    metaData: [MetaDataInput]
    "Payment method ID."
    paymentMethod: String
    "Ship to a separate address"
    shipToDifferentAddress: Boolean
    "Order shipping address"
    shipping: CustomerAddressInput
    "Order shipping method"
    shippingMethod: [String]
    "Order transaction ID"
    transactionId: String
}

"Input for the clearShippingZoneLocations mutation."
input ClearShippingZoneLocationsInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The type of location to remove."
    type: ShippingLocationTypeEnum
    "The ID of the shipping zone to delete."
    zoneId: Int!
}

"Taxonomy query"
input CollectionStatsQueryInput {
    "Taxonomy relation to query"
    relation: RelationEnum
    "Product Taxonomy"
    taxonomy: ProductAttributeEnum!
}

"Arguments used to filter the collection results"
input CollectionStatsWhereArgs {
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Arguments for filtering the CommentToCommentConnection connection"
input CommentToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    "Limit results to those affiliated with a given content object ID."
    contentId: ID
    "Array of content object IDs to include affiliated comments for."
    contentIdIn: [ID]
    "Array of content object IDs to exclude affiliated comments for."
    contentIdNotIn: [ID]
    "Content object name (i.e. slug ) to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    "Array of parent IDs of comments *not* to retrieve children for."
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the CommentToParentCommentConnection connection"
input CommentToParentCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    "Limit results to those affiliated with a given content object ID."
    contentId: ID
    "Array of content object IDs to include affiliated comments for."
    contentIdIn: [ID]
    "Array of content object IDs to exclude affiliated comments for."
    contentIdNotIn: [ID]
    "Content object name (i.e. slug ) to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    "Array of parent IDs of comments *not* to retrieve children for."
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the ContentTypeToContentNodeConnection connection"
input ContentTypeToContentNodeConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypeEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the CouponToCustomerConnection connection"
input CouponToCustomerConnectionWhereArgs {
    "Limit result set to resources with a specific email."
    email: String
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to specific ids."
    include: [Int]
    "Order of results."
    order: OrderEnum
    "Order results by a specific field."
    orderby: CustomerConnectionOrderbyEnum
    "Limit results to those matching a string."
    search: String
}

"Arguments for filtering the CouponToExcludedProductCategoriesConnection connection"
input CouponToExcludedProductCategoriesConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the CouponToExcludedProductsConnection connection"
input CouponToExcludedProductsConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Arguments for filtering the CouponToProductCategoryConnection connection"
input CouponToProductCategoryConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the CouponToProductUnionConnection connection"
input CouponToProductUnionConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Customer account credentials"
input CreateAccountInput {
    "Customer password"
    password: String!
    "Customer username"
    username: String!
}

"Input for the createCategory mutation."
input CreateCategoryInput {
    "The slug that the category will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the category object"
    description: String
    "The name of the category object to mutate"
    name: String!
    "The ID of the category that should be set as the parent"
    parentId: ID
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the createComment mutation."
input CreateCommentInput {
    "The approval status of the comment."
    approved: String
    "The name of the comment's author."
    author: String
    "The email of the comment's author."
    authorEmail: String
    "The url of the comment's author."
    authorUrl: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The database ID of the post object the comment belongs to."
    commentOn: Int
    "Content of the comment."
    content: String
    "The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "Parent comment ID of current comment."
    parent: ID
    "The approval status of the comment"
    status: CommentStatusEnum
    "Type of comment."
    type: String
}

"Input for the createCoupon mutation."
input CreateCouponInput {
    "The amount of discount. Should always be numeric, even if setting a percentage."
    amount: Float
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Coupon code."
    code: String!
    "The date the coupon expires, in the site's timezone."
    dateExpires: String
    "The date the coupon expires, as GMT."
    dateExpiresGmt: String
    "Coupon description."
    description: String
    "Determines the type of discount that will be applied."
    discountType: DiscountTypeEnum
    "List of email addresses that can use this coupon."
    emailRestrictions: [String]
    "If true, this coupon will not be applied to items that have sale prices."
    excludeSaleItems: Boolean
    "List of category IDs the coupon does not apply to."
    excludedProductCategories: [Int]
    "List of product IDs the coupon cannot be used on."
    excludedProductIds: [Int]
    "If true and if the free shipping method requires a coupon, this coupon will enable free shipping."
    freeShipping: Boolean
    "If true, the coupon can only be used individually. Other applied coupons will be removed from the cart."
    individualUse: Boolean
    "Max number of items in the cart the coupon can be applied to."
    limitUsageToXItems: Int
    "Maximum order amount allowed when using the coupon."
    maximumAmount: String
    "Meta data."
    metaData: [MetaDataInput]
    "Minimum order amount that needs to be in the cart before coupon applies."
    minimumAmount: String
    "List of category IDs the coupon applies to."
    productCategories: [Int]
    "List of product IDs the coupon can be used on."
    productIds: [Int]
    "How many times the coupon can be used in total."
    usageLimit: Int
    "How many times the coupon can be used per customer."
    usageLimitPerUser: Int
}

"Input for the createMediaItem mutation."
input CreateMediaItemInput {
    "Alternative text to display when mediaItem is not displayed"
    altText: String
    "The userId to assign as the author of the mediaItem"
    authorId: ID
    "The caption for the mediaItem"
    caption: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The comment status for the mediaItem"
    commentStatus: String
    "The date of the mediaItem"
    date: String
    "The date (in GMT zone) of the mediaItem"
    dateGmt: String
    "Description of the mediaItem"
    description: String
    "The file name of the mediaItem"
    filePath: String
    "The file type of the mediaItem"
    fileType: MimeTypeEnum
    "The ID of the parent object"
    parentId: ID
    "The ping status for the mediaItem"
    pingStatus: String
    "The slug of the mediaItem"
    slug: String
    "The status of the mediaItem"
    status: MediaItemStatusEnum
    "The title of the mediaItem"
    title: String
}

"Input for the createOrder mutation."
input CreateOrderInput {
    "Order billing address"
    billing: CustomerAddressInput
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Coupons codes to be applied to order"
    coupons: [String]
    "Currency the order was created with, in ISO format."
    currency: CurrencyEnum
    "Order customer ID"
    customerId: Int
    "Note left by customer during checkout."
    customerNote: String
    "Order shipping lines"
    feeLines: [FeeLineInput]
    "Define if the order is paid. It will set the status to processing and reduce stock items."
    isPaid: Boolean
    "Order line items"
    lineItems: [LineItemInput]
    "Order meta data"
    metaData: [MetaDataInput]
    "Parent order ID."
    parentId: Int
    "Payment method ID."
    paymentMethod: String
    "Payment method title."
    paymentMethodTitle: String
    "Order shipping address"
    shipping: CustomerAddressInput
    "Order shipping lines"
    shippingLines: [ShippingLineInput]
    "Order status"
    status: OrderStatusEnum
    "Order transaction ID"
    transactionId: String
}

"Input for the createPaTest mutation."
input CreatePaTestInput {
    "The slug that the pa_test will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the pa_test object"
    description: String
    "The name of the pa_test object to mutate"
    name: String!
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the createPage mutation."
input CreatePageInput {
    "The userId to assign as the author of the object"
    authorId: ID
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The ID of the parent object"
    parentId: ID
    "The password used to protect the content of the object"
    password: String
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "The title of the object"
    title: String
}

"Input for the createPostFormat mutation."
input CreatePostFormatInput {
    "The slug that the post_format will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the post_format object"
    description: String
    "The name of the post_format object to mutate"
    name: String!
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the createPost mutation."
input CreatePostInput {
    "The userId to assign as the author of the object"
    authorId: ID
    "Set connections between the post and categories"
    categories: PostCategoriesInput
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The excerpt of the object"
    excerpt: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The password used to protect the content of the object"
    password: String
    "The ping status for the object"
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "Set connections between the post and postFormats"
    postFormats: PostPostFormatsInput
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "Set connections between the post and tags"
    tags: PostTagsInput
    "The title of the object"
    title: String
    "URLs queued to be pinged."
    toPing: [String]
}

"Input for the createProductCategory mutation."
input CreateProductCategoryInput {
    "The slug that the product_cat will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the product_cat object"
    description: String
    "The name of the product_cat object to mutate"
    name: String!
    "The ID of the product_cat that should be set as the parent"
    parentId: ID
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the createProduct mutation."
input CreateProductInput {
    "Set connections between the Product and allPaTest"
    allPaTest: ProductAllPaTestInput
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The excerpt of the object"
    excerpt: String
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The password used to protect the content of the object"
    password: String
    "Set connections between the Product and productCategories"
    productCategories: ProductProductCategoriesInput
    "Set connections between the Product and productTags"
    productTags: ProductProductTagsInput
    "Set connections between the Product and productTypes"
    productTypes: ProductProductTypesInput
    "Set connections between the Product and shippingClasses"
    shippingClasses: ProductShippingClassesInput
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "The title of the object"
    title: String
    "Set connections between the Product and visibleProducts"
    visibleProducts: ProductVisibleProductsInput
}

"Input for the createProductTag mutation."
input CreateProductTagInput {
    "The slug that the product_tag will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the product_tag object"
    description: String
    "The name of the product_tag object to mutate"
    name: String!
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the createProductType mutation."
input CreateProductTypeInput {
    "The slug that the product_type will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the product_type object"
    description: String
    "The name of the product_type object to mutate"
    name: String!
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the createShippingClass mutation."
input CreateShippingClassInput {
    "The slug that the product_shipping_class will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the product_shipping_class object"
    description: String
    "The name of the product_shipping_class object to mutate"
    name: String!
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the createShippingZone mutation."
input CreateShippingZoneInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Name of the shipping zone."
    name: String!
    "Order of the shipping zone."
    order: Int
}

"Input for the createTag mutation."
input CreateTagInput {
    "The slug that the post_tag will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the post_tag object"
    description: String
    "The name of the post_tag object to mutate"
    name: String!
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the createTaxClass mutation."
input CreateTaxClassInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Name of the tax class."
    name: String!
    "Slug of the tax class."
    slug: String
}

"Input for the createTaxRate mutation."
input CreateTaxRateInput {
    "Cities for the tax rate."
    cities: [String]
    "Tax rate class."
    class: TaxClassEnum
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Whether the tax rate is compound."
    compound: Boolean
    "Country code for the tax rate."
    country: String
    "Tax rate name."
    name: String
    "Tax rate order."
    order: Int
    "Postcodes for the tax rate."
    postcodes: [String]
    "Tax rate priority."
    priority: Int
    "Tax rate."
    rate: String
    "Whether the tax rate is applied to shipping."
    shipping: Boolean
    "State code for the tax rate."
    state: String
}

"Input for the createUser mutation."
input CreateUserInput {
    "User's AOL IM account."
    aim: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "A string containing content about the user."
    description: String
    "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
    displayName: String
    "A string containing the user's email address."
    email: String
    "\tThe user's first name."
    firstName: String
    "User's Jabber account."
    jabber: String
    "The user's last name."
    lastName: String
    "User's locale."
    locale: String
    "A string that contains a URL-friendly name for the user. The default is the user's username."
    nicename: String
    "The user's nickname, defaults to the user's username."
    nickname: String
    "A string that contains the plain text password for the user."
    password: String
    "The date the user registered. Format is Y-m-d H:i:s."
    registered: String
    "A string for whether to enable the rich editor or not. False if not empty."
    richEditing: String
    "An array of roles to be assigned to the user."
    roles: [String]
    "A string that contains the user's username for logging in."
    username: String!
    "A string containing the user's URL for the user's web site."
    websiteUrl: String
    "User's Yahoo IM account."
    yim: String
}

"Input for the createVisibleProduct mutation."
input CreateVisibleProductInput {
    "The slug that the product_visibility will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the product_visibility object"
    description: String
    "The name of the product_visibility object to mutate"
    name: String!
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Customer address information"
input CustomerAddressInput {
    "Address 1"
    address1: String
    "Address 2"
    address2: String
    "City"
    city: String
    "Company"
    company: String
    "Country"
    country: CountriesEnum
    "E-mail"
    email: String
    "First name"
    firstName: String
    "Last name"
    lastName: String
    "Clear old address data"
    overwrite: Boolean
    "Phone"
    phone: String
    "Zip Postal Code"
    postcode: String
    "State"
    state: String
}

"Arguments for filtering the CustomerToDownloadableItemConnection connection"
input CustomerToDownloadableItemConnectionWhereArgs {
    "Limit results to downloadable items that can be downloaded now."
    active: Boolean
    "Limit results to downloadable items that are expired."
    expired: Boolean
    "Limit results to downloadable items that have downloads remaining."
    hasDownloadsRemaining: Boolean
}

"Arguments for filtering the CustomerToOrderConnection connection"
input CustomerToOrderConnectionWhereArgs {
    "Limit result set to orders assigned a specific billing email."
    billingEmail: String
    "Limit result set to orders assigned a specific customer."
    customerId: Int
    "Limit result set to orders assigned a specific group of customers."
    customersIn: [Int]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to specific ids."
    include: [Int]
    "What paramater to use to order the objects by."
    orderby: [OrdersOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to orders assigned a specific product."
    productId: Int
    "Limit results to those matching a string."
    search: String
    "Limit result set to orders assigned a specific status."
    statuses: [OrderStatusEnum]
}

"Arguments for filtering the CustomerToRefundConnection connection"
input CustomerToRefundConnectionWhereArgs {
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to specific ids."
    include: [Int]
    "Limit result set to refunds from a specific group of order IDs."
    orderIn: [Int]
    "What paramater to use to order the objects by."
    orderby: [PostTypeOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit results to those matching a string."
    search: String
    "Limit result set to refunds assigned a specific status."
    statuses: [String]
}

"Date values"
input DateInput {
    "Day of the month (from 1 to 31)"
    day: Int
    "Month number (from 1 to 12)"
    month: Int
    "4 digit year (e.g. 2017)"
    year: Int
}

"Filter the connection based on input"
input DateQueryInput {
    "Nodes should be returned after this date"
    after: DateInput
    "Nodes should be returned before this date"
    before: DateInput
    "Column to query against"
    column: PostObjectsConnectionDateColumnEnum
    "For after/before, whether exact value should be matched or not"
    compare: String
    "Day of the month (from 1 to 31)"
    day: Int
    "Hour (from 0 to 23)"
    hour: Int
    "For after/before, whether exact value should be matched or not"
    inclusive: Boolean
    "Minute (from 0 to 59)"
    minute: Int
    "Month number (from 1 to 12)"
    month: Int
    "OR or AND, how the sub-arrays should be compared"
    relation: RelationEnum
    "Second (0 to 59)"
    second: Int
    "Week of the year (from 0 to 53)"
    week: Int
    "4 digit year (e.g. 2017)"
    year: Int
}

"Input for the deleteCategory mutation."
input DeleteCategoryInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the category to delete"
    id: ID!
}

"Input for the deleteComment mutation."
input DeleteCommentInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Whether the comment should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The deleted comment ID"
    id: ID!
}

"Input for the deleteCoupon mutation."
input DeleteCouponInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Delete the object. Set to \"false\" by default."
    forceDelete: Boolean
    "Unique identifier for the object."
    id: ID!
}

"Input for the deleteMediaItem mutation."
input DeleteMediaItemInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Whether the mediaItem should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The ID of the mediaItem to delete"
    id: ID!
}

"Input for the deleteOrder mutation."
input DeleteOrderInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Delete or simply place in trash."
    forceDelete: Boolean
    "Order global ID"
    id: ID
    "Order WP ID"
    orderId: Int
}

"Input for the deleteOrderItems mutation."
input DeleteOrderItemsInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Order global ID"
    id: ID
    "ID Order items being deleted"
    itemIds: [Int]
    "Order WP ID"
    orderId: Int
}

"Input for the deletePaTest mutation."
input DeletePaTestInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the paTest to delete"
    id: ID!
}

"Input for the deletePage mutation."
input DeletePageInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Whether the object should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The ID of the page to delete"
    id: ID!
    "Override the edit lock when another user is editing the post"
    ignoreEditLock: Boolean
}

"Input for the deletePaymentMethod mutation."
input DeletePaymentMethodInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Token ID of the payment token being deleted."
    tokenId: Int!
}

"Input for the deletePostFormat mutation."
input DeletePostFormatInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the postFormat to delete"
    id: ID!
}

"Input for the deletePost mutation."
input DeletePostInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Whether the object should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The ID of the post to delete"
    id: ID!
    "Override the edit lock when another user is editing the post"
    ignoreEditLock: Boolean
}

"Input for the deleteProductCategory mutation."
input DeleteProductCategoryInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the productCategory to delete"
    id: ID!
}

"Input for the deleteProduct mutation."
input DeleteProductInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Whether the object should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The ID of the Product to delete"
    id: ID!
    "Override the edit lock when another user is editing the post"
    ignoreEditLock: Boolean
}

"Input for the deleteProductTag mutation."
input DeleteProductTagInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the productTag to delete"
    id: ID!
}

"Input for the deleteProductType mutation."
input DeleteProductTypeInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the productType to delete"
    id: ID!
}

"Input for the deleteReview mutation."
input DeleteReviewInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Whether the product review should be force deleted instead of being moved to the trash"
    forceDelete: Boolean
    "The ID of the target product review"
    id: ID!
}

"Input for the deleteShippingClass mutation."
input DeleteShippingClassInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the shippingClass to delete"
    id: ID!
}

"Input for the deleteShippingZone mutation."
input DeleteShippingZoneInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the shipping zone to delete."
    id: Int!
}

"Input for the deleteTag mutation."
input DeleteTagInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the tag to delete"
    id: ID!
}

"Input for the deleteTaxClass mutation."
input DeleteTaxClassInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Slug of the tax class."
    slug: String!
}

"Input for the deleteTaxRate mutation."
input DeleteTaxRateInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the tax rate to update."
    id: Int!
}

"Input for the deleteUser mutation."
input DeleteUserInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the user you want to delete"
    id: ID!
    "Reassign posts and links to new User ID."
    reassignId: ID
}

"Input for the deleteVisibleProduct mutation."
input DeleteVisibleProductInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the visibleProduct to delete"
    id: ID!
}

"Input for the emptyCart mutation."
input EmptyCartInput {
    clearPersistentCart: Boolean
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
}

"Fee line data."
input FeeLineInput {
    "Fee amount."
    amount: String
    "Fee Line ID"
    id: ID
    "Fee name."
    name: String
    "Tax class of fee."
    taxClass: TaxClassEnum
    "Tax status of fee."
    taxStatus: TaxStatusEnum
    "Line total (after discounts)."
    total: String
}

"Input for the fillCart mutation."
input FillCartInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Coupons to be applied to the cart"
    coupons: [String]
    "Cart items to be added"
    items: [CartItemInput]
    "Shipping methods to be used."
    shippingMethods: [String]
}

"Input for the forgetSession mutation."
input ForgetSessionInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
}

"Arguments for filtering the GlobalProductAttributeToTermNodeConnection connection"
input GlobalProductAttributeToTermNodeConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: ProductAttributesConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the GroupProductToProductUnionConnection connection"
input GroupProductToProductUnionConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Arguments for filtering the HierarchicalContentNodeToContentNodeAncestorsConnection connection"
input HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypeEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the HierarchicalContentNodeToContentNodeChildrenConnection connection"
input HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypeEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Meta data."
input LineItemInput {
    "Line Item ID"
    id: ID
    "Meta data."
    metaData: [MetaDataInput]
    "Line name"
    name: String
    "Product ID."
    productId: Int
    "Quantity ordered."
    quantity: Int
    "Product SKU."
    sku: String
    "Line subtotal (before discounts)."
    subtotal: String
    "Tax class of product."
    taxClass: TaxClassEnum
    "Line total (after discounts)."
    total: String
    "Variation ID, if applicable."
    variationId: Int
}

"Arguments for filtering the LineItemToProductConnection connection"
input LineItemToProductConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Input for the loginWithCookies mutation."
input LoginWithCookiesInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Input your user/e-mail."
    login: String!
    "Input your password."
    password: String!
    "Whether to \"remember\" the user. Increases the time that the cookie will be kept. Default false."
    rememberMe: Boolean
}

"Input for the logout mutation."
input LogoutInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
}

"Arguments for filtering the MediaItemToCommentConnection connection"
input MediaItemToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    "Limit results to those affiliated with a given content object ID."
    contentId: ID
    "Array of content object IDs to include affiliated comments for."
    contentIdIn: [ID]
    "Array of content object IDs to exclude affiliated comments for."
    contentIdNotIn: [ID]
    "Content object name (i.e. slug ) to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    "Array of parent IDs of comments *not* to retrieve children for."
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the MenuItemToMenuItemConnection connection"
input MenuItemToMenuItemConnectionWhereArgs {
    "The database ID of the object"
    id: Int
    "The menu location for the menu being queried"
    location: MenuLocationEnum
    "The database ID of the parent menu object"
    parentDatabaseId: Int
    "The ID of the parent menu object"
    parentId: ID
}

"Arguments for filtering the MenuToMenuItemConnection connection"
input MenuToMenuItemConnectionWhereArgs {
    "The database ID of the object"
    id: Int
    "The menu location for the menu being queried"
    location: MenuLocationEnum
    "The database ID of the parent menu object"
    parentDatabaseId: Int
    "The ID of the parent menu object"
    parentId: ID
}

"Meta data."
input MetaDataInput {
    "Meta ID."
    id: String
    "Meta key."
    key: String!
    "Meta value."
    value: String!
}

"Arguments for filtering the OrderToCommentConnection connection"
input OrderToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    "Limit results to those affiliated with a given content object ID."
    contentId: ID
    "Array of content object IDs to include affiliated comments for."
    contentIdIn: [ID]
    "Array of content object IDs to exclude affiliated comments for."
    contentIdNotIn: [ID]
    "Content object name (i.e. slug ) to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    "Array of parent IDs of comments *not* to retrieve children for."
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the OrderToDownloadableItemConnection connection"
input OrderToDownloadableItemConnectionWhereArgs {
    "Limit results to downloadable items that can be downloaded now."
    active: Boolean
    "Limit results to downloadable items that are expired."
    expired: Boolean
    "Limit results to downloadable items that have downloads remaining."
    hasDownloadsRemaining: Boolean
}

"Arguments for filtering the OrderToRefundConnection connection"
input OrderToRefundConnectionWhereArgs {
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to specific ids."
    include: [Int]
    "Limit result set to refunds from a specific group of order IDs."
    orderIn: [Int]
    "What paramater to use to order the objects by."
    orderby: [PostTypeOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit results to those matching a string."
    search: String
    "Limit result set to refunds assigned a specific status."
    statuses: [String]
}

"Options for ordering the connection"
input OrdersOrderbyInput {
    field: OrdersOrderByEnum!
    order: OrderEnum
}

"Arguments for filtering the PaTestToContentNodeConnection connection"
input PaTestToContentNodeConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypesOfPaTestEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the PaTestToProductConnection connection"
input PaTestToProductConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Arguments for filtering the PaTestToProductVariationConnection connection"
input PaTestToProductVariationConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Arguments for filtering the PageToCommentConnection connection"
input PageToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    "Limit results to those affiliated with a given content object ID."
    contentId: ID
    "Array of content object IDs to include affiliated comments for."
    contentIdIn: [ID]
    "Array of content object IDs to exclude affiliated comments for."
    contentIdNotIn: [ID]
    "Content object name (i.e. slug ) to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    "Array of parent IDs of comments *not* to retrieve children for."
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the PageToRevisionConnection connection"
input PageToRevisionConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Set relationships between the post to categories"
input PostCategoriesInput {
    "If true, this will append the category to existing related categories. If false, this will replace existing relationships. Default true."
    append: Boolean
    "The input list of items to set."
    nodes: [PostCategoriesNodeInput]
}

"List of categories to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input PostCategoriesNodeInput {
    "The description of the category. This field is used to set a description of the category if a new one is created during the mutation."
    description: String
    "The ID of the category. If present, this will be used to connect to the post. If no existing category exists with this ID, no connection will be made."
    id: ID
    "The name of the category. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
    name: String
    "The slug of the category. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
    slug: String
}

"Arguments for filtering the PostFormatToContentNodeConnection connection"
input PostFormatToContentNodeConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypesOfPostFormatEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the PostFormatToPostConnection connection"
input PostFormatToPostConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    "Array of category IDs, used to display objects from one category OR another"
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    "Array of category IDs, used to display objects from one category OR another"
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    "Array of tag IDs, used to display objects from one tag OR another"
    tagIn: [ID]
    "Array of tag IDs, used to display objects from one tag OR another"
    tagNotIn: [ID]
    "Array of tag slugs, used to display objects from one tag AND another"
    tagSlugAnd: [String]
    "Array of tag slugs, used to include objects in ANY specified tags"
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Options for ordering the connection"
input PostObjectsConnectionOrderbyInput {
    "The field to order the connection by"
    field: PostObjectsConnectionOrderbyEnum!
    "Possible directions in which to order a list of items"
    order: OrderEnum!
}

"Set relationships between the post to postFormats"
input PostPostFormatsInput {
    "If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true."
    append: Boolean
    "The input list of items to set."
    nodes: [PostPostFormatsNodeInput]
}

"List of postFormats to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input PostPostFormatsNodeInput {
    "The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation."
    description: String
    "The ID of the postFormat. If present, this will be used to connect to the post. If no existing postFormat exists with this ID, no connection will be made."
    id: ID
    "The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
    name: String
    "The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
    slug: String
}

"Set relationships between the post to tags"
input PostTagsInput {
    "If true, this will append the tag to existing related tags. If false, this will replace existing relationships. Default true."
    append: Boolean
    "The input list of items to set."
    nodes: [PostTagsNodeInput]
}

"List of tags to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input PostTagsNodeInput {
    "The description of the tag. This field is used to set a description of the tag if a new one is created during the mutation."
    description: String
    "The ID of the tag. If present, this will be used to connect to the post. If no existing tag exists with this ID, no connection will be made."
    id: ID
    "The name of the tag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
    name: String
    "The slug of the tag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
    slug: String
}

"Arguments for filtering the PostToCategoryConnection connection"
input PostToCategoryConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the PostToCommentConnection connection"
input PostToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    "Limit results to those affiliated with a given content object ID."
    contentId: ID
    "Array of content object IDs to include affiliated comments for."
    contentIdIn: [ID]
    "Array of content object IDs to exclude affiliated comments for."
    contentIdNotIn: [ID]
    "Content object name (i.e. slug ) to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    "Array of parent IDs of comments *not* to retrieve children for."
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the PostToPostFormatConnection connection"
input PostToPostFormatConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the PostToRevisionConnection connection"
input PostToRevisionConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    "Array of category IDs, used to display objects from one category OR another"
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    "Array of category IDs, used to display objects from one category OR another"
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    "Array of tag IDs, used to display objects from one tag OR another"
    tagIn: [ID]
    "Array of tag IDs, used to display objects from one tag OR another"
    tagNotIn: [ID]
    "Array of tag slugs, used to display objects from one tag AND another"
    tagSlugAnd: [String]
    "Array of tag slugs, used to include objects in ANY specified tags"
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the PostToTagConnection connection"
input PostToTagConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the PostToTermNodeConnection connection"
input PostToTermNodeConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "The Taxonomy to filter terms by"
    taxonomies: [TaxonomyEnum]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Options for ordering the connection"
input PostTypeOrderbyInput {
    field: PostTypeOrderByEnum!
    order: OrderEnum
}

"Set relationships between the Product to allPaTest"
input ProductAllPaTestInput {
    "If true, this will append the paTest to existing related allPaTest. If false, this will replace existing relationships. Default true."
    append: Boolean
    "The input list of items to set."
    nodes: [ProductAllPaTestNodeInput]
}

"List of allPaTest to connect the Product to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input ProductAllPaTestNodeInput {
    "The description of the paTest. This field is used to set a description of the paTest if a new one is created during the mutation."
    description: String
    "The ID of the paTest. If present, this will be used to connect to the Product. If no existing paTest exists with this ID, no connection will be made."
    id: ID
    "The name of the paTest. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
    name: String
    "The slug of the paTest. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
    slug: String
}

"Product filter"
input ProductAttributeFilterInput {
    "A list of term ids"
    ids: [Int]
    "Filter operation type"
    operator: AttributeOperatorEnum
    "Which field to select taxonomy term by."
    taxonomy: ProductAttributeEnum!
    "A list of term slugs"
    terms: [String]
}

"Options for ordering the connection"
input ProductAttributeInput {
    attributeName: String!
    attributeValue: String
}

"Product filter"
input ProductAttributeQueryInput {
    "Limit result set to products with selected global attributes."
    queries: [ProductAttributeFilterInput]
    "The logical relationship between attributes when filtering across multiple at once."
    relation: AttributeOperatorEnum
}

"Arguments for filtering the ProductCategoryToContentNodeConnection connection"
input ProductCategoryToContentNodeConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypesOfProductCategoryEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the ProductCategoryToProductCategoryConnection connection"
input ProductCategoryToProductCategoryConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the ProductCategoryToProductConnection connection"
input ProductCategoryToProductConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Set relationships between the Product to productCategories"
input ProductProductCategoriesInput {
    "If true, this will append the productCategory to existing related productCategories. If false, this will replace existing relationships. Default true."
    append: Boolean
    "The input list of items to set."
    nodes: [ProductProductCategoriesNodeInput]
}

"List of productCategories to connect the Product to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input ProductProductCategoriesNodeInput {
    "The description of the productCategory. This field is used to set a description of the productCategory if a new one is created during the mutation."
    description: String
    "The ID of the productCategory. If present, this will be used to connect to the Product. If no existing productCategory exists with this ID, no connection will be made."
    id: ID
    "The name of the productCategory. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
    name: String
    "The slug of the productCategory. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
    slug: String
}

"Set relationships between the Product to productTags"
input ProductProductTagsInput {
    "If true, this will append the productTag to existing related productTags. If false, this will replace existing relationships. Default true."
    append: Boolean
    "The input list of items to set."
    nodes: [ProductProductTagsNodeInput]
}

"List of productTags to connect the Product to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input ProductProductTagsNodeInput {
    "The description of the productTag. This field is used to set a description of the productTag if a new one is created during the mutation."
    description: String
    "The ID of the productTag. If present, this will be used to connect to the Product. If no existing productTag exists with this ID, no connection will be made."
    id: ID
    "The name of the productTag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
    name: String
    "The slug of the productTag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
    slug: String
}

"Set relationships between the Product to productTypes"
input ProductProductTypesInput {
    "If true, this will append the productType to existing related productTypes. If false, this will replace existing relationships. Default true."
    append: Boolean
    "The input list of items to set."
    nodes: [ProductProductTypesNodeInput]
}

"List of productTypes to connect the Product to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input ProductProductTypesNodeInput {
    "The description of the productType. This field is used to set a description of the productType if a new one is created during the mutation."
    description: String
    "The ID of the productType. If present, this will be used to connect to the Product. If no existing productType exists with this ID, no connection will be made."
    id: ID
    "The name of the productType. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
    name: String
    "The slug of the productType. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
    slug: String
}

"Set relationships between the Product to shippingClasses"
input ProductShippingClassesInput {
    "If true, this will append the shippingClass to existing related shippingClasses. If false, this will replace existing relationships. Default true."
    append: Boolean
    "The input list of items to set."
    nodes: [ProductShippingClassesNodeInput]
}

"List of shippingClasses to connect the Product to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input ProductShippingClassesNodeInput {
    "The description of the shippingClass. This field is used to set a description of the shippingClass if a new one is created during the mutation."
    description: String
    "The ID of the shippingClass. If present, this will be used to connect to the Product. If no existing shippingClass exists with this ID, no connection will be made."
    id: ID
    "The name of the shippingClass. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
    name: String
    "The slug of the shippingClass. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
    slug: String
}

"Arguments for filtering the ProductTagToContentNodeConnection connection"
input ProductTagToContentNodeConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypesOfProductTagEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the ProductTagToProductConnection connection"
input ProductTagToProductConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Product filter"
input ProductTaxonomyFilterInput {
    "A list of term ids"
    ids: [Int]
    "Filter operation type"
    operator: TaxonomyOperatorEnum
    "Which field to select taxonomy term by."
    taxonomy: ProductTaxonomyEnum!
    "A list of term slugs"
    terms: [String]
}

"Product taxonomy filter type"
input ProductTaxonomyInput {
    "Product taxonomy rules to be filter results by"
    filters: [ProductTaxonomyFilterInput]
    "Logic relation between each filter."
    relation: RelationEnum
}

"Arguments for filtering the ProductToCommentConnection connection"
input ProductToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    "Limit results to those affiliated with a given content object ID."
    contentId: ID
    "Array of content object IDs to include affiliated comments for."
    contentIdIn: [ID]
    "Array of content object IDs to exclude affiliated comments for."
    contentIdNotIn: [ID]
    "Content object name (i.e. slug ) to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    "Array of parent IDs of comments *not* to retrieve children for."
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the ProductToCommentsConnection connection"
input ProductToCommentsConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    "Limit results to those affiliated with a given content object ID."
    contentId: ID
    "Array of content object IDs to include affiliated comments for."
    contentIdIn: [ID]
    "Array of content object IDs to exclude affiliated comments for."
    contentIdNotIn: [ID]
    "Content object name (i.e. slug ) to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    "Array of parent IDs of comments *not* to retrieve children for."
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the ProductToMediaItemConnection connection"
input ProductToMediaItemConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the ProductToPaTestConnection connection"
input ProductToPaTestConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the ProductToParentConnection connection"
input ProductToParentConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Arguments for filtering the ProductToPreviewConnection connection"
input ProductToPreviewConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Arguments for filtering the ProductToProductAttributeConnection connection"
input ProductToProductAttributeConnectionWhereArgs {
    "Filter results by attribute scope."
    type: ProductAttributeTypesEnum
}

"Arguments for filtering the ProductToProductCategoryConnection connection"
input ProductToProductCategoryConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the ProductToProductConnection connection"
input ProductToProductConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Arguments for filtering the ProductToProductTagConnection connection"
input ProductToProductTagConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the ProductToProductTypeConnection connection"
input ProductToProductTypeConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the ProductToProductUnionConnection connection"
input ProductToProductUnionConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Shuffle results? (Pagination currently not support by this argument)"
    shuffle: Boolean
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Arguments for filtering the ProductToShippingClassConnection connection"
input ProductToShippingClassConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the ProductToTermNodeConnection connection"
input ProductToTermNodeConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "The Taxonomy to filter terms by"
    taxonomies: [TaxonomyEnum]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the ProductToUpsellConnection connection"
input ProductToUpsellConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Arguments for filtering the ProductToVisibleProductConnection connection"
input ProductToVisibleProductConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the ProductTypeToContentNodeConnection connection"
input ProductTypeToContentNodeConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypesOfProductTypeEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the ProductTypeToProductConnection connection"
input ProductTypeToProductConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Set relationships between the Product to visibleProducts"
input ProductVisibleProductsInput {
    "If true, this will append the visibleProduct to existing related visibleProducts. If false, this will replace existing relationships. Default true."
    append: Boolean
    "The input list of items to set."
    nodes: [ProductVisibleProductsNodeInput]
}

"List of visibleProducts to connect the Product to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input ProductVisibleProductsNodeInput {
    "The description of the visibleProduct. This field is used to set a description of the visibleProduct if a new one is created during the mutation."
    description: String
    "The ID of the visibleProduct. If present, this will be used to connect to the Product. If no existing visibleProduct exists with this ID, no connection will be made."
    id: ID
    "The name of the visibleProduct. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
    name: String
    "The slug of the visibleProduct. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
    slug: String
}

"Arguments for filtering the ProductWithVariationsToProductVariationConnection connection"
input ProductWithVariationsToProductVariationConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Options for ordering the connection"
input ProductsOrderbyInput {
    field: ProductsOrderByEnum!
    order: OrderEnum
}

"Input for the registerCustomer mutation."
input RegisterCustomerInput {
    "User's AOL IM account."
    aim: String
    "Customer billing information"
    billing: CustomerAddressInput
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "A string containing content about the user."
    description: String
    "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
    displayName: String
    "A string containing the user's email address."
    email: String
    "\tThe user's first name."
    firstName: String
    "User's Jabber account."
    jabber: String
    "The user's last name."
    lastName: String
    "User's locale."
    locale: String
    "Meta data."
    metaData: [MetaDataInput]
    "A string that contains a URL-friendly name for the user. The default is the user's username."
    nicename: String
    "The user's nickname, defaults to the user's username."
    nickname: String
    "A string that contains the plain text password for the user."
    password: String
    "The date the user registered. Format is Y-m-d H:i:s."
    registered: String
    "A string for whether to enable the rich editor or not. False if not empty."
    richEditing: String
    "Customer shipping address"
    shipping: CustomerAddressInput
    "Customer shipping is identical to billing address"
    shippingSameAsBilling: Boolean
    "A string that contains the user's username."
    username: String
    "A string containing the user's URL for the user's web site."
    websiteUrl: String
    "User's Yahoo IM account."
    yim: String
}

"Input for the registerUser mutation."
input RegisterUserInput {
    "User's AOL IM account."
    aim: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "A string containing content about the user."
    description: String
    "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
    displayName: String
    "A string containing the user's email address."
    email: String
    "\tThe user's first name."
    firstName: String
    "User's Jabber account."
    jabber: String
    "The user's last name."
    lastName: String
    "User's locale."
    locale: String
    "A string that contains a URL-friendly name for the user. The default is the user's username."
    nicename: String
    "The user's nickname, defaults to the user's username."
    nickname: String
    "A string that contains the plain text password for the user."
    password: String
    "The date the user registered. Format is Y-m-d H:i:s."
    registered: String
    "A string for whether to enable the rich editor or not. False if not empty."
    richEditing: String
    "A string that contains the user's username."
    username: String!
    "A string containing the user's URL for the user's web site."
    websiteUrl: String
    "User's Yahoo IM account."
    yim: String
}

"Input for the removeCoupons mutation."
input RemoveCouponsInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Code of coupon being applied"
    codes: [String]
}

"Input for the removeItemsFromCart mutation."
input RemoveItemsFromCartInput {
    "Remove all cart items"
    all: Boolean
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Item keys of the items being removed"
    keys: [ID]
}

"Input for the removeMethodFromShippingZone mutation."
input RemoveMethodFromShippingZoneInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Shipping method instance ID"
    instanceId: Int!
    "The ID of the shipping zone to delete."
    zoneId: Int!
}

"Input for the resetUserPassword mutation."
input ResetUserPasswordInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Password reset key"
    key: String
    "The user's login (username)."
    login: String
    "The new password."
    password: String
}

"Input for the restoreCartItems mutation."
input RestoreCartItemsInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Cart item key of the item being removed"
    keys: [ID]
}

"Input for the restoreComment mutation."
input RestoreCommentInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the comment to be restored"
    id: ID!
}

"Input for the restoreReview mutation."
input RestoreReviewInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the target product review"
    id: ID!
}

"Arguments for filtering the RootQueryToCategoryConnection connection"
input RootQueryToCategoryConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToCommentConnection connection"
input RootQueryToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    "Limit results to those affiliated with a given content object ID."
    contentId: ID
    "Array of content object IDs to include affiliated comments for."
    contentIdIn: [ID]
    "Array of content object IDs to exclude affiliated comments for."
    contentIdNotIn: [ID]
    "Content object name (i.e. slug ) to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    "Array of parent IDs of comments *not* to retrieve children for."
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the RootQueryToContentNodeConnection connection"
input RootQueryToContentNodeConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypeEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToCouponConnection connection"
input RootQueryToCouponConnectionWhereArgs {
    "Limit result set to resources with a specific code."
    code: String
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to specific ids."
    include: [Int]
    "What paramater to use to order the objects by."
    orderby: [PostTypeOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit results to those matching a string."
    search: String
}

"Arguments for filtering the RootQueryToCustomerConnection connection"
input RootQueryToCustomerConnectionWhereArgs {
    "Limit result set to resources with a specific email."
    email: String
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to specific ids."
    include: [Int]
    "Order of results."
    order: OrderEnum
    "Order results by a specific field."
    orderby: CustomerConnectionOrderbyEnum
    "Limit results to those matching a string."
    search: String
}

"Arguments for filtering the RootQueryToMediaItemConnection connection"
input RootQueryToMediaItemConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToMenuConnection connection"
input RootQueryToMenuConnectionWhereArgs {
    "The database ID of the object"
    id: Int
    "The menu location for the menu being queried"
    location: MenuLocationEnum
    "The slug of the menu to query items for"
    slug: String
}

"Arguments for filtering the RootQueryToMenuItemConnection connection"
input RootQueryToMenuItemConnectionWhereArgs {
    "The database ID of the object"
    id: Int
    "The menu location for the menu being queried"
    location: MenuLocationEnum
    "The database ID of the parent menu object"
    parentDatabaseId: Int
    "The ID of the parent menu object"
    parentId: ID
}

"Arguments for filtering the RootQueryToOrderConnection connection"
input RootQueryToOrderConnectionWhereArgs {
    "Limit result set to orders assigned a specific billing email."
    billingEmail: String
    "Limit result set to orders assigned a specific customer."
    customerId: Int
    "Limit result set to orders assigned a specific group of customers."
    customersIn: [Int]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to specific ids."
    include: [Int]
    "What paramater to use to order the objects by."
    orderby: [OrdersOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to orders assigned a specific product."
    productId: Int
    "Limit results to those matching a string."
    search: String
    "Limit result set to orders assigned a specific status."
    statuses: [OrderStatusEnum]
}

"Arguments for filtering the RootQueryToPaTestConnection connection"
input RootQueryToPaTestConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToPageConnection connection"
input RootQueryToPageConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToPaymentGatewayConnection connection"
input RootQueryToPaymentGatewayConnectionWhereArgs {
    "Include disabled payment gateways?"
    all: Boolean
}

"Arguments for filtering the RootQueryToPluginConnection connection"
input RootQueryToPluginConnectionWhereArgs {
    "Show plugin based on a keyword search."
    search: String
    "Retrieve plugins where plugin status is in an array."
    stati: [PluginStatusEnum]
    "Show plugins with a specific status."
    status: PluginStatusEnum
}

"Arguments for filtering the RootQueryToPostConnection connection"
input RootQueryToPostConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    "Array of category IDs, used to display objects from one category OR another"
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    "Array of category IDs, used to display objects from one category OR another"
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    "Array of tag IDs, used to display objects from one tag OR another"
    tagIn: [ID]
    "Array of tag IDs, used to display objects from one tag OR another"
    tagNotIn: [ID]
    "Array of tag slugs, used to display objects from one tag AND another"
    tagSlugAnd: [String]
    "Array of tag slugs, used to include objects in ANY specified tags"
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToPostFormatConnection connection"
input RootQueryToPostFormatConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToProductCategoryConnection connection"
input RootQueryToProductCategoryConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToProductTagConnection connection"
input RootQueryToProductTagConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToProductTypeConnection connection"
input RootQueryToProductTypeConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToProductUnionConnection connection"
input RootQueryToProductUnionConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Arguments for filtering the RootQueryToRefundConnection connection"
input RootQueryToRefundConnectionWhereArgs {
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to specific ids."
    include: [Int]
    "Limit result set to refunds from a specific group of order IDs."
    orderIn: [Int]
    "What paramater to use to order the objects by."
    orderby: [PostTypeOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit results to those matching a string."
    search: String
    "Limit result set to refunds assigned a specific status."
    statuses: [String]
}

"Arguments for filtering the RootQueryToRevisionsConnection connection"
input RootQueryToRevisionsConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypeEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the RootQueryToShippingClassConnection connection"
input RootQueryToShippingClassConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToTagConnection connection"
input RootQueryToTagConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToTaxRateConnection connection"
input RootQueryToTaxRateConnectionWhereArgs {
    "Sort by tax class."
    class: TaxClassEnum
    "What paramater to use to order the objects by."
    orderby: [TaxRateConnectionOrderbyInput]
    "Filter results by a post code."
    postCode: String
    "Filter results by a group of post codes."
    postCodeIn: [String]
}

"Arguments for filtering the RootQueryToTermNodeConnection connection"
input RootQueryToTermNodeConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "The Taxonomy to filter terms by"
    taxonomies: [TaxonomyEnum]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToUserConnection connection"
input RootQueryToUserConnectionWhereArgs {
    "Array of userIds to exclude."
    exclude: [Int]
    "Pass an array of post types to filter results to users who have published posts in those post types."
    hasPublishedPosts: [ContentTypeEnum]
    "Array of userIds to include."
    include: [Int]
    "The user login."
    login: String
    "An array of logins to include. Users matching one of these logins will be included in results."
    loginIn: [String]
    "An array of logins to exclude. Users matching one of these logins will not be included in results."
    loginNotIn: [String]
    "The user nicename."
    nicename: String
    "An array of nicenames to include. Users matching one of these nicenames will be included in results."
    nicenameIn: [String]
    "An array of nicenames to exclude. Users matching one of these nicenames will not be included in results."
    nicenameNotIn: [String]
    "What parameter to use to order the objects by."
    orderby: [UsersConnectionOrderbyInput]
    "An array of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role."
    role: UserRoleEnum
    "An array of role names. Matched users must have at least one of these roles."
    roleIn: [UserRoleEnum]
    "An array of role names to exclude. Users matching one or more of these roles will not be included in results."
    roleNotIn: [UserRoleEnum]
    "Search keyword. Searches for possible string matches on columns. When \"searchColumns\" is left empty, it tries to determine which column to search in based on search string."
    search: String
    "Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'."
    searchColumns: [UsersConnectionSearchColumnEnum]
}

"Arguments for filtering the RootQueryToVisibleProductConnection connection"
input RootQueryToVisibleProductConnectionWhereArgs {
    "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
    cacheDomain: String
    "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
    childOf: Int
    "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
    childless: Boolean
    "Retrieve terms where the description is LIKE the input value. Default empty."
    descriptionLike: String
    "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
    exclude: [ID]
    "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
    excludeTree: [ID]
    "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
    hideEmpty: Boolean
    "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
    hierarchical: Boolean
    "Array of term ids to include. Default empty array."
    include: [ID]
    "Array of names to return term(s) for. Default empty."
    name: [String]
    "Retrieve terms where the name is LIKE the input value. Default empty."
    nameLike: String
    "Array of object IDs. Results will be limited to terms associated with these objects."
    objectIds: [ID]
    "Direction the connection should be ordered in"
    order: OrderEnum
    "Field(s) to order terms by. Defaults to 'name'."
    orderby: TermObjectsConnectionOrderbyEnum
    "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
    padCounts: Boolean
    "Parent term ID to retrieve direct-child terms of. Default empty."
    parent: Int
    "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
    search: String
    "Array of slugs to return term(s) for. Default empty."
    slug: [String]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomId: [ID]
    "Array of term taxonomy IDs, to match when querying terms."
    termTaxonomyId: [ID]
    "Whether to prime meta caches for matched terms. Default true."
    updateTermMetaCache: Boolean
}

"Input for the sendPasswordResetEmail mutation."
input SendPasswordResetEmailInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "A string that contains the user's username or email address."
    username: String!
}

"Input for the setDefaultPaymentMethod mutation."
input SetDefaultPaymentMethodInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Token ID of the payment token being deleted."
    tokenId: Int!
}

"Arguments for filtering the ShippingClassToContentNodeConnection connection"
input ShippingClassToContentNodeConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypesOfShippingClassEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the ShippingClassToProductConnection connection"
input ShippingClassToProductConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Shipping lines data."
input ShippingLineInput {
    "Shipping Line ID"
    id: ID
    "Shipping instance ID."
    instanceId: String
    "Meta data."
    metaData: [MetaDataInput]
    "Shipping method ID."
    methodId: String!
    "Shipping method name."
    methodTitle: String!
    "Line total (after discounts)."
    total: String!
}

"Shipping lines data."
input ShippingLocationInput {
    "Shipping location code."
    code: String
    "Shipping location type."
    type: ShippingLocationTypeEnum
}

"Arguments for filtering the SimpleProductToProductUnionConnection connection"
input SimpleProductToProductUnionConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Arguments for filtering the TagToContentNodeConnection connection"
input TagToContentNodeConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypesOfTagEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the TagToPostConnection connection"
input TagToPostConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    "Array of category IDs, used to display objects from one category OR another"
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    "Array of category IDs, used to display objects from one category OR another"
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    "Array of tag IDs, used to display objects from one tag OR another"
    tagIn: [ID]
    "Array of tag IDs, used to display objects from one tag OR another"
    tagNotIn: [ID]
    "Array of tag slugs, used to display objects from one tag AND another"
    tagSlugAnd: [String]
    "Array of tag slugs, used to include objects in ANY specified tags"
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Options for ordering the connection"
input TaxRateConnectionOrderbyInput {
    field: TaxRateConnectionOrderbyEnum!
    order: OrderEnum
}

"Input for the updateCategory mutation."
input UpdateCategoryInput {
    "The slug that the category will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the category object"
    description: String
    "The ID of the category object to update"
    id: ID!
    "The name of the category object to mutate"
    name: String
    "The ID of the category that should be set as the parent"
    parentId: ID
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the updateComment mutation."
input UpdateCommentInput {
    "The approval status of the comment."
    approved: String
    "The name of the comment's author."
    author: String
    "The email of the comment's author."
    authorEmail: String
    "The url of the comment's author."
    authorUrl: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The database ID of the post object the comment belongs to."
    commentOn: Int
    "Content of the comment."
    content: String
    "The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The ID of the comment being updated."
    id: ID!
    "Parent comment ID of current comment."
    parent: ID
    "The approval status of the comment"
    status: CommentStatusEnum
    "Type of comment."
    type: String
}

"Input for the updateCoupon mutation."
input UpdateCouponInput {
    "The amount of discount. Should always be numeric, even if setting a percentage."
    amount: Float
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Coupon code."
    code: String
    "The date the coupon expires, in the site's timezone."
    dateExpires: String
    "The date the coupon expires, as GMT."
    dateExpiresGmt: String
    "Coupon description."
    description: String
    "Determines the type of discount that will be applied."
    discountType: DiscountTypeEnum
    "List of email addresses that can use this coupon."
    emailRestrictions: [String]
    "If true, this coupon will not be applied to items that have sale prices."
    excludeSaleItems: Boolean
    "List of category IDs the coupon does not apply to."
    excludedProductCategories: [Int]
    "List of product IDs the coupon cannot be used on."
    excludedProductIds: [Int]
    "If true and if the free shipping method requires a coupon, this coupon will enable free shipping."
    freeShipping: Boolean
    "Unique identifier for the object."
    id: ID!
    "If true, the coupon can only be used individually. Other applied coupons will be removed from the cart."
    individualUse: Boolean
    "Max number of items in the cart the coupon can be applied to."
    limitUsageToXItems: Int
    "Maximum order amount allowed when using the coupon."
    maximumAmount: String
    "Meta data."
    metaData: [MetaDataInput]
    "Minimum order amount that needs to be in the cart before coupon applies."
    minimumAmount: String
    "List of category IDs the coupon applies to."
    productCategories: [Int]
    "List of product IDs the coupon can be used on."
    productIds: [Int]
    "How many times the coupon can be used in total."
    usageLimit: Int
    "How many times the coupon can be used per customer."
    usageLimitPerUser: Int
}

"Input for the updateCustomer mutation."
input UpdateCustomerInput {
    "User's AOL IM account."
    aim: String
    "Customer billing information"
    billing: CustomerAddressInput
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "A string containing content about the user."
    description: String
    "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
    displayName: String
    "A string containing the user's email address."
    email: String
    "\tThe user's first name."
    firstName: String
    "The ID of the user"
    id: ID
    "User's Jabber account."
    jabber: String
    "The user's last name."
    lastName: String
    "User's locale."
    locale: String
    "Meta data."
    metaData: [MetaDataInput]
    "A string that contains a URL-friendly name for the user. The default is the user's username."
    nicename: String
    "The user's nickname, defaults to the user's username."
    nickname: String
    "A string that contains the plain text password for the user."
    password: String
    "The date the user registered. Format is Y-m-d H:i:s."
    registered: String
    "A string for whether to enable the rich editor or not. False if not empty."
    richEditing: String
    "An array of roles to be assigned to the user."
    roles: [String]
    "Customer shipping address"
    shipping: CustomerAddressInput
    "Customer shipping is identical to billing address"
    shippingSameAsBilling: Boolean
    "A string containing the user's URL for the user's web site."
    websiteUrl: String
    "User's Yahoo IM account."
    yim: String
}

"Input for the updateItemQuantities mutation."
input UpdateItemQuantitiesInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Cart item being updated"
    items: [CartItemQuantityInput]
}

"Input for the updateMediaItem mutation."
input UpdateMediaItemInput {
    "Alternative text to display when mediaItem is not displayed"
    altText: String
    "The userId to assign as the author of the mediaItem"
    authorId: ID
    "The caption for the mediaItem"
    caption: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The comment status for the mediaItem"
    commentStatus: String
    "The date of the mediaItem"
    date: String
    "The date (in GMT zone) of the mediaItem"
    dateGmt: String
    "Description of the mediaItem"
    description: String
    "The file name of the mediaItem"
    filePath: String
    "The file type of the mediaItem"
    fileType: MimeTypeEnum
    "The ID of the mediaItem object"
    id: ID!
    "The ID of the parent object"
    parentId: ID
    "The ping status for the mediaItem"
    pingStatus: String
    "The slug of the mediaItem"
    slug: String
    "The status of the mediaItem"
    status: MediaItemStatusEnum
    "The title of the mediaItem"
    title: String
}

"Input for the updateMethodOnShippingZone mutation."
input UpdateMethodOnShippingZoneInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Whether the shipping method is enabled or not."
    enabled: Boolean
    "Shipping method instance ID"
    instanceId: Int!
    "The order of the shipping method."
    order: Int
    "The settings for the shipping method."
    settings: [WCSettingInput]
    "The ID of the shipping zone to delete."
    zoneId: Int!
}

"Input for the updateOrder mutation."
input UpdateOrderInput {
    "Order billing address"
    billing: CustomerAddressInput
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Coupons codes to be applied to order"
    coupons: [String]
    "Currency the order was created with, in ISO format."
    currency: CurrencyEnum
    "Order customer ID"
    customerId: Int
    "Note left by customer during checkout."
    customerNote: String
    "Order shipping lines"
    feeLines: [FeeLineInput]
    "Order global ID"
    id: ID
    "Define if the order is paid. It will set the status to processing and reduce stock items."
    isPaid: Boolean
    "Order line items"
    lineItems: [LineItemInput]
    "Order meta data"
    metaData: [MetaDataInput]
    "Order WP ID"
    orderId: Int
    "Parent order ID."
    parentId: Int
    "Payment method ID."
    paymentMethod: String
    "Payment method title."
    paymentMethodTitle: String
    "Order shipping address"
    shipping: CustomerAddressInput
    "Order shipping lines"
    shippingLines: [ShippingLineInput]
    "Order status"
    status: OrderStatusEnum
    "Order transaction ID"
    transactionId: String
}

"Input for the updatePaTest mutation."
input UpdatePaTestInput {
    "The slug that the pa_test will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the pa_test object"
    description: String
    "The ID of the paTest object to update"
    id: ID!
    "The name of the pa_test object to mutate"
    name: String
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the updatePage mutation."
input UpdatePageInput {
    "The userId to assign as the author of the object"
    authorId: ID
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The ID of the page object"
    id: ID!
    "Override the edit lock when another user is editing the post"
    ignoreEditLock: Boolean
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The ID of the parent object"
    parentId: ID
    "The password used to protect the content of the object"
    password: String
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "The title of the object"
    title: String
}

"Input for the updatePostFormat mutation."
input UpdatePostFormatInput {
    "The slug that the post_format will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the post_format object"
    description: String
    "The ID of the postFormat object to update"
    id: ID!
    "The name of the post_format object to mutate"
    name: String
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the updatePost mutation."
input UpdatePostInput {
    "The userId to assign as the author of the object"
    authorId: ID
    "Set connections between the post and categories"
    categories: PostCategoriesInput
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The excerpt of the object"
    excerpt: String
    "The ID of the post object"
    id: ID!
    "Override the edit lock when another user is editing the post"
    ignoreEditLock: Boolean
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The password used to protect the content of the object"
    password: String
    "The ping status for the object"
    pingStatus: String
    "URLs that have been pinged."
    pinged: [String]
    "Set connections between the post and postFormats"
    postFormats: PostPostFormatsInput
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "Set connections between the post and tags"
    tags: PostTagsInput
    "The title of the object"
    title: String
    "URLs queued to be pinged."
    toPing: [String]
}

"Input for the updateProductCategory mutation."
input UpdateProductCategoryInput {
    "The slug that the product_cat will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the product_cat object"
    description: String
    "The ID of the productCategory object to update"
    id: ID!
    "The name of the product_cat object to mutate"
    name: String
    "The ID of the product_cat that should be set as the parent"
    parentId: ID
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the updateProduct mutation."
input UpdateProductInput {
    "Set connections between the Product and allPaTest"
    allPaTest: ProductAllPaTestInput
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The comment status for the object"
    commentStatus: String
    "The content of the object"
    content: String
    "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The excerpt of the object"
    excerpt: String
    "The ID of the Product object"
    id: ID!
    "Override the edit lock when another user is editing the post"
    ignoreEditLock: Boolean
    "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
    menuOrder: Int
    "The password used to protect the content of the object"
    password: String
    "Set connections between the Product and productCategories"
    productCategories: ProductProductCategoriesInput
    "Set connections between the Product and productTags"
    productTags: ProductProductTagsInput
    "Set connections between the Product and productTypes"
    productTypes: ProductProductTypesInput
    "Set connections between the Product and shippingClasses"
    shippingClasses: ProductShippingClassesInput
    "The slug of the object"
    slug: String
    "The status of the object"
    status: PostStatusEnum
    "The title of the object"
    title: String
    "Set connections between the Product and visibleProducts"
    visibleProducts: ProductVisibleProductsInput
}

"Input for the updateProductTag mutation."
input UpdateProductTagInput {
    "The slug that the product_tag will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the product_tag object"
    description: String
    "The ID of the productTag object to update"
    id: ID!
    "The name of the product_tag object to mutate"
    name: String
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the updateProductType mutation."
input UpdateProductTypeInput {
    "The slug that the product_type will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the product_type object"
    description: String
    "The ID of the productType object to update"
    id: ID!
    "The name of the product_type object to mutate"
    name: String
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the updateReview mutation."
input UpdateReviewInput {
    "The approval status of the comment."
    approved: String
    "The name of the comment's author."
    author: String
    "The email of the comment's author."
    authorEmail: String
    "The url of the comment's author."
    authorUrl: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The database ID of the post object the comment belongs to."
    commentOn: Int
    "Content of the comment."
    content: String
    "The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "The ID of the review being updated."
    id: ID!
    "Parent comment ID of current comment."
    parent: ID
    "Product rating"
    rating: Int!
    "The approval status of the comment"
    status: CommentStatusEnum
}

"Input for the updateSession mutation."
input UpdateSessionInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Data to be persisted in the session."
    sessionData: [MetaDataInput]
}

"Input for the updateSettings mutation."
input UpdateSettingsInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Allow people to submit comments on new posts."
    discussionSettingsDefaultCommentStatus: String
    "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles."
    discussionSettingsDefaultPingStatus: String
    "A date format for all date strings."
    generalSettingsDateFormat: String
    "Site tagline."
    generalSettingsDescription: String
    "This address is used for admin purposes, like new user notification."
    generalSettingsEmail: String
    "WordPress locale code."
    generalSettingsLanguage: String
    "A day number of the week that the week should start on."
    generalSettingsStartOfWeek: Int
    "A time format for all time strings."
    generalSettingsTimeFormat: String
    "A city in the same timezone as you."
    generalSettingsTimezone: String
    "Site title."
    generalSettingsTitle: String
    "Site URL."
    generalSettingsUrl: String
    "The ID of the page that should display the latest posts"
    readingSettingsPageForPosts: Int
    "The ID of the page that should be displayed on the front page"
    readingSettingsPageOnFront: Int
    "Blog pages show at most."
    readingSettingsPostsPerPage: Int
    "What to show on the front page"
    readingSettingsShowOnFront: String
    "Default post category."
    writingSettingsDefaultCategory: Int
    "Default post format."
    writingSettingsDefaultPostFormat: String
    "Convert emoticons like :-) and :-P to graphics on display."
    writingSettingsUseSmilies: Boolean
}

"Input for the updateShippingClass mutation."
input UpdateShippingClassInput {
    "The slug that the product_shipping_class will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the product_shipping_class object"
    description: String
    "The ID of the shippingClass object to update"
    id: ID!
    "The name of the product_shipping_class object to mutate"
    name: String
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the updateShippingMethod mutation."
input UpdateShippingMethodInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    shippingMethods: [String]
}

"Input for the updateShippingZone mutation."
input UpdateShippingZoneInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The ID of the shipping zone to update."
    id: Int!
    "Name of the shipping zone."
    name: String
    "Order of the shipping zone."
    order: Int
}

"Input for the updateShippingZoneLocations mutation."
input UpdateShippingZoneLocationsInput {
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The locations to add to the shipping zone."
    locations: [ShippingLocationInput]
    "The ID of the shipping zone to delete."
    zoneId: Int!
}

"Input for the updateTag mutation."
input UpdateTagInput {
    "The slug that the post_tag will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the post_tag object"
    description: String
    "The ID of the tag object to update"
    id: ID!
    "The name of the post_tag object to mutate"
    name: String
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Input for the updateTaxRate mutation."
input UpdateTaxRateInput {
    "Cities for the tax rate."
    cities: [String]
    "Tax rate class."
    class: TaxClassEnum
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "Whether the tax rate is compound."
    compound: Boolean
    "Country code for the tax rate."
    country: String
    "The ID of the tax rate to update."
    id: Int!
    "Tax rate name."
    name: String
    "Tax rate order."
    order: Int
    "Postcodes for the tax rate."
    postcodes: [String]
    "Tax rate priority."
    priority: Int
    "Tax rate."
    rate: String
    "Whether the tax rate is applied to shipping."
    shipping: Boolean
    "State code for the tax rate."
    state: String
}

"Input for the updateUser mutation."
input UpdateUserInput {
    "User's AOL IM account."
    aim: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "A string containing content about the user."
    description: String
    "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
    displayName: String
    "A string containing the user's email address."
    email: String
    "\tThe user's first name."
    firstName: String
    "The ID of the user"
    id: ID!
    "User's Jabber account."
    jabber: String
    "The user's last name."
    lastName: String
    "User's locale."
    locale: String
    "A string that contains a URL-friendly name for the user. The default is the user's username."
    nicename: String
    "The user's nickname, defaults to the user's username."
    nickname: String
    "A string that contains the plain text password for the user."
    password: String
    "The date the user registered. Format is Y-m-d H:i:s."
    registered: String
    "A string for whether to enable the rich editor or not. False if not empty."
    richEditing: String
    "An array of roles to be assigned to the user."
    roles: [String]
    "A string containing the user's URL for the user's web site."
    websiteUrl: String
    "User's Yahoo IM account."
    yim: String
}

"Input for the updateVisibleProduct mutation."
input UpdateVisibleProductInput {
    "The slug that the product_visibility will be an alias of"
    aliasOf: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The description of the product_visibility object"
    description: String
    "The ID of the visibleProduct object to update"
    id: ID!
    "The name of the product_visibility object to mutate"
    name: String
    "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
    slug: String
}

"Arguments for filtering the UserToCommentConnection connection"
input UserToCommentConnectionWhereArgs {
    "Comment author email address."
    authorEmail: String
    "Array of author IDs to include comments for."
    authorIn: [ID]
    "Array of author IDs to exclude comments for."
    authorNotIn: [ID]
    "Comment author URL."
    authorUrl: String
    "Array of comment IDs to include."
    commentIn: [ID]
    "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
    commentNotIn: [ID]
    "Include comments of a given type."
    commentType: String
    "Include comments from a given array of comment types."
    commentTypeIn: [String]
    "Exclude comments from a given array of comment types."
    commentTypeNotIn: String
    "Content object author ID to limit results by."
    contentAuthor: [ID]
    "Array of author IDs to retrieve comments for."
    contentAuthorIn: [ID]
    "Array of author IDs *not* to retrieve comments for."
    contentAuthorNotIn: [ID]
    "Limit results to those affiliated with a given content object ID."
    contentId: ID
    "Array of content object IDs to include affiliated comments for."
    contentIdIn: [ID]
    "Array of content object IDs to exclude affiliated comments for."
    contentIdNotIn: [ID]
    "Content object name (i.e. slug ) to retrieve affiliated comments for."
    contentName: String
    "Content Object parent ID to retrieve affiliated comments for."
    contentParent: Int
    "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
    contentStatus: [PostStatusEnum]
    "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
    contentType: [ContentTypeEnum]
    "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
    includeUnapproved: [ID]
    "Karma score to retrieve matching comments for."
    karma: Int
    "The cardinality of the order of the connection"
    order: OrderEnum
    "Field to order the comments by."
    orderby: CommentsConnectionOrderbyEnum
    "Parent ID of comment to retrieve children of."
    parent: Int
    "Array of parent IDs of comments to retrieve children for."
    parentIn: [ID]
    "Array of parent IDs of comments *not* to retrieve children for."
    parentNotIn: [ID]
    "Search term(s) to retrieve matching comments for."
    search: String
    "Comment status to limit results by."
    status: String
    "Include comments for a specific user ID."
    userId: ID
}

"Arguments for filtering the UserToMediaItemConnection connection"
input UserToMediaItemConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the UserToPageConnection connection"
input UserToPageConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the UserToPostConnection connection"
input UserToPostConnectionWhereArgs {
    "The user that's connected as the author of the object. Use the userId for the author object."
    author: Int
    "Find objects connected to author(s) in the array of author's userIds"
    authorIn: [ID]
    "Find objects connected to the author by the author's nicename"
    authorName: String
    "Find objects NOT connected to author(s) in the array of author's userIds"
    authorNotIn: [ID]
    "Category ID"
    categoryId: Int
    "Array of category IDs, used to display objects from one category OR another"
    categoryIn: [ID]
    "Use Category Slug"
    categoryName: String
    "Array of category IDs, used to display objects from one category OR another"
    categoryNotIn: [ID]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Tag Slug"
    tag: String
    "Use Tag ID"
    tagId: String
    "Array of tag IDs, used to display objects from one tag OR another"
    tagIn: [ID]
    "Array of tag IDs, used to display objects from one tag OR another"
    tagNotIn: [ID]
    "Array of tag slugs, used to display objects from one tag AND another"
    tagSlugAnd: [String]
    "Array of tag slugs, used to include objects in ANY specified tags"
    tagSlugIn: [String]
    "Title of the object"
    title: String
}

"Arguments for filtering the UserToRevisionsConnection connection"
input UserToRevisionsConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypeEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Options for ordering the connection"
input UsersConnectionOrderbyInput {
    "The field name used to sort the results."
    field: UsersConnectionOrderbyEnum!
    "The cardinality of the order of the connection"
    order: OrderEnum
}

"Arguments for filtering the VariableProductToProductUnionConnection connection"
input VariableProductToProductUnionConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"Arguments for filtering the VisibleProductToContentNodeConnection connection"
input VisibleProductToContentNodeConnectionWhereArgs {
    "The Types of content to filter"
    contentTypes: [ContentTypesOfVisibleProductEnum]
    "Filter the connection based on dates"
    dateQuery: DateQueryInput
    "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
    hasPassword: Boolean
    "Specific database ID of the object"
    id: Int
    "Array of IDs for the objects to retrieve"
    in: [ID]
    "Get objects with a specific mimeType property"
    mimeType: MimeTypeEnum
    "Slug / post_name of the object"
    name: String
    "Specify objects to retrieve. Use slugs"
    nameIn: [String]
    "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
    notIn: [ID]
    "What parameter to use to order the objects by."
    orderby: [PostObjectsConnectionOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items"
    parent: ID
    "Specify objects whose parent is in an array"
    parentIn: [ID]
    "Specify posts whose parent is not in an array"
    parentNotIn: [ID]
    "Show posts with a specific password."
    password: String
    "Show Posts based on a keyword search"
    search: String
    "Retrieve posts where post status is in an array."
    stati: [PostStatusEnum]
    "Show posts with a specific status."
    status: PostStatusEnum
    "Title of the object"
    title: String
}

"Arguments for filtering the VisibleProductToProductConnection connection"
input VisibleProductToProductConnectionWhereArgs {
    "Limit result set to products with a specific global product attribute"
    attribute: String
    "Limit result set to products with a specific global product attribute term ID (required an assigned attribute)."
    attributeTerm: String
    "Limit result set to products with selected global attribute queries."
    attributes: ProductAttributeQueryInput
    "Limit result set to products assigned a specific category name."
    category: String
    "Limit result set to products assigned a specific category name."
    categoryId: Int
    "Limit result set to products assigned to a specific group of category IDs."
    categoryIdIn: [Int]
    "Limit result set to products not assigned to a specific group of category IDs."
    categoryIdNotIn: [Int]
    "Limit result set to products assigned to a group of specific categories by name."
    categoryIn: [String]
    "Limit result set to products not assigned to a group of specific categories by name."
    categoryNotIn: [String]
    "Filter the connection based on dates."
    dateQuery: DateQueryInput
    "Ensure result set excludes specific IDs."
    exclude: [Int]
    "Limit result set to featured products."
    featured: Boolean
    "Limit result set to specific ids."
    include: [Int]
    "Include variations in the result set."
    includeVariations: Boolean
    "Limit result set to products based on a maximum price."
    maxPrice: Float
    "Limit result set to products based on a minimum price."
    minPrice: Float
    "Limit result set to products on sale."
    onSale: Boolean
    "What paramater to use to order the objects by."
    orderby: [ProductsOrderbyInput]
    "Use ID to return only children. Use 0 to return only top-level items."
    parent: Int
    "Specify objects whose parent is in an array."
    parentIn: [Int]
    "Specify objects whose parent is not in an array."
    parentNotIn: [Int]
    "Limit result set to products with a specific average rating. Must be between 1 and 5"
    rating: [Int]
    "Limit result set to products based on a keyword search."
    search: String
    "Limit result set to products assigned a specific shipping class ID."
    shippingClassId: Int
    "Limit result set to products with specific SKU(s). Use commas to separate."
    sku: String
    "Limit result set to products with specific slugs."
    slugIn: [String]
    "Limit result set to products assigned a specific status."
    status: String
    "Limit result set to products in stock or out of stock."
    stockStatus: [StockStatusEnum]
    "Limit result types to types supported by WooGraphQL."
    supportedTypesOnly: Boolean
    "Limit result set to products assigned a specific tag name."
    tag: String
    "Limit result set to products assigned a specific tag ID."
    tagId: Int
    "Limit result set to products assigned to a specific group of tag IDs."
    tagIdIn: [Int]
    "Limit result set to products not assigned to a specific group of tag IDs."
    tagIdNotIn: [Int]
    "Limit result set to products assigned to a specific group of tags by name."
    tagIn: [String]
    "Limit result set to products not assigned to a specific group of tags by name."
    tagNotIn: [String]
    "Limit result set with complex set of taxonomy filters."
    taxonomyFilter: ProductTaxonomyInput
    "Limit result set to products assigned a specific type."
    type: ProductTypesEnum
    "Limit result set to products assigned to a group of specific types."
    typeIn: [ProductTypesEnum]
    "Limit result set to products not assigned to a group of specific types."
    typeNotIn: [ProductTypesEnum]
    "Limit result set to products with a specific visibility level."
    visibility: CatalogVisibilityEnum
}

"WooCommerce setting input."
input WCSettingInput {
    "A unique identifier for the setting."
    id: String
    "Setting value."
    value: String
}

"Input for the writeReview mutation."
input WriteReviewInput {
    "The approval status of the comment."
    approved: String
    "The name of the comment's author."
    author: String
    "The email of the comment's author."
    authorEmail: String
    "The url of the comment's author."
    authorUrl: String
    "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
    clientMutationId: String
    "The database ID of the post object the comment belongs to."
    commentOn: Int
    "Content of the comment."
    content: String
    "The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
    date: String
    "Parent comment ID of current comment."
    parent: ID
    "Product rating"
    rating: Int!
    "The approval status of the comment"
    status: CommentStatusEnum
}
